<?xml version="1.0" encoding="utf-8" ?>
<?xml version='1.0' encoding='utf-8' ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/</id>
<title>Jenkins Blog</title>
<updated>2019-03-08T19:35:25+00:00</updated>
<link rel="self" type="application/atom+xml" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/rss.xml" />
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/" />
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/03/04/gsoc2019-announcement/</id>
<title>Jenkins is accepted to Google Summer Of Code 2019!</title>
<updated>2019-03-08T19:35:25+00:00</updated>
<published>2019-03-04T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/03/04/gsoc2019-announcement/" />
<author>
<name>oleg_nenashev</name>
</author>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<category term="events"></category>
<category term="community"></category>
<summary>
On behalf of the Jenkins GSoC org team,
I am happy to announce that the Jenkins project has been accepted to
Google Summer of Code 2019.
This year we invite students and mentors to join the Jenkins community and work together
on enhancing the Jenkins ecosystem.


Just to provide some numbers, this is the biggest GSoC ever, 206 organizations will participate in GSoC this year.
And it will be hopefully the biggest year for Jenkins as well.
We have 25 project ideas
and more than 30 potential mentors (and counting!).
It is already more than in 2016 and 2018 combined.
There are many plugins, SIGs and sub-projects which have already...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/gsoc/jenkins-gsoc-logo_small.png&quot; alt=&quot;Jenkins GSoC&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On behalf of the Jenkins GSoC org team,
I am happy to announce that the Jenkins project &lt;strong&gt;has been accepted&lt;/strong&gt; to
&lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code 2019&lt;/a&gt;.
This year we invite students and mentors to join the Jenkins community and work together
on enhancing the Jenkins ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just to provide some numbers, this is the biggest GSoC ever, 206 organizations will participate in GSoC this year.
And it will be hopefully the biggest year for Jenkins as well.
We have 25 &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/gsoc/2019/project-ideas&quot;&gt;project ideas&lt;/a&gt;
and more than 30 potential mentors (and counting!).
It is already more than in 2016 and 2018 combined.
There are many plugins, SIGs and sub-projects which have already joined GSoC this year.
And we have already received messages and first contributions from dozens of students, yey!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;What’s next?&lt;/strong&gt;
GSoC is officially announced, and please expect more students to contact projects in our
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/gsoc/#contacts&quot;&gt;Gitter channels and mailing lists&lt;/a&gt;.
Many communications will also happen in SIG and sub-project channels.
We will be working hard in order to help students to find interesting projects, to explore the area,
and to prepare their project proposals before the deadline on April 9th.
Then we will process the applications, select projects and assign mentor teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All information about the Jenkins GSoC is available on its &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/gsoc/&quot;&gt;sub-project page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;i-am-a-student-how-do-i-apply&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#i-am-a-student-how-do-i-apply&quot;&gt;&lt;/a&gt;I am a student. How do I apply?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/gsoc/students&quot;&gt;Information for students&lt;/a&gt; page for full application guidelines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We encourage interested students to reach out to the Jenkins community early and to start exploring project ideas.
All project ideas have chats and mailing lists referenced on their pages.
We will be also organizing office hours for students,
and you can use these meetings to meet org admins and mentors and to ask questions.
Also, join our &lt;a href=&quot;https://gitter.im/jenkinsci/gsoc-sig&quot;&gt;Gitter channel&lt;/a&gt; and the
&lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkinsci-gsoc-all-public&quot;&gt;mailing list&lt;/a&gt;
to receive information about such incoming events in the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The application period starts on March 25th, but you can prepare now!
Use the time before the application period to discuss and improve your project proposals.
We also recommend that you become familiar with Jenkins and start exploring your proposal areas.
Project ideas include quick-start guidelines and reference newbie-friendly issues
which may help with initial study.
If you do not see anything interesting,
you can &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/gsoc/proposing-project-ideas/&quot;&gt;propose your own project idea&lt;/a&gt;
or check out ideas proposed by &lt;a href=&quot;https://summerofcode.withgoogle.com/organizations/&quot;&gt;other organizations&lt;/a&gt;
participating in GSoC.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;i-want-to-be-a-mentor-is-it-too-late&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#i-want-to-be-a-mentor-is-it-too-late&quot;&gt;&lt;/a&gt;I want to be a mentor. Is it too late?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It’s not!
We are looking for more project ideas and for Jenkins contributors/users
who are passionate about Jenkins and want to mentor students.
No hardcore experience required, mentors can study the project internals together with students and technical advisors.
We are especially interested in ideas beyond the Java stack, and in ideas focusing new technologies and areas
(e.g. Kubernetes, IoT, Python, Go, whatever).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can either propose a new project idea or join an existing one.
See the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/12/26/gsoc-2019-call-for-mentors/&quot;&gt;Call for Mentors post&lt;/a&gt;
and &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/gsoc/mentors&quot;&gt;Information for mentors&lt;/a&gt; for details.
If you want to propose a new project,
please do so by March 11th so that students have time to explore them and to prepare their proposals.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year mentorship does &lt;strong&gt;NOT&lt;/strong&gt; require strong expertise in Jenkins development.
The objective is to guide students and to get involved into the Jenkins community.
GSoC org admins will help to find advisers if special expertise is required.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;important-dates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#important-dates&quot;&gt;&lt;/a&gt;Important dates&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mar 11 - deadline for new GSoC project idea proposals&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apr 09 - deadline for student applications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;May 06 - accepted projects announced, teams start community bonding and coding&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aug 26 - coding period ends&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sep 03 - Results announced&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://summerofcode.withgoogle.com/how-it-works/#timeline&quot;&gt;GSoC Timeline&lt;/a&gt; for more info.
In the Jenkins project we will also organize special events during and after GSoC (e.g. at Jenkins world).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/03/01/devops-world-jenkins-world-cfp-open/</id>
<title>DevOps World - Jenkins World 2019: Call for Papers is Open</title>
<updated>2019-03-08T19:35:25+00:00</updated>
<published>2019-03-01T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/03/01/devops-world-jenkins-world-cfp-open/" />
<author>
<name>svanalstine</name>
</author>
<category term="event"></category>
<category term="jenkinsworld"></category>
<summary>
This is a guest post by Skylar VanAlstine, who helps with
the Jenkins Area Meetup program and assists with
Marketing &amp; Community Programs at CloudBees, Inc.









The Jenkins World shuttle is ready for lift off once again. As usual, the sign of festivities looming begins with the Call for Papers.
Those who attended DevOps World | Jenkins World 2018 know that Jenkins World 2019 is coming back to San Francisco, and adding a stop in  Europe - Lisbon, Portugal.




Jenkins World USA | San Francisco | August 12 - 15, 2019


Jenkins World Europe | Lisbon | December 2 - 5, 2019*




To encourage open collaboration...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a guest post by &lt;a href=&quot;https://github.com/svanalstine&quot;&gt;Skylar VanAlstine&lt;/a&gt;, who helps with
the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/jam&quot;&gt;Jenkins Area Meetup&lt;/a&gt; program and assists with
Marketing &amp;amp; Community Programs at &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees, Inc.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/JW2019.png&quot; alt=&quot;Jenkins World 2019&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins World shuttle is ready for lift off once again. As usual, the sign of festivities looming begins with the Call for Papers.
Those who attended DevOps World | Jenkins World 2018 know that Jenkins World 2019 is coming back to San Francisco, and adding a stop in  Europe - Lisbon, Portugal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/devops-world/san-francisco&quot;&gt;&lt;strong&gt;Jenkins World USA&lt;/strong&gt;&lt;/a&gt; | San Francisco | August 12 - 15, 2019&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/devops-world/lisbon&quot;&gt;Jenkins World Europe&lt;/a&gt; | Lisbon | December 2 - 5, 2019*&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To encourage open collaboration and stimulate discussions that will help advance Jenkins adoption and drive it forward, we invite Jenkins users, developers and industry experts to submit a speaking proposal to DevOps World - Jenkins World San Francisco and or Lisbon.
Submissions for both locations are being accepted now.
The submission deadline for San Francisco, CA is March 10, 2019, @ 11:59 PM Pacific and the submission deadline for Lisbon, Portugal is June 9, 2019, @ 11:59 PM Pacific.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The below Q&amp;amp;A will help you breeze through the submission process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;where-do-i-go-to-submit-my-proposal&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#where-do-i-go-to-submit-my-proposal&quot;&gt;&lt;/a&gt;Where do I go to submit my proposal?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Submissions for both DevOps World - Jenkins World USA and Europe are accepted at:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cvent.com/c/abstracts/6eb10034-9500-43a1-97cd-ab4d9230d7f9&quot;&gt;Jenkins World USA&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cvent.com/c/abstracts/6eb10034-9500-43a1-97cd-ab4d9230d7f9&quot;&gt;Jenkins World Europe&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;can-i-make-proposals-to-both-conferences&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#can-i-make-proposals-to-both-conferences&quot;&gt;&lt;/a&gt;Can I make proposal(s) to both conferences?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yes, you can! Once you’ve created an account on the &lt;a href=&quot;https://www.cvent.com/c/abstracts/6eb10034-9500-43a1-97cd-ab4d9230d7f9&quot;&gt;CFP&lt;/a&gt; website you will be given the option to make submission(s) to one conference or both conferences.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;when-is-the-deadline-for-jenkins-world-usa&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#when-is-the-deadline-for-jenkins-world-usa&quot;&gt;&lt;/a&gt;When is the deadline for Jenkins World USA?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Saturday March 10, 2019 @ 11:59PM Pacific&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;when-is-the-deadline-for-jenkins-world-europe&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#when-is-the-deadline-for-jenkins-world-europe&quot;&gt;&lt;/a&gt;When is the deadline for Jenkins World Europe?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tuesday, June 9, 2019, @ 11:59 PM Pacific&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;san-francisco-important-dates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#san-francisco-important-dates&quot;&gt;&lt;/a&gt;San Francisco Important Dates:&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;January 9, 2019:&lt;/strong&gt; Call for papers opens
&lt;strong&gt;March 10, 2019:&lt;/strong&gt; Call for papers closes
&lt;strong&gt;April 12, 2019:&lt;/strong&gt; Submission decisions sent
&lt;strong&gt;May 1, 2019:&lt;/strong&gt; Agenda published - San Francisco, CA
&lt;strong&gt;May 6, 2019:&lt;/strong&gt; Speaker tasklist is sent out
&lt;strong&gt;August 12-15, 2019:&lt;/strong&gt; DevOps World | Jenkins World 2019 San Francisco&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lisbon-important-dates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#lisbon-important-dates&quot;&gt;&lt;/a&gt;Lisbon Important Dates:&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;January 9, 2019:&lt;/strong&gt; Call for papers opens
&lt;strong&gt;June 9, 2019:&lt;/strong&gt; Call for papers closes
&lt;strong&gt;July 19, 2019:&lt;/strong&gt; Submission decisions sent
&lt;strong&gt;August 19, 2019:&lt;/strong&gt; Agenda published
&lt;strong&gt;August 23, 2019:&lt;/strong&gt; Speaker tasklist is sent out
&lt;strong&gt;December 2-5, 2019:&lt;/strong&gt; DevOps World | Jenkins World 2019 Lisbon, Portugal&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*All Dates Are Subject To Change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We look forward to receiving your inspiring stories!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/02/28/serverless-jenkins/</id>
<title>Run your Jenkins pipeline without operating a Jenkins instance</title>
<updated>2019-03-08T19:35:25+00:00</updated>
<published>2019-02-28T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/02/28/serverless-jenkins/" />
<author>
<name>fwilhe</name>
</author>
<category term="jenkins"></category>
<category term="serverless"></category>
<summary>
My job is to work on a Jenkins pipeline specific to SAP S/4HANA extensions running on SAP Cloud Platform.
See the original blog post here.





Jenkins is a powerful tool for automation, and we heavily rely on the codified pipeline syntax introduced in Jenkins 2.


With regards to operations, we minimized the need for care with the cx-server life-cycle management greatly.
Still, you need to run that Jenkins server.
This means you’ll need to update the server and plugins (simplified by our life-cycle management), and scale as the number of builds grows.
User administration and backups are also required in a productive setup.


Is this really required,...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
My job is to work on a &lt;a href=&quot;https://github.com/sap/cloud-s4-sdk-pipeline&quot;&gt;Jenkins pipeline&lt;/a&gt; specific to SAP S/4HANA extensions running on SAP Cloud Platform.
See the &lt;a href=&quot;https://blogs.sap.com/2019/02/11/deep-dive-experimental-serverless-cicd-with-sap-s4hana-cloud-sdk-continuous-delivery-toolkit/&quot;&gt;original blog post here&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins is a powerful tool for automation, and we heavily rely on the codified pipeline syntax introduced in Jenkins 2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With regards to operations, we minimized the need for care with the &lt;a href=&quot;https://blogs.sap.com/2017/09/20/continuous-integration-and-delivery/&quot;&gt;cx-server life-cycle management&lt;/a&gt; greatly.
Still, you need to run that Jenkins server.
This means you’ll need to update the server and plugins (simplified by our life-cycle management), and scale as the number of builds grows.
User administration and backups are also required in a productive setup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Is this really required, or is there an alternative approach?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, I’ll introduce a prototype I did to get rid of that long running pet Jenkins instance.
Rather, we’ll have cattle Jenkins instances, created and destroyed on demand.
“Serverless” Jenkins in the sense that we don’t have to provision the server for Jenkins to run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The setup described in this post is highly experimental. I encourage you to try this out in a demo project, but be very cautious until further notice to use this on productive code. In this proof of concept, I’ll use a public GitHub repository and the free open-source offering by TravisCI. This setup is not suitable for commercial software.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The pets vs cattle metaphor describes how approaches in managing servers differ.
While you care for pets and treat them when they are unwell, cattle can be easily replaced.
Your traditional Jenkins server is a pet because it is often configured manually, and replacing it is a major effort.
For more background on this metaphor, &lt;a href=&quot;http://cloudscaling.com/blog/cloud-computing/the-history-of-pets-vs-cattle/&quot;&gt;click here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before we’re getting into the technical details, let’s discuss why we would want to try this out in the first place.
Running Jenkins on arbitrary CI/CD services, such as TravisCI seems very odd on first sight.
On such services you’ll usually invoke your build tools like Maven or npm in a small script, and that will do your build.
But in the enterprise world, both inside SAP and in the community, Jenkins has a huge market share.
There are many shared libraries for Jenkins, providing pre-made build steps which would be expensive to re-implement for other platforms.
Additionally, SAP S/4HANA Cloud SDK Pipeline is a ready to use pipeline based on Jenkins where you as the developer of an SAP S/4HANA extension application do not need to write and maintain the pipeline yourself.
This means reduced costs and effort for you, while the quality of your application improves, for example due to the many &lt;a href=&quot;https://github.com/SAP/cloud-s4-sdk-pipeline/blob/master/doc/pipeline/cloud-qualities.md&quot;&gt;cloud qualities&lt;/a&gt; which are checked out of the box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-22/green.png&quot; alt=&quot;green&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let me show you an experiment to see if we can get the best of both worlds.
The goal is to get all the quality checks and the continuous delivery that the SAP S/4HANA Cloud SDK Pipeline provides us, without the need for a pet Jenkins server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How do we do that? The Jenkins project has a project called &lt;a href=&quot;https://github.com/jenkinsci/jenkinsfile-runner&quot;&gt;Jenkinsfile runner&lt;/a&gt;.
It is a command line tool that basically boots up a stripped-down Jenkins instance, creates and runs a single job, and throws away that instance once the job is done. As you might guess, there is some overhead in that process.
This will add about 20 seconds to each build, which I found to be surprisingly fast, considering the usual startup time of a Jenkins server.
For convenient consumption, we have packaged &lt;a href=&quot;https://hub.docker.com/r/ppiper/jenkinsfile-runner&quot;&gt;Jenkinsfile runner as a Docker image&lt;/a&gt; which includes the Jenkins plugins that are required for SAP S/4HANA Cloud SDK Pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also utilize the quite new &lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin&quot;&gt;Configuration as Code plugin for Jenkins&lt;/a&gt;, which allows to codify the Jenkins configuration as YAML files.
As you will see in a minute, both Jenkinsfile runner and Configuration as Code are a perfect match.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to follow along, feel free to use our provided &lt;a href=&quot;https://github.com/sap/cloud-s4-sdk-book&quot;&gt;Address Manager example application&lt;/a&gt;.
You may fork the repository, or create your own repository and activate it on TravisCI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Based on the existing Address Manager, let’s add a small &lt;code&gt;.travis.yml&lt;/code&gt; file to instruct the build:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;language: minimal
services:
- docker
script: docker run -v /var/run/docker.sock:/var/run/docker.sock -v ${PWD}:/workspace -v /tmp -e CASC_JENKINS_CONFIG=/workspace/jenkins.yml -e CF_PW -e ERP_PW -e BRANCH_NAME=$TRAVIS_BRANCH ppiper/jenkinsfile-runner&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The script line has quite a few things going on, let’s see what is there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We run a Docker container based on the &lt;code&gt;ppiper/jenkinsfile-runner&lt;/code&gt; image.
We need to mount the Docker socket, so that our container can spawn sibling containers for tooling such as Maven or the CloudFoundry CLI.
We also need to mount the current directory (root of our project) to &lt;code&gt;/workspace&lt;/code&gt;, and tell the Jenkins Configuration as Code Plugin where to find the configuration file.
We’ll come to that file in a minute. Also be sure to pass your secret variables here.
Travis will mask them, so they are not in plain text in your build log.
Take note to change the names of the variables according to your requirements.
You might wonder that we need a &lt;code&gt;BRANCH_NAME&lt;/code&gt; environment variable.
This is required for the Pipeline to check if you’re working on the “productive branch”, where a productive deployment to SAP Cloud Platform is supposed to happen.
If you omit passing this variable, the pipeline will still run but never in the productive mode, and hence not deploy to SAP Cloud Platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You might need some secrets in the build, for example in integration tests or for deployment to SAP Cloud Platform.
You can make use of the &lt;a href=&quot;https://github.com/travis-ci/travis.rb#readme&quot;&gt;travis command line tool&lt;/a&gt; to encrypt them on your local machine as &lt;a href=&quot;https://docs.travis-ci.com/user/encryption-keys/&quot;&gt;documented here&lt;/a&gt;.
Take care that this might add your secret in plain text to the shell history on your machine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;travis encrypt CF_PW=supersecret --add
travis encrypt ERP_PW=alsosupersecret --add&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This command will add a line to your &lt;code&gt;.travis.yml&lt;/code&gt; file with the encrypted secret value.
Be sure to commit this change.
Also take note of the name of your variable, which must match the environment parameter, and your Jenkins configuration.
You should be aware of &lt;a href=&quot;https://docs.travis-ci.com/user/best-practices-security/&quot;&gt;this TravisCI document on secrets&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ll also need to add a &lt;code&gt;jenkins.yml&lt;/code&gt; file to our project.
Here we need to configure two shared libraries which are required for the SAP S/4HANA Cloud SDK Pipeline, and the credentials that are required for our pipeline.
Be sure not to put your secrets in plain text in here, but use the variables you used before via the travis cli tool.
TravisCI will decrypt the password on the fly for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;jenkins:
  numExecutors: 10
unclassified:
  globallibraries:
    libraries:
    - defaultVersion: &quot;master&quot;
      name: &quot;s4sdk-pipeline-library&quot;
      retriever:
        modernSCM:
          scm:
            git:
              remote: &quot;https://github.com/SAP/cloud-s4-sdk-pipeline-lib.git&quot;
    - defaultVersion: &quot;master&quot;
      name: &quot;piper-library-os&quot;
      retriever:
        modernSCM:
          scm:
            git:
              remote: &quot;https://github.com/SAP/jenkins-library.git&quot;
credentials:
  system:
    domainCredentials:
      - credentials:
          - usernamePassword:
              scope: GLOBAL
              id: &quot;MY-ERP&quot;
              username: MY_USER
              password: ${ERP_PW}
          - usernamePassword:
              scope: GLOBAL
              id: &quot;cf&quot;
              username: P12344223
              password: ${CF_PW}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You might add more configuration to this file &lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/README.md#initial-configuration&quot;&gt;as you need it&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit both files to your repo and push.
If the travis build works, you’ll see the build integration on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-22/in-progress.png&quot; alt=&quot;in progress&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On travis, you can follow the progress of your build live, and get the full text log of your Jenkins build.
If all went well, you will be greeted with a green build after a few minutes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-22/log.png&quot; alt=&quot;log&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Congratulations. You’re running a serverless Jenkins build with all the qualities checked by the SAP S/4HANA Cloud SDK Pipeline, without hosting your own Jenkins instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Keep in mind this is a proof of concept at this point.
The serverless Jenkins ecosystem is currently evolving, and neither Jenkinsfile runner, nor Configuration as Code are in a mature state as of February 2019.
One downside of this approach is that we lose the Jenkins user interface, so we can’t see our pipeline in blue ocean, and we don’t get the nice build summary.
We can get the whole log output from TravisCI, so this can be mitigated, but this is arguable not the best user experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But on the contrary, we don’t have to care for our pet Jenkins, we don’t need to update plugins or backup the configuration or build logs.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/02/26/jenkins-alexa-voice-controlled-cicd/</id>
<title>Jenkins + Alexa: Say Hello to Voice Controlled CI/CD</title>
<updated>2019-03-08T19:35:25+00:00</updated>
<published>2019-02-26T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/02/26/jenkins-alexa-voice-controlled-cicd/" />
<author>
<name>keshawilliams</name>
</author>
<category term="jenkins"></category>
<category term="alexa"></category>
<summary>
This is a guest post by Kesha Williams.





Integrating Jenkins with Alexa to launch your pipelines and obtain results
about your deployments through voice is easier than you think.  Learn how Alexa
Champion, Kesha Williams', latest side project teaches Alexa to deploy code to
the cloud.







Alexa (named after the ancient library of Alexandria) is Amazon&#8217;s Artificial
Intelligence (AI) powered intelligent voice assistant that runs in the cloud.
Software engineers make Alexa smarter by creating apps, called skills.  From
the time that I developed my first Alexa skill, I dreamed of deploying my Java
projects to the cloud via voice.  For me, telling Alexa to deploy...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;http://www.kesha.tech/&quot;&gt;Kesha Williams&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Integrating Jenkins with Alexa to launch your pipelines and obtain results
about your deployments through voice is easier than you think.  Learn how Alexa
Champion, Kesha Williams', latest side project teaches Alexa to deploy code to
the cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-26-alexa/jenkins_alexa_header.png&quot; alt=&quot;Jenkins with Amazon Alexa&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alexa (named after the ancient library of Alexandria) is Amazon’s Artificial
Intelligence (AI) powered intelligent voice assistant that runs in the cloud.
Software engineers make Alexa smarter by creating apps, called skills.  From
the time that I developed my first Alexa skill, I dreamed of deploying my Java
projects to the cloud via voice.  For me, telling Alexa to deploy my code is
the ultimate level of cool!  I recently made my dream a reality when I devoted
a weekend to developing my newest Alexa skill, DevOps Pal.  In this blog, I
will show you how I developed DevOps Pal and hopefully inspire you to build
your own version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/NsFbSJMrVQA?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-choose-voice-to-deploy-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-choose-voice-to-deploy-code&quot;&gt;&lt;/a&gt;Why Choose Voice to Deploy Code&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voice-first technology is revolutionizing how we interact with technology because the interaction is simple, frictionless, and time-saving.
For me, voice is an easier way to control Jenkins and retrieve results about my deployments without having to touch a keyboard.
In this use case, voice is another access point for data and is a way to further automate the process of building, testing, and deploying a Java project to the cloud, improving efficiency.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;continuous-integration-and-continuous-delivery-cicd&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#continuous-integration-and-continuous-delivery-cicd&quot;&gt;&lt;/a&gt;Continuous Integration and Continuous Delivery (CI/CD)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re working with DevOps, you understand the need for Continuous Integration and Continuous Delivery (CI/CD) to automate the software delivery pipeline in a reproducible way.
CI/CD is the practice of continuously building, testing, and deploying code once it’s committed to version control.
DevOps and CI/CD provides software engineering teams with confidence in the code being pushed to production and shorter development lifecycles, which in the end produces happier users, clients, and customers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;devops-pal-overview&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#devops-pal-overview&quot;&gt;&lt;/a&gt;DevOps Pal Overview&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DevOps Pal is a private Alexa for Business skill that is used to kick off a Jenkins pipeline job.
Alexa for Business was the perfect way for me to distribute DevOps Pal since I have the ability to enable the skill on an organization-by-organization basis, which gives me complete control over who has access.
Once DevOps Pal invokes the job, the pipeline status displays in real-time via the Blue Ocean Pipeline Run Details View Page.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;devops-pal-architecture&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#devops-pal-architecture&quot;&gt;&lt;/a&gt;DevOps Pal Architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I used several components and tools to create DevOps Pal. Let’s review the architecture in detail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-26-alexa/devops_pal_architecture.png&quot; alt=&quot;DevOps Pal Skill Architecture&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The flow begins by saying, &quot;Alexa, open DevOps Pal and deploy my code&quot;, to the Echo device.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Echo device listens for the wake word (e.g. Alexa, Echo, Computer, or Amazon), which employs deep learning technology running on the device to recognize the wake word the user has chosen.
Once the wake word is detected, what I say is recorded and sent to the Alexa Voice Service (AVS), which uses speech to text and natural language understanding (NLU) to identify my intent.
My intent is sent to DevOps Pal; the skill acts accordingly by kicking off the Jenkins job and sending a response back using text-to-speech synthesis (TTS), which makes the response natural sounding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s explore each component in more detail:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Alexa Voice Service (AVS) - I often refer to the Alexa Voice Service as the &quot;Alexa brain that runs in the cloud&quot;. The AVS is a suite of services built around a voice-controlled AI assistant. The AVS is flexible enough to allow third parties to add intelligent voice control to any connected product that has a microphone and speaker, so Alexa is not limited to just Echo devices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alexa Skills Kit (ASK) - ASK is the &quot;SDK&quot; (Software Development Kit) that allows developers to build custom skills for Alexa.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alexa Developer Portal - An Alexa skill includes a voice user interface, or VUI, to understand user intents, and a back-end cloud service to process intents by telling Alexa how to respond. The VUI and the integration with the back-end service is setup and configured through the Alexa Developer Portal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AWS Lambda - A chunk of code that runs in the cloud. Developers can run their code without having to provision or manage servers. Applications created with AWS Lambda are considered to be serverless. Lambda supports several popular languages like Python, Java, Node.js, Go, C#, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHub - A version control system for the Java project source code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jenkins on EC2 - I use Jenkins to build, test, and deploy my Java Application Programming Interface (API). Elastic Cloud Computer (EC2) is the virtual server where Jenkins is installed. Jenkins works alongside several other tools:&lt;/p&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Maven - A build automation tool for Java projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Junit - A testing framework for Java projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AWS Command Line Interface (CLI) - This is a command line tool that allows developers to access their Amazon Web Services (AWS) account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blue Ocean - This is a plugin for Jenkins that provides an easy to use interface to create and monitor Jenkins pipelines.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AWS Elastic Beanstalk - This is an orchestration service that allows developers to deploy and manage web applications in the AWS cloud.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Postman - This is an HTTP client for testing APIs and web services.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;voice-interaction-model&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#voice-interaction-model&quot;&gt;&lt;/a&gt;Voice Interaction Model&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Voice User Interface (VUI) describes the overall conversational flow and is setup via the Alexa Developer Console.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-26-alexa/alexa_dev_console.png&quot; alt=&quot;Invocation Name Setup Via Alexa Developer Console&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few important components of the VUI are the Invocation Name (how users launch your skill) and the Intents (phrases a user says to &quot;talk to&quot; or interact with your skill).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-26-alexa/alexa_dev_console_deploy.png&quot; alt=&quot;Utterances for DeployCodeIntent Via Alexa Developer Console&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Specifically, the &quot;DeployCodeIntent&quot; is invoked when a user says one of several phrases (e.g. run jenkins pipeline, run jenkins job, deploy the code, deploy code, or deploy ) or a variation of the phrase like, &quot;deploy my code&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-26-alexa/alexa_dev_console_endpoint.png&quot; alt=&quot;Backend Fulfillment Logic - Endpoint Via Alexa Developer Console&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The endpoint is the destination where the skill requests are sent for fulfillment.
In this case, the backend logic is an AWS Lambda authored in Python.
The business logic in the Python Lambda uses the Jenkins remote access API to trigger the job remotely.
The format of the URL to trigger the job is &lt;code&gt;jenkins_url/job/job_name/build&lt;/code&gt;.
The API call uses BASIC authentication and a Jenkins Crumb passed in the HTTP request header for CSRF protection.
Alternatively, since Jenkins 2.96, you can use an API token instead of a Jenkins Crumb and password to authenticate your API call.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jenkins-job&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-job&quot;&gt;&lt;/a&gt;Jenkins Job&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-26-alexa/jenkins_classic_alexa.png&quot; alt=&quot;Jenkins Classic UI&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins job, 'alexa-cicd', is the job invoked from DevOps Pal.
Although, the Jenkins Classic User Interface (UI) is functional, I prefer the Blue Ocean interface because it rethinks the user experience of Jenkins by making it visually intuitive.
Blue Ocean is easily enabled via a &lt;a href=&quot;https://plugins.jenkins.io/blueocean&quot;&gt;plugin&lt;/a&gt; and leaves the option to continue using the Jenkins Classic UI should you so choose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-26-alexa/jenkins_blueocean_alexa.png&quot; alt=&quot;Jenkins Blue Ocean Pipeline Run Details View Page&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After Alexa kicks off the 'alexa-cicd' job, I navigate to the Pipeline Run Details View Page, which allows me to watch the job status in realtime.
This job has four stages: Initialize, Build, Test, and Deploy.
The final stage, Deploy, uses the AWS Command Line Interface (CLI) on the Jenkins server to copy the artifact to Amazon Simple Storage Service (S3) and create a new Elastic Beanstalk application version based on the artifact located on S3.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cool-features-to-add&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cool-features-to-add&quot;&gt;&lt;/a&gt;Cool Features to Add&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The ability to deploy code with voice is just the beginning.
There are several cool features that can easily be added:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DevOps Pal can be updated to prompt the user for the specific Jenkins pipeline job name. This adds a level of flexibility that will really empower DevOps teams.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alexa Notifications can be integrated with DevOps Pal to send a notification to the Echo device when the Jenkins job is finished or when it fails. If the job fails, more information about where the job failed and exactly why will be provided. This will prove useful for long running jobs or for getting timely updates regarding the job status.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DevOps Pal can be updated to answer direct questions about the real-time status of a specific job.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;want-to-learn-more&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#want-to-learn-more&quot;&gt;&lt;/a&gt;Want to Learn More&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope you’ve enjoyed learning more about the architecture of DevOps Pal and deploying code to the cloud using Jenkins and voice.
For more detailed steps, I’ve collaborated with Cloud Academy to author a course, &lt;a href=&quot;https://cloudacademy.com/aws-alexa-for-ci-cd-new-course&quot;&gt;AWS Alexa for CI/CD&lt;/a&gt; on the subject.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/02/21/credentials-masking/</id>
<title>Limitations of Credentials Masking</title>
<updated>2019-03-08T19:35:25+00:00</updated>
<published>2019-02-21T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/02/21/credentials-masking/" />
<author>
<name>daniel-beck</name>
</author>
<category term="security"></category>
<summary>
In the Jenkins project, we ask that people report security issues to our private issue tracker.
This allows us to review issues and prepare fixes in private, often resulting in better, safer security fixes.


As a side effect of that, we also learn about common misconceptions and usability problems related to security in Jenkins.
This post is intended to address one of those:
The goal and limitations of credentials masking.


The Problem


One very common example of that is the role of credentials masking in Jenkins, typically involving a pipeline snippet that looks like this:

  
    Jenkinsfile (Scripted Pipeline)
   ...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Jenkins project, we ask that people &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/security/#reporting-vulnerabilities&quot;&gt;report security issues to our private issue tracker&lt;/a&gt;.
This allows us to review issues and prepare fixes in private, often resulting in better, safer security fixes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a side effect of that, we also learn about common misconceptions and usability problems related to security in Jenkins.
This post is intended to address one of those:
The goal and limitations of credentials masking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-problem&quot;&gt;&lt;/a&gt;The Problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One very common example of that is the role of credentials masking in Jenkins, typically involving a pipeline snippet that looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: true&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;withCredentials([usernamePassword(&lt;span style=&quot;color:#606&quot;&gt;credentialsId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;topSecretCredentials&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;passwordVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PWD&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;usernameVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;USR&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)])
  sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;./deploy.sh&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#777&quot;&gt;// requires PWD and USR to be set&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Credentials that are in scope are made available to the pipeline without limitation.
To prevent accidental exposure in the build log, credentials are masked from regular output, so an invocation of &lt;code&gt;env&lt;/code&gt; (Linux) or &lt;code&gt;set&lt;/code&gt; (Windows), or programs printing their environment or parameters would not reveal them in the build log to users who would not otherwise have access to the credentials.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The misconception here is that Jenkins will prevent other, perhaps deliberate ways to reveal the password.
Some examples:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: true&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;withCredentials([usernamePassword(&lt;span style=&quot;color:#606&quot;&gt;credentialsId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;topSecretCredentials&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;passwordVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PWD&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;usernameVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;USR&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)])
  sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo $PWD | base64&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#777&quot;&gt;// will print e.g. dDBwczNjcjN0Cg= which is trivially converted back to the top secret password&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: true&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;withCredentials([usernamePassword(&lt;span style=&quot;color:#606&quot;&gt;credentialsId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;topSecretCredentials&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;passwordVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PWD&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;usernameVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;USR&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)])
  sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo $PWD &amp;gt; myfile&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  archiveArtifacts &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;myfile&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#777&quot;&gt;// then browse archived artifacts from the Jenkins UI&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both of these snippets circumvent credentials masking in the build log, and show that people with control over the build script can use credentials in ways not necessarily intended or approved by admins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Obviously these are just the most straightforward examples illustrating the problem.
Others could involve the proc file system, sending it to an HTTP server in response to a 401 authentication challenge, embedding it in the (otherwise legitimate) build result, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It would be great if Jenkins could allow the flexible use of credentials with no risk of exposing them through straightforward build script modifications, but realistically, it is impossible for Jenkins to police use of the credential by a build script without the support of a very specific environment setup (e.g. restrictive network configuration).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should also be noted that credentials aren’t just at risk from users able to control the pipeline, typically by editing the &lt;code&gt;Jenkinsfile&lt;/code&gt;.
Actual build scripts invoked by pipelines, either shell scripts as in the example above, or more standard build tools such as Maven (controlled by &lt;code&gt;pom.xml&lt;/code&gt;) are just as much of a risk if they are run inside a &lt;code&gt;withCredentials&lt;/code&gt; block, or executing on the same agent as another block that passed such credentials.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Disclosure of secrets can also happen inadvertently:
Jenkins will prevent &lt;em&gt;exact&lt;/em&gt; matches of the password or other secret to appear in the log file.
Consider that the secret may contain shell metacharacters that &lt;code&gt;bash +x&lt;/code&gt; would escape by adding a &lt;code&gt;\&lt;/code&gt; before those characters.
The sequence of characters to be printed is no longer identical to the secret, so would not be masked.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-solution&quot;&gt;&lt;/a&gt;The Solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Credentials can be defined in different scopes:
Credentials defined on the root &lt;em&gt;Jenkins&lt;/em&gt; store (the default) will be available to all jobs on the instance.
The only exception are credentials with &lt;em&gt;System&lt;/em&gt; scope, intended for the global configuration only, for example, to connect to agents.
Credentials defined in a folder are only available within that folder (transitively, i.e. also in folders inside this folder).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This allows defining sensitive credentials, such as deployment credentials, on specific folders whose contents only users trusted with those credentials are allowed to configure:
Directly in Jenkins using &lt;a href=&quot;https://plugins.jenkins.io/matrix-auth&quot;&gt;Matrix Authorization Plugin&lt;/a&gt; and by limiting write access to repositories defining pipelines as code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pipelines inside this folder can use the (e.g. deployment) credentials without limitation, while they’re inaccessible to pipelines outside the folder.
Those would need to use the &lt;a href=&quot;https://plugins.jenkins.io/pipeline-build-step&quot;&gt;&lt;code&gt;build&lt;/code&gt; step&lt;/a&gt; or similar approaches to invoke the pipelines inside the folder to deploy their output.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;caveats&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#caveats&quot;&gt;&lt;/a&gt;Caveats&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While the previous section outlines a solution to the problem of restricting access to credentials, care needs to be taken so that credentials are not captured anyway.
For example, a deployment pipeline that allows its users to define where to deploy to as a build parameter might still be used to send credentials to a maliciously set up host to capture them.
&lt;a href=&quot;https://jenkins.io/blog/2018/05/15/incremental-deployment/&quot;&gt;A blog post explaining the design of some Jenkins project infrastructure&lt;/a&gt; discusses some of these concerns around trust.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should also be noted that credential domains are a UI hint only — defining a credential to only be valid for &lt;code&gt;github.com&lt;/code&gt; does not actually prevent its use elsewhere.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/02/17/remoting-cli-removed/</id>
<title>Remoting-based CLI removed from Jenkins</title>
<updated>2019-03-08T19:35:25+00:00</updated>
<published>2019-02-17T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/02/17/remoting-cli-removed/" />
<author>
<name>jglick</name>
</author>
<category term="core"></category>
<category term="security"></category>
<category term="remoting"></category>
<summary>
Close to two years ago, we announced in
New, safer CLI in 2.54
that the traditional “Remoting” operation mode of the Jenkins command-line interface
was being deprecated for a variety of reasons, especially its very poor security record.
Today in Jenkins 2.165 support for this mode is finally being removed altogether,
in both the server and bundled jenkins-cli.jar client.
The projected June 5th LTS release will reflect this removal,
at which point the Jenkins project will no longer maintain this feature
nor investigate security vulnerabilities in it.


This change makes the code in Jenkins core related to the CLI considerably simpler and more maintainable.
(There are still two transports—HTTP(S) and...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Close to two years ago, we announced in
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2017/04/11/new-cli/&quot;&gt;New, safer CLI in 2.54&lt;/a&gt;
that the traditional “Remoting” operation mode of the Jenkins command-line interface
was being deprecated for a variety of reasons, especially its very poor security record.
Today in Jenkins 2.165 support for this mode is finally being removed altogether,
in both the server and bundled &lt;code&gt;jenkins-cli.jar&lt;/code&gt; client.
The projected June 5th LTS release will reflect this removal,
at which point the Jenkins project will no longer maintain this feature
nor investigate security vulnerabilities in it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This change makes the code in Jenkins core related to the CLI considerably simpler and more maintainable.
(There are still two &lt;em&gt;transports&lt;/em&gt;—HTTP(S) and SSH—but they have similar capabilities and behavior.)
It also reduces the “attack surface” the Jenkins security team must consider.
Among other issues, a compromised &lt;em&gt;server&lt;/em&gt; could freely attack a developer’s laptop if &lt;code&gt;-remoting&lt;/code&gt; were used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/doc/upgrade-guide/2.46/&quot;&gt;2.46.x upgrade guide&lt;/a&gt;
already urged administrators to disable Remoting mode on the server.
Those Jenkins users who rely on the CLI for remote scripting (as opposed to the HTTP(S) REST APIs)
would be affected only if they were still using the &lt;code&gt;-remoting&lt;/code&gt; CLI flag,
since the default has long been to use HTTP(S) mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most CLI features have long worked fine without &lt;code&gt;-remoting&lt;/code&gt;,
in some cases using slightly different syntax such as requiring shell redirects to access local files.
As part of this change, some CLI commands, options, and option types in Jenkins core have been removed, other than &lt;code&gt;-remoting&lt;/code&gt; itself:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;logout&lt;/code&gt; commands, and the &lt;code&gt;--username&lt;/code&gt; and &lt;code&gt;--password&lt;/code&gt; options.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;-p&lt;/code&gt; option to select a proxy. (The CLI in default &lt;code&gt;-http&lt;/code&gt; mode accesses Jenkins no differently than any other HTTP client.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;install-tool&lt;/code&gt;, &lt;code&gt;set-build-parameter&lt;/code&gt;, and &lt;code&gt;set-build-result&lt;/code&gt; commands relied on a fundamentally insecure idiom that is no longer supportable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Command options or arguments which took either a local file or &lt;code&gt;=&lt;/code&gt; for standard input/output (e.g., &lt;code&gt;install-plugin&lt;/code&gt;, &lt;code&gt;build -p&lt;/code&gt;, &lt;code&gt;support&lt;/code&gt;) now only accept the latter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some features of relatively little-used plugins will no longer work, such as:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/distfork&quot;&gt;DistFork&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/remote-terminal-access&quot;&gt;Remote Terminal Access&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/build-env-propagator&quot;&gt;Build Env Propagator&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/02/06/ssh-steps-for-jenkins-pipeline/</id>
<title>SSH Steps for Jenkins Pipeline</title>
<updated>2019-03-08T19:35:25+00:00</updated>
<published>2019-02-06T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/02/06/ssh-steps-for-jenkins-pipeline/" />
<author>
<name>nrayapati</name>
</author>
<category term="pipeline"></category>
<category term="plugins"></category>
<category term="ssh"></category>
<category term="steps"></category>
<summary>
This guest post was originally published on Cerner&#8217;s Engineering blog
here.





Pipeline-as-code or defining the deployment pipeline through code rather than manual job creation through UI, provides tremendous benefits for teams automating builds and deployment infrastructure across their environments.





Source of image: https://jenkins.io/doc/book/pipeline/


Jenkins Pipelines


Jenkins is a well-known open source continuous integration and continuous deployment automation tool. With the latest 2.0 release, Jenkins introduced the Pipeline plugin that implements Pipeline-as-code. This plugin lets you define delivery pipelines using concise scripts which deal elegantly with jobs involving persistence and asynchrony.


The Pipeline-as-code&#8217;s script is also known as a Jenkinsfile.


Jenkinsfiles uses a domain specific language syntax based...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This guest post was originally published on Cerner’s Engineering blog
&lt;a href=&quot;https://engineering.cerner.com/blog/ssh-steps-for-jenkins-pipeline/&quot;&gt;here&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Pipeline-as-code&lt;/strong&gt; or defining the deployment pipeline through code rather than manual job creation through UI, provides tremendous benefits for teams automating builds and deployment infrastructure across their environments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/pipeline/realworld-pipeline-flow.png&quot; alt=&quot;Pipeline Flow&quot; width=&quot;100%&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Source of image: &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/doc/book/pipeline/&quot;&gt;&lt;a href=&quot;https://jenkins.io/doc/book/pipeline/&quot; class=&quot;bare&quot;&gt;https://jenkins.io/doc/book/pipeline/&lt;/a&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jenkins-pipelines&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-pipelines&quot;&gt;&lt;/a&gt;Jenkins Pipelines&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt; is a well-known open source continuous integration and continuous deployment automation tool. With the latest 2.0 release, Jenkins introduced the Pipeline plugin that implements Pipeline-as-code. This plugin lets you define delivery pipelines using concise scripts which deal elegantly with jobs involving persistence and asynchrony.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Pipeline-as-code’s script is also known as a &lt;em&gt;Jenkinsfile&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkinsfiles uses a domain specific language syntax based on the &lt;a href=&quot;http://groovy-lang.org/&quot;&gt;Groovy&lt;/a&gt; programming language. They are persistent files which can be checked in and version-controlled along with the rest of their project source code. This file can contain the complete set of encoded steps (steps, nodes, and stages) necessary to define the entire application life-cycle, becoming the intersecting point between development and operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;missing-piece-of-the-puzzle&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#missing-piece-of-the-puzzle&quot;&gt;&lt;/a&gt;Missing piece of the puzzle&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the most common steps defined in a basic pipeline job is the &lt;em&gt;Deploy&lt;/em&gt; step. The deployment stage encompasses everything from publishing build artifacts to pushing code into pre-production and production environments. This deployment stage usually involves both development and operations teams logging onto various remote nodes to run commands and/or scripts to deploy code and configuration. While there are a couple of existing ssh plugins for Jenkins, they currently don’t support the functionality such as logging into nodes for pipelines. Thus, there was a need for a plugin that supports these steps.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introducing-ssh-steps&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introducing-ssh-steps&quot;&gt;&lt;/a&gt;Introducing SSH Steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-06-ssh-steps/JenkinsPlusSSH.png&quot; alt=&quot;SSH Steps&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently, our team at Cerner started working on a project to automate deployments through Jenkins pipelines to help facilitate running commands on over one thousand nodes. We looked at several options including existing plugins, internal shared Jenkins libraries, and others. In the end, we felt it was best to create and open source a plugin to fill this gap so that it can be used across Cerner and beyond.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The initial version of this new plugin SSH Steps supports the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sshCommand&lt;/code&gt;: Executes the given command on a remote node.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sshScript&lt;/code&gt;: Executes the given shell script on a remote node.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sshGet&lt;/code&gt;: Gets a file/directory from the remote node to current workspace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sshPut&lt;/code&gt;: Puts a file/directory from the current workspace to remote node.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sshRemove&lt;/code&gt;: Removes a file/directory from the remote node.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;usage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#usage&quot;&gt;&lt;/a&gt;Usage&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below is a simple demonstration on how to use above steps. More documentation can be found on &lt;a href=&quot;https://github.com/jenkinsci/ssh-steps-plugin/blob/master/README.adoc&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; remote = [:]
remote.name = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;node&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
remote.host = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;node.abc.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
remote.allowAnyHosts = &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;

node {
    withCredentials([usernamePassword(&lt;span style=&quot;color:#606&quot;&gt;credentialsId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;sshUserAcct&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;passwordVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;password&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;usernameVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;userName&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)]) {
        remote.user = userName
        remote.password = password

        stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SSH Steps Rocks!&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
            writeFile &lt;span style=&quot;color:#606&quot;&gt;file&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test.sh&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;text&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ls&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            sshCommand &lt;span style=&quot;color:#606&quot;&gt;remote&lt;/span&gt;: remote, &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;for i in {1..5}; do echo -n \&quot;Loop \$i \&quot;; date ; sleep 1; done&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            sshScript &lt;span style=&quot;color:#606&quot;&gt;remote&lt;/span&gt;: remote, &lt;span style=&quot;color:#606&quot;&gt;script&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test.sh&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            sshPut &lt;span style=&quot;color:#606&quot;&gt;remote&lt;/span&gt;: remote, &lt;span style=&quot;color:#606&quot;&gt;from&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test.sh&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;into&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            sshGet &lt;span style=&quot;color:#606&quot;&gt;remote&lt;/span&gt;: remote, &lt;span style=&quot;color:#606&quot;&gt;from&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test.sh&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;into&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test_new.sh&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;override&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;
            sshRemove &lt;span style=&quot;color:#606&quot;&gt;remote&lt;/span&gt;: remote, &lt;span style=&quot;color:#606&quot;&gt;path&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test.sh&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configuring-via-yaml&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configuring-via-yaml&quot;&gt;&lt;/a&gt;Configuring via YAML&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At Cerner, we always strive to have simple configuration files for CI/CD pipelines whenever possible. With that in mind, my team built a wrapper on top of these steps from this plugin. After some design and analysis, we came up with the following YAML structure to run commands across various remote groups:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#606&quot;&gt;config&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;credentials_id&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;sshUserAcct&lt;/span&gt;&lt;/span&gt;

&lt;span style=&quot;color:#606&quot;&gt;remote_groups&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;r_group_1&lt;/span&gt;:
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: node01&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;host&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;node01.abc.net&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: node02&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;host&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;node02.abc.net&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;r_group_2&lt;/span&gt;:
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: node03&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;host&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;node03.abc.net&lt;/span&gt;&lt;/span&gt;

&lt;span style=&quot;color:#606&quot;&gt;command_groups&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;c_group_1&lt;/span&gt;:
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;commands:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
        - 'ls -lrt'
        - 'whoami'&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;scripts:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
        - 'test.sh'&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;c_group_2&lt;/span&gt;:
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;gets:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
        - from: 'test.sh'
          to: 'test_new.sh'&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;puts:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
        - from: 'test.sh'
          to: '.'&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;removes:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
        - 'test.sh'&lt;/span&gt;&lt;/span&gt;

&lt;span style=&quot;color:#606&quot;&gt;steps&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;deploy&lt;/span&gt;:
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;remote_groups:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
        - r_group_1&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command_groups&lt;/span&gt;:
        - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;c_group_1&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;remote_groups:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
        - r_group_2&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command_groups&lt;/span&gt;:
        - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;c_group_2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above example runs commands from &lt;code&gt;c_group_1&lt;/code&gt; on remote nodes within &lt;code&gt;r_group_1&lt;/code&gt; in parallel before it moves on to the next group using &lt;code&gt;sshUserAcct&lt;/code&gt; (from the &lt;a href=&quot;https://jenkins.io/doc/book/using/using-credentials/&quot;&gt;Jenkins Credentials&lt;/a&gt; store) to logon to nodes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;shared-pipeline-library&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#shared-pipeline-library&quot;&gt;&lt;/a&gt;Shared Pipeline Library&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have created a shared pipeline library that contains a &lt;code&gt;sshDeploy&lt;/code&gt; step to support the above mentioned YAML syntax. Below is the code snippet for the sshDeploy step from the library. The full version can be found &lt;a href=&quot;https://github.com/nrayapati/ssh-deploy-library&quot;&gt;here&lt;/a&gt; on Github.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#34b&quot;&gt;#!/usr/bin/groovy&lt;/span&gt;
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;call&lt;/span&gt;(&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; yamlName) {
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; yaml = readYaml &lt;span style=&quot;color:#606&quot;&gt;file&lt;/span&gt;: yamlName
    withCredentials([usernamePassword(&lt;span style=&quot;color:#606&quot;&gt;credentialsId&lt;/span&gt;: yaml.config.credentials_id, &lt;span style=&quot;color:#606&quot;&gt;passwordVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;password&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;usernameVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;userName&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)]) {
        yaml.steps.each { stageName, step -&amp;gt;
            step.each {
                &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; remoteGroups = [:]
                &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; allRemotes = &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;[]&lt;/span&gt;
                &lt;span style=&quot;color:#950&quot;&gt;it&lt;/span&gt;.remote_groups.each {
                    remoteGroups[&lt;span style=&quot;color:#950&quot;&gt;it&lt;/span&gt;] = yaml.remotes.&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#950&quot;&gt;it&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                }

                &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; commandGroups = [:]
                &lt;span style=&quot;color:#950&quot;&gt;it&lt;/span&gt;.command_groups.each {
                    commandGroups[&lt;span style=&quot;color:#950&quot;&gt;it&lt;/span&gt;] = yaml.commands.&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#950&quot;&gt;it&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                }
                &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; isSudo = &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;
                remoteGroups.each { remoteGroupName, remotes -&amp;gt;
                    allRemotes += remotes.collect { remote -&amp;gt;
                        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt;(!remote.name)
                            remote.name = remote.host
                        remote.user = userName
                        remote.password = password
                        remote.allowAnyHosts = &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;
                        remote.groupName = remoteGroupName
                        remote
                    }
                }
                &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt;(allRemotes) {
                    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt;(allRemotes.size() &amp;gt; &lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;) {
                        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; stepsForParallel = allRemotes.collectEntries { remote -&amp;gt;
                            [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;remote.groupName&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;remote.name&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; : transformIntoStep(stageName, remote.groupName, remote, commandGroups)]
                        }
                        stage(stageName) {
                            parallel stepsForParallel
                        }
                    } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt; {
                        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; remote = allRemotes.first()
                        stage(stageName + &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + remote.groupName + &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + remote.name) {
                            transformIntoStep(stageName, remote.groupName, remote, commandGroups).call()
                        }
                    }
                }
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By using the step (as described in the snippet above) from this shared pipeline library, a Jenkinsfile can be reduced to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#007&quot;&gt;@Library&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ssh_deploy&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) _

node {
  checkout scm
  sshDeploy(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;dev/deploy.yml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An example execution of the above pipeline code in Blue Ocean looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-06-ssh-steps/jenkins-ssh-deploy.png&quot; alt=&quot;SSH Deploy BlueOcean View&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;wrapping-up&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#wrapping-up&quot;&gt;&lt;/a&gt;Wrapping up&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Steps from the &lt;a href=&quot;https://github.com/jenkinsci/ssh-steps-plugin&quot;&gt;SSH Steps Plugin&lt;/a&gt; are deliberately generic enough that they can be used for various other use-cases as well, not just for deploying code. Using SSH Steps has significantly reduced the time we spend on deployments and has given us the possibility of easily scaling our deployment workflows to various environments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Help us make this &lt;a href=&quot;https://github.com/jenkinsci/ssh-steps-plugin&quot;&gt;plugin&lt;/a&gt; better by contributing. Whether it is adding or suggesting a new feature, bug fixes, or simply improving documentation, contributions are always welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/02/05/jenkins-new-year-in-china/</id>
<title>Jenkins new year in China</title>
<updated>2019-03-08T19:35:25+00:00</updated>
<published>2019-02-05T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/02/05/jenkins-new-year-in-china/" />
<author>
<name>linuxsuren</name>
</author>
<category term="core"></category>
<category term="community"></category>
<summary>
At the time of the Spring Festival. I want to make a summary of some activities in the last year.
You might already notice that more and more Chinese contributors emerge in the Jenkins community.
We have a GSoC champion who is Shenyu Zheng.
He is a great example for other students. With the effort of three skilled engineers,
many Jenkins users could learn the edge technologies and useful use cases.
They co-organized several Jenkins Meetups in a couple of cities in China.


There are two workshops about Jenkins and Jenkins X in the DevOps International Summit. James Rawlings gave us a wonderful view of the...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the time of the Spring Festival. I want to make a summary of some activities in the last year.
You might already notice that more and more Chinese contributors emerge in the Jenkins community.
We have a GSoC champion who is &lt;a href=&quot;https://github.com/cizezsy&quot;&gt;Shenyu Zheng&lt;/a&gt;.
He is a great example for other students. With the effort of three skilled engineers,
many Jenkins users could learn the edge technologies and useful use cases.
They co-organized several Jenkins Meetups in a couple of cities in China.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two workshops about Jenkins and Jenkins X in the DevOps International Summit. &lt;a href=&quot;https://github.com/rawlingsj&quot;&gt;James Rawlings&lt;/a&gt; gave us a wonderful view of the Jenkins X. Many people start to know this project. The &lt;a href=&quot;https://jenkins-x.io/zh/&quot;&gt;Chinese website of jx&lt;/a&gt; would be helpful to those people.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On November 3rd, 2018 the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/01/09/jenkins-user-conference-china-shenzhen-update/&quot;&gt;Jenkins User Conference China(JUCC)&lt;/a&gt; was hosted in Shenzhen. More than 200 attendees gathered at JUCC to share and discuss Jenkins, DevOps, Continuous Delivery, Pipeline, and Agile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There was a Jenkins workshop to teach users to develop a plugin in October. It was during the Hacktoberfest 2018. So some people got a beautiful T-shirt at this meetup. We’ll keep this event in 2019. I hope more users and developers could join us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thank you all folks. And other friendly contributors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/logos/kongfu/256.png&quot; alt=&quot;Chinese KongFu&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Chinese is our main communication language. A large number of the Jenkins users are not a proficient English speaker.
So letting most of Chinese Jenkins users could easily use Jenkins as their CI/CD platform is the final mission of &lt;a href=&quot;https://jenkins.io/sigs/chinese-localization/&quot;&gt;Chinese Localization SIG&lt;/a&gt;.
You can find three participants on the page. But that’s not the &lt;a href=&quot;https://github.com/jenkins-infra/cn.jenkins.io/graphs/contributors&quot;&gt;full list&lt;/a&gt;.
More exciting thing is that &lt;a href=&quot;https://github.com/alauda&quot;&gt;Alauda&lt;/a&gt; giving a big support which as a startup company.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;WeChat is the greatest social media channel in China. WeChat has one billion users.
Almost everyone in China has a WeChat account. It must be a perfect place to publish articles and events.
There are over 1k people subscribed the &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg2MzAwNzU3Nw==&amp;amp;mid=2247483664&amp;amp;idx=1&amp;amp;sn=fa3fb0171d999d345105ce17f8175be7&quot;&gt;Jenkins official WeChat Subscription Account&lt;/a&gt; in the last three months.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the new year, I’m looking forward to growing up with you all!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/02/01/windows-installers/</id>
<title>Windows Installer Updates</title>
<updated>2019-03-08T19:35:25+00:00</updated>
<published>2019-02-01T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/02/01/windows-installers/" />
<author>
<name>slide_o_mix</name>
</author>
<category term="windows"></category>
<category term="platform-sig"></category>
<category term="installers"></category>
<summary>
The Windows Installer for Jenkins has been around for many years as a way for users to install a Jenkins Master on Windows as a service.
Since it&#8217;s initial development, it has not received a lot of updates or features, but that is about to change.


First, let&#8217;s take a look at the current installer experience.


Step 1




This is the default look and feel for a Windows Installer using the WiX Toolset, not very pretty and doesn&#8217;t give
much branding information as to what the installer is for.



Step 2




Again, not much branding information.



Step 3




The installer in general does not give many options for installing...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Windows Installer for Jenkins has been around for many years as a way for users to install a Jenkins Master on Windows as a service.
Since it’s initial development, it has not received a lot of updates or features, but that is about to change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let’s take a look at the current installer experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-1&quot;&gt;&lt;/a&gt;Step 1&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-01-windows-installer/old_installer_1.png&quot; alt=&quot;Installer Startup&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the default look and feel for a Windows Installer using the &lt;a href=&quot;https://wixtoolset.org&quot;&gt;WiX Toolset&lt;/a&gt;, not very pretty and doesn’t give
much branding information as to what the installer is for.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-2&quot;&gt;&lt;/a&gt;Step 2&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-01-windows-installer/old_installer_2.png&quot; alt=&quot;Installation Directory&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again, not much branding information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-3&quot;&gt;&lt;/a&gt;Step 3&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-01-windows-installer/old_installer_3.png&quot; alt=&quot;Install It&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The installer in general does not give many options for installing Jenkins, other than selecting the installation location.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#issues&quot;&gt;&lt;/a&gt;Issues&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The current installer has a few issues that the Platform SIG wanted to fix in a new install experience for users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The installer only supports 32-bit installations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The user could not select ports or user accounts to run the service on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer bundled a 32-bit version of the Java runtime instead of using a pre-existing JRE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer did not support the experimental support in Jenkins for Java 11&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The JENKINS_HOME directory was not placed in a good spot for modern Windows&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is no branding in the installer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;road-forward&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#road-forward&quot;&gt;&lt;/a&gt;Road Forward&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the experimental Jenkins Windows Installer, most of these issues have been resolved!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The installer will only support 64-bit systems going forward. This is the vast majority of Windows systems these days,
so this will help more users install Jenkins using the installer package.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The user is now able to enter user information for the service and select the port that Jenkins will use and verify that the port is available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer no longer bundles a JRE, but will search for a compatible JRE on the system. If the user wants to use a different JRE, they can specify during install.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer has support for running with a Java 11 JRE, including the components listed on the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/12/14/java11-preview-availability/&quot;&gt;Java 11 Preview Page&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the JENKINS_HOME directory is placed in the LocalAppData directory for the user that the service will run as, this aligns with modern Windows file system layouts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer has been updated with branding to make it look nicer and provide a better user experience.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;screenshots&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#screenshots&quot;&gt;&lt;/a&gt;Screenshots&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below are screenshots of the new installer sequence:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-1-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-1-2&quot;&gt;&lt;/a&gt;Step 1&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-01-windows-installer/new_installer_1.png&quot; alt=&quot;Installer Startup&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins logo is now a prominent part of the UI for the installer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-2-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-2-2&quot;&gt;&lt;/a&gt;Step 2&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-01-windows-installer/new_installer_2.png&quot; alt=&quot;Installation Directory&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins logo and name are now in the header during all phases of the installer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-3-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-3-2&quot;&gt;&lt;/a&gt;Step 3&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-01-windows-installer/new_installer_3.png&quot; alt=&quot;Account Selection&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The installer now allows you to specify the username/password for the account to run as and checks that the account has LogonAsService rights.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-4&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-4&quot;&gt;&lt;/a&gt;Step 4&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-01-windows-installer/new_installer_4.png&quot; alt=&quot;Port Selection&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The installer also allows you to specify the port that Jenkins should run on and will not continue until a valid port is entered and tested.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-5&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-5&quot;&gt;&lt;/a&gt;Step 5&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-01-windows-installer/new_installer_5.png&quot; alt=&quot;JRE Selection&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of bundling a JRE, the installer now searches for a compatible JRE on the system (JRE 8 is the current search). If you want to use a different
JRE on the system than the one found by the installer, you can browse and specify it. Only JRE 8 and JRE 11 runtimes are supported. The installer will
automatically add the necessary arguments and additional jar files for running under Java 11 if the selected JRE is found to be version 11.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-6&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-6&quot;&gt;&lt;/a&gt;Step 6&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-02-01-windows-installer/new_installer_6.png&quot; alt=&quot;Install It&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of the items that users can enter in the installer should be overridable on the command line for automated deployment as well. The full list of properties that
can be overridden will be available soon.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#next-steps&quot;&gt;&lt;/a&gt;Next Steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new installer is under review by the members of the Platform SIG, but we need people to test the installer and give feedback. If you are interested in testing
the new installer, please join the &lt;a href=&quot;https://gitter.im/jenkinsci/platform-sig&quot;&gt;Platform SIG gitter room&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are still some things that are being researched and implemented in the new installer (e.g., keeping port and other selections when doing an upgrade), but it is
getting close to release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to updates to the MSI based Windows installer, the Platform SIG is working on taking over the &lt;a href=&quot;https://chocolatey.org/packages/jenkins&quot;&gt;Chocolatey Jenkins package&lt;/a&gt; and
releasing a version for each update.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/01/21/fosdem-2019/</id>
<title>FOSDEM 2019!</title>
<updated>2019-01-24T15:45:25+00:00</updated>
<published>2019-01-21T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/01/21/fosdem-2019/" />
<author>
<name>lnewman</name>
</author>
<category term="community"></category>
<category term="events"></category>
<summary>
FOSDEM 2019 (February 2 &amp; 3) is a free event for software developers to meet, share ideas and collaborate.
It is an annual event that brings open source contributors from around the world for two days of presentations, discussions, and learning.
While the Jenkins project won&#8217;t have a table at FOSDEM 2019, we will be well represented before, during, and after the event.







Friday Day - Workshops and Jenkins Office Hours


On Friday, February 1, we&#8217;ll start off with a couple workshops:




Jenkins Pipeline Fundamentals
(9:00 AM – 5:00 PM)
Learn to create and run Declarative Pipelines!
You’ll learn the structure of Declarative Pipeline, how to control the...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://fosdem.org/2019/&quot;&gt;FOSDEM 2019&lt;/a&gt; (February 2 &amp;amp; 3) is a free event for software developers to meet, share ideas and collaborate.
It is an annual event that brings open source contributors from around the world for two days of presentations, discussions, and learning.
While the Jenkins project won’t have a table at FOSDEM 2019, we will be well represented before, during, and after the event.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-21/fosdem.png&quot; alt=&quot;FOSDEM 2019&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;friday-day-workshops-and-jenkins-office-hours&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#friday-day-workshops-and-jenkins-office-hours&quot;&gt;&lt;/a&gt;Friday Day - Workshops and Jenkins Office Hours&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Friday, February 1, we’ll start off with a couple workshops:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eventbrite.com/e/jenkins-pipeline-fundamentals-training-tickets-54626761113&quot;&gt;Jenkins Pipeline Fundamentals&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;(9:00 AM – 5:00 PM)&lt;/strong&gt;&lt;br /&gt;
Learn to create and run Declarative Pipelines!
You’ll learn the structure of Declarative Pipeline, how to control the flow of execution, how to save artifacts of the build, and get practice using some of the features that give fit and finish to your Pipeline.&lt;br /&gt;
Registration required - see the
&lt;a href=&quot;https://www.eventbrite.com/e/jenkins-pipeline-fundamentals-training-tickets-54626761113&quot;&gt;event page&lt;/a&gt;
for details&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eventbrite.com/e/workshop-continuous-deployment-with-jenkins-x-kubernetes-and-friends-tickets-54562126790&quot;&gt;Jenkins X, Kubernetes, and Friends&lt;/a&gt;&lt;br /&gt;
Two sessions: &lt;strong&gt;(9:00 AM – 12:00 PM)&lt;/strong&gt; and &lt;strong&gt;(1:00pm to 4:00pm)&lt;/strong&gt;&lt;br /&gt;
By combining the power of Jenkins, its community and the power of Kubernetes, the Jenkins X project provides a path to the future of continuous delivery for microservices and cloud-native applications.
Come explore some of the features of Jenkins X through this hands-on workshop.&lt;br /&gt;
Registration required - see the
&lt;a href=&quot;https://www.eventbrite.com/e/jenkins-pipeline-fundamentals-training-tickets-54626761113&quot;&gt;event page&lt;/a&gt;
for details&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aside from the workshops, from 9am to 5pm a bunch of people will be working out of Hilton Brussels Grand Place, hanging out as travelers come in.
It’ll be a casual, unstructured day. Sign up on this &lt;a href=&quot;https://www.meetup.com/jenkinsmeetup/events/257871603/&quot;&gt;meetup page&lt;/a&gt; to be notified what meeting room we’re in.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;friday-evening-happy-hour&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#friday-evening-happy-hour&quot;&gt;&lt;/a&gt;Friday Evening - Happy Hour&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the office hours and workshops, we’ll have a &lt;a href=&quot;https://www.meetup.com/jenkinsmeetup/events/257871603/&quot;&gt;happy hour&lt;/a&gt; Friday evening before FOSDEM at Cafe Le Roy d’Espagne.
See the &lt;a href=&quot;https://www.meetup.com/jenkinsmeetup/events/257871603&quot;&gt;meetup page&lt;/a&gt; for details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;presentations-at-fosdem&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#presentations-at-fosdem&quot;&gt;&lt;/a&gt;Presentations at FOSDEM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://fosdem.org/2019/schedule/event/community_hackers_gotta_eat/&quot;&gt;Hackers gotta eat: Building a Company Around an Open Source Project&lt;/a&gt;
by &lt;a href=&quot;https://fosdem.org/2019/schedule/speaker/kohsuke_kawaguchi/&quot;&gt;Kohsuke Kawaguchi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://fosdem.org/2019/schedule/event/hpc_lab_from_scratch/&quot;&gt;Setting up an HPC lab from scratch with Mr-Provisioner, Jenkins and Ansible&lt;/a&gt;
by &lt;a href=&quot;https://fosdem.org/2019/schedule/speaker/renato_golin/&quot;&gt;Renato Golin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://fosdem.org/2019/schedule/event/multicloud_ci_cd_openstack_kubernetes/&quot;&gt;Multicloud CI/CD with OpenStack and Kubernetes&lt;/a&gt; by &lt;a href=&quot;https://fosdem.org/2019/schedule/speaker/maxime_guyot/&quot;&gt;Maxime Guyot&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jenkins-hackfest-after-fosdem&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-hackfest-after-fosdem&quot;&gt;&lt;/a&gt;Jenkins Hackfest after FOSDEM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, a Jenkins Hackfest will be held the day after FOSDEM 2019 on Monday (February 4).
Those who would like to join us for the hackfest should register for the &lt;a href=&quot;https://www.meetup.com/jenkinsmeetup/events/257810396/&quot;&gt;meetup&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meals, snacks, and beverages will be provided for the hackfest.  Come join us, and let’s write some code!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Questions? feel free to contact
&lt;a href=&quot;mailto:alytong13@gmail.com&quot;&gt;Alyssa Tong&lt;/a&gt; or
&lt;a href=&quot;mailto:baptiste@mathus.fr&quot;&gt;Baptiste Mathus&lt;/a&gt; or join us on the
&lt;a href=&quot;https://gitter.im/jenkinsci/advocacy-and-outreach-sig&quot;&gt;advocacy-and-outreach gitter channel&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/01/09/jenkins-user-conference-china-shenzhen-update/</id>
<title>Jenkins User Conference China - Shenzhen Update</title>
<updated>2019-01-17T08:44:15+00:00</updated>
<published>2019-01-09T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/01/09/jenkins-user-conference-china-shenzhen-update/" />
<author>
<name>ijyun</name>
</author>
<category term="jenkins"></category>
<category term="jenkinsuserconference"></category>
<summary>
On November 3rd, 2018 the Jenkins User Conference China (JUCC) met Jenkins users in Shenzhen which is the most burgeoning city in China.
It was the first time to hold JUCC in Shenzhen.
We held JUCC along with DevOps International Summit, which is the biggest DevOps event in China.
More than 200 attendees gathered at JUCC Shenzhen to share and discuss Jenkins, DevOps, Continuous Delivery, Pipeline, and Agile.


Below, I am sharing pictures and some of the topics discussed at the event:







Yu Gu from Accenture presented New challenges for DevOps in Cloud Native.







Peng Wang from Meituan which is the biggest group-buying website in China...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On November 3rd, 2018 the Jenkins User Conference China (JUCC) met Jenkins users in Shenzhen which is the most burgeoning city in China.
It was the first time to hold JUCC in Shenzhen.
We held JUCC along with DevOps International Summit, which is the biggest DevOps event in China.
More than 200 attendees gathered at JUCC Shenzhen to share and discuss Jenkins, DevOps, Continuous Delivery, Pipeline, and Agile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below, I am sharing pictures and some of the topics discussed at the event:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-09-jucc-images/image1.jpg&quot; alt=&quot;image1&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yu Gu from Accenture presented &lt;strong&gt;New challenges for DevOps in Cloud Native&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-09-jucc-images/image2.jpg&quot; alt=&quot;image2&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Peng Wang from Meituan which is the biggest group-buying website in China much like Groupon presented
&lt;strong&gt;The continuous delivery toolchains based on Jenkins for ten thousand times build per day&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-09-jucc-images/image3.jpg&quot; alt=&quot;image3&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Guangming Zhou from Ctrip who is a Jenkins expert in China presented &lt;strong&gt;CD system in Ctrip&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-09-jucc-images/image4.jpg&quot; alt=&quot;image4&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jiaqi Guo Jiaqi Guo from Kingston presented &lt;strong&gt;DevOps practices in large manufacturing industry&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-09-jucc-images/image5.jpg&quot; alt=&quot;image5&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yaxing Li from Tencent presented &lt;strong&gt;How to support the CI CD requirements for thousands of products in Tencent based on Jenkins&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-09-jucc-images/image6.jpg&quot; alt=&quot;image6&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mei Xiao from ZTE presented &lt;strong&gt;Fast integration practice for Android&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-09-jucc-images/image7.jpg&quot; alt=&quot;image7&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;John Willis presented &lt;strong&gt;Next Generation Infrastructure which included Kubernetes and  Istio practices&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-09-jucc-images/image8.png&quot; alt=&quot;image8&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;BC Shi from JD.com who is also a Jenkins Ambassador and the co-organizer of JUCC presented &lt;strong&gt;Pipeline 3.0  for DevOps toolchains&lt;/strong&gt;.
He introduced the practices based on Jenkins and Jenkins X to build an end to end pipeline for DevOps from requirement to online service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-09-jucc-images/image9.png&quot; alt=&quot;image9&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ve also released a DevOps tool map to recommend an excellent tool to the community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-09-jucc-images/image10.jpg&quot; alt=&quot;image10&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lastly, myself, Forest Jing co-organizer of JUCC and also am a Jenkins Ambassador interacted with the attendees.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-09-jucc-images/image11.png&quot; alt=&quot;image11&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also organized the Jenkins workshop and Open space for the attendees.
Ruddy Li ,Yunhua Li , Yu Gu and Dingan Liang have worked together to run an open space to lead the attendees to discuss problems they met in DevOps and CD.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-09-jucc-images/image12.png&quot; alt=&quot;image12&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Huaqiang Li who is a Certified Jenkins Engineer and CCJE has led the attendees to practice Jenkins functions for a whole afternoon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are more photos from our event, it was a fantastic JUCC in Shenzhen.
There were so much interest and appetite to learn about Jenkins and DevOps.
We are looking forward to doing this again next year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-09-jucc-images/image13.png&quot; alt=&quot;image13&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Slides from the event can be downloaded at &lt;a href=&quot;https://pan.baidu.com/share/init?surl=dE6tlaEZ9t7KhOg6Xn63sw&quot;&gt;PPT Download Address&lt;/a&gt;, password: &lt;code&gt;sepe&lt;/code&gt; (the website is in Chinese).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thank you to Alyssa and Maxwell’s help to organize this event.
Jenkins User Conference China continues and we hope to see many of you next year in China for our next JUCC.
Let’s be Kung fu Jenkins!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/01/08/mpl-modular-pipeline-library/</id>
<title>MPL - Modular Pipeline Library</title>
<updated>2019-03-08T19:35:25+00:00</updated>
<published>2019-01-08T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/01/08/mpl-modular-pipeline-library/" />
<author>
<name>sparshev</name>
</author>
<category term="jenkinsfile"></category>
<category term="pipeline"></category>
<category term="sharedlibrary"></category>
<summary>
This is a guest post by Sergei Parshev from Grid Dynamics, originally posted on the
Grid Dynamics Blog.





Despite speeding up development with deployment automation, one of our clients
was experiencing slow time-to-market due to a lack of collaboration in DevOps.
While they had invested in DevOps, every production pipeline was set up
individually, forcing teams to remake the wheel for each project. Making matters
worse, there was no cross-team collaboration, so any bug in the platform was
present in each new pipeline. Many of our clients have similar issues, so we
decided that we should develop a common tool which would both help current
clients, and be adaptable...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by Sergei Parshev from &lt;a href=&quot;https://www.griddynamics.com/&quot;&gt;Grid Dynamics&lt;/a&gt;, originally posted on the
&lt;a href=&quot;https://blog.griddynamics.com/developing-a-modular-pipeline-library-to-improve-devops-collaboration/&quot;&gt;Grid Dynamics Blog&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Despite speeding up development with deployment automation, one of our clients
was experiencing slow time-to-market due to a lack of collaboration in DevOps.
While they had invested in DevOps, every production pipeline was set up
individually, forcing teams to remake the wheel for each project. Making matters
worse, there was no cross-team collaboration, so any bug in the platform was
present in each new pipeline. Many of our clients have similar issues, so we
decided that we should develop a common tool which would both help current
clients, and be adaptable for use in the future. While the most obvious option
was standardizing the CI/CD platform with a common framework, this led to a
monolithic structure, which was inflexible and ultimately unworkable. Since each
team needed to work on their own pipelines, we developed a solution that would
store each reusable part of the DevOps pipeline for later use: a Jenkins-powered
modular pipeline library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;solution-a-modular-pipeline-library&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#solution-a-modular-pipeline-library&quot;&gt;&lt;/a&gt;Solution: a modular pipeline library&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The modular pipeline library (&lt;a href=&quot;https://github.com/griddynamics/mpl&quot;&gt;MPL&lt;/a&gt;) we
created is a highly-flexible shared library for a Jenkins Pipeline that enables
easy sharing of best practices across the entire company. It has a clear modular
structure, an advanced testing framework, multi-level nesting, a pipeline
configuration system, improved error handling, and many other useful components.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will take a look under the hood and explain how our solution works in several
parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Explore the technologies and tools we used to build the MPL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Review the MPL, and illustrate why it’s effective&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow a step-by-step guide to operate the MPL on a sample pipeline&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dive into some of the more important components of the solution, such as the test framework and nested libraries&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So now let’s jump right into an explanation of the crucial features we used to
build our solution.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;building-the-mpl-with-shared-libraries-and-jenkins-pipelines&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#building-the-mpl-with-shared-libraries-and-jenkins-pipelines&quot;&gt;&lt;/a&gt;Building the MPL with shared libraries and Jenkins pipelines&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins, our main automation platform, recently received some updates to
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/doc/book/pipeline/#overview&quot;&gt;Jenkins Pipeline&lt;/a&gt;. These updates allow us to
create one &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/doc/pipeline/tour/hello-world/&quot;&gt;Jenkinsfile&lt;/a&gt; that
describes the entire pipeline, and the steps that need to be executed with a
series of self-explanatory scripts. This increases the visibility of CI/CD
automation processes for end users, and improves supportability by DevOps teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, there’s a large issue with Pipeline: it’s hard to support multiple
Jenkinsfiles (and therefore multiple projects) with unique pipelines. We need to
store the common logic somewhere, which is where
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/doc/book/pipeline/shared-libraries/#extending-with-shared-libraries&quot;&gt;Jenkins Shared Libraries&lt;/a&gt;
come in. They are included in the Jenkinsfile, and allow the use of prepared
interfaces to simplify automation and store common pieces.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While shared libraries allow you to store logic and manipulate Jenkins, they
don’t provide a good way to utilize all the common information. Therefore, the
MPL optimizes the pipeline and shared libraries by allowing users to create
easy-to-follow descriptions for processes, which are then stored for later use
by other teams.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-mpl-works-to-create-collaborative-devops-processes-across-teams&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-mpl-works-to-create-collaborative-devops-processes-across-teams&quot;&gt;&lt;/a&gt;The MPL works to create collaborative DevOps processes across teams&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the MPL, we are now able to collaborate and share our DevOps practices
across teams, easily adopt existing pipelines for specific projects, and debug
and test features before we actually integrate them into the library. Each team
can create a nested library, add a number of pipelines and modules inside, and
use it with pipeline automation to create great visibility of the processes for
the end user. The MPL can also work on any project to prepare a Jenkinsfile, and
manage it as flexibly as the project team wants.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At its core, the MPL provides a simple way to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Separate pipelines and steps by introducing modules&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Describe steps in the modules with an easy configuration interface&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test the described modules and share the results with other pipelines and projects&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are a lot of other features in the MPL, but it’s essentially a platform to
solve general DevOps collaboration issues. To simplify development and manual
testing, the MPL provides modules overriding and an inheritance model, allowing
users to test specific fixes in the project without affecting anything else. In
Jenkins, a module is a file with scripted steps and logic to reach a simple goal
(build an artifact, run tests, create an image, etc.). These modules are
combined in the pipeline stages, and are easily readable for anyone who knows
the Jenkins Pipeline syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MPL allows users to use the core features of the library (structure,
modules, pipelines) and create nested libraries for specific DevOps team needs.
A DevOps team can prepare complete pipelines with any custom logic and use it
for their projects. They can also override and inherit the core MPL modules in a
number of ways, or prepare custom modules which are easy to share with other
teams. Check out the infographic below to see how modules fit in:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-08-mpl/fig01-layers-of-the-mpl.png&quot; alt=&quot;Fig 1. Layers of the MPL&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also specify certain pipeline required poststeps in a module. For
example, a dynamic deployment module creates the test environment, which needs
to be destroyed when the pipeline ends. To take a closer look at the MPL calling
process, check out the infographic below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-08-mpl/fig02-the-mpl-process.png&quot; alt=&quot;Fig 2. The MPL process&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This infographic shows how calls are executed in the MPL. First, you need a job
on your Jenkins, which will call a Jenkinsfile (for example, when the source
code is changed), after which the Jenkinsfile will call a pipeline. The pipeline
could be described on the MPL side, in the pipeline script in the job, in the
nested library, or in the project Jenkinsfile. Finally, the stages of the
pipeline will call the modules, and these modules will use features, which could
be groovy logic, pipeline steps, or steps in the shared libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we’ve done an overview of the solution, let’s take a look at a simple
pipeline execution to see how the MPL works in action.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;an-example-of-a-pipeline-execution-in-the-mpl&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#an-example-of-a-pipeline-execution-in-the-mpl&quot;&gt;&lt;/a&gt;An example of a pipeline execution in the MPL&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, let’s say you have a common Java Maven project. You are creating a
Jenkinsfile in the repo, and want to use the default pipeline prepared by your
DevOps team. The MPL already has a simple pipeline: the core &lt;code&gt;MPLPipeline&lt;/code&gt;. It’s
a really simple pipeline, but it’s a good start for anyone who wants to try the
MPL. Let’s look at a simple Jenkinsfile:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#007&quot;&gt;@Library&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mpl&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) _
MPLPipeline {}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This Jenkinsfile contains a single line to load the MPL, and another line to run
the pipeline. Most of the shared libraries implement an interface like this,
calling one step and providing some parameters. &lt;code&gt;MPLPipeline&lt;/code&gt; is merely a custom
Pipeline step, as it lies in the &lt;code&gt;vars&lt;/code&gt; directory, and its structure is very
simple, following these steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initialize the MPL&lt;/strong&gt;&lt;br /&gt;
The MPL uses the &lt;code&gt;MPLManager&lt;/code&gt; singleton object to control the pipeline&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Merge configuration with default and store it&lt;/strong&gt;&lt;br /&gt;
A default configuration needed to specify stages and predefine some useful configs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Define a declarative pipeline with 4 stages and poststeps:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Checkout - Getting the project sources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build - Compiling, validation of static, unit tests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy - Uploading artifacts to the dynamic environment and running the app&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test - Checking integration with other components&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Poststeps - Cleaning dynamic environment, sending notifications, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Running the defined pipeline&lt;/strong&gt;&lt;br /&gt;
This is where the MPL starts to work its magic and actually runs&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stages of the main MPL usually have just one step, the &lt;a href=&quot;https://github.com/griddynamics/mpl/blob/master/vars/MPLModule.groovy#L29&quot;&gt;&lt;code&gt;MPLModule&lt;/code&gt;&lt;/a&gt;.
This step contains the core functionality of the MPL: executing the modules
which contain the pipeline logic. You can find default modules in the MPL
repository, which are placed in &lt;a href=&quot;https://github.com/griddynamics/mpl/tree/master/resources/com/griddynamics/devops/mpl/modules&quot;&gt;resources/com/griddynamics/devops/mpl/modules&lt;/a&gt;.
Some of the folders include: Checkout, Build, Deploy, and Test, and in each of
them we can find Groovy files with the actual logic for the stages. This
infographic is a good example of a simplified &lt;a href=&quot;https://github.com/griddynamics/mpl/&quot;&gt;MPL repository&lt;/a&gt;
structure:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-08-mpl/fig03-a-simplified-mpl-repository-structure.png&quot; alt=&quot;Fig 3. A simplified MPL repository structure&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the Checkout stage starts, &lt;code&gt;MPLModule&lt;/code&gt; loads the module by name (by default
a stage name), and runs the &lt;a href=&quot;https://github.com/griddynamics/mpl/blob/master/resources/com/griddynamics/devops/mpl/modules/Checkout/Checkout.groovy&quot;&gt;Checkout/Checkout.groovy&lt;/a&gt;
logic:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt;( CFG.&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;git.url&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; )
  MPLModule(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Git Checkout&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, CFG)
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt;
  MPLModule(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Default Checkout&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, CFG)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the configuration contains the &lt;code&gt;git.url&lt;/code&gt; option, it will load a &lt;code&gt;Git Checkout&lt;/code&gt;
module; otherwise, it will run the &lt;code&gt;Default Checkout&lt;/code&gt; module. All the called
modules use the same configuration as the parent module, which is why CFG was
passed to the &lt;code&gt;MPLModule&lt;/code&gt; call. In this case, we have no specific configuration,
so it will run the
&lt;a href=&quot;https://github.com/griddynamics/mpl/blob/master/resources/com/griddynamics/devops/mpl/modules/Checkout/DefaultCheckout.groovy&quot;&gt;Checkout/DefaultCheckout.groovy&lt;/a&gt;
logic. The space in the name is a separator to place the module into a specific
folder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;code&gt;Default Checkout&lt;/code&gt; module, there is just one line with &lt;code&gt;checkout scm&lt;/code&gt;
execution, which clones the repository specified in the Jenkins job. That’s all
the Checkout stage does, as the MPL functionality is excessive for such a small
stage, and we only need to talk about it here to show how the MPL works in
modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same process applies to the Build stage, as the pipeline runs the
&lt;a href=&quot;https://github.com/griddynamics/mpl/blob/master/resources/com/griddynamics/devops/mpl/modules/Build/MavenBuild.groovy&quot;&gt;Maven Build&lt;/a&gt;
module:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;withEnv([&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PATH+MAVEN=&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;tool(CFG.&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;maven.tool_version&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; ?: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Maven 3&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/bin&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;]) {
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; settings = CFG.&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;maven.settings_path&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; ? &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;-s '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;CFG.&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;maven.settings_path&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mvn -B &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;settings&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; -DargLine='-Xmx1024m -XX:MaxPermSize=1024m' clean install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This stage is a little bit more complicated, but the action is simple: we take
the tool with the default name &lt;code&gt;Maven 3&lt;/code&gt;, and use it to run &lt;code&gt;mvn clean install&lt;/code&gt;.
The modules are scripted pipelines, so you can do the same steps usually
available in the Jenkins Pipeline. The files don’t need any specific and
complicated syntax, just a plain file with steps and &lt;code&gt;CFG&lt;/code&gt; as a predefined
variable with a stage configuration. The MPL modules inherited the sandbox from
the parent, so your scripts will be safe and survive the Jenkins restart, just
like a plain Jenkins pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Deploy folder, we find the sample structure of the &lt;code&gt;Openshift Deploy&lt;/code&gt;
module. Its main purpose here is to show how to use poststep definitions in the
modules:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;MPLPostStep(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;always&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;OpenShift Deploy Decommission poststep&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}
echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Executing Openshift Deploy process&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, we define the &lt;code&gt;always&lt;/code&gt; poststep. It is stored in the &lt;code&gt;MPLManager&lt;/code&gt;, and is
called when poststeps are executed. We can call &lt;code&gt;MPLPostStep&lt;/code&gt; with &lt;code&gt;always&lt;/code&gt; as
many times as we want: all the poststeps will be stored and executed in FILO
order. Therefore, we can store poststep logic for actions that need to be done,
and then undone, in the same module, such as the decommission of the dynamic
environment. This ensures that the actions will be executed when the pipeline
is complete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the deploy stage, the pipeline executes the Test stage, but nothing too
interesting happens there. However, there is an aspect of testing which is very
important, and that’s the testing framework of the MPL itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;testing-of-the-mpl&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#testing-of-the-mpl&quot;&gt;&lt;/a&gt;Testing of the MPL&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The testing framework of the MPL is based on the
&lt;a href=&quot;https://github.com/jenkinsci/JenkinsPipelineUnit&quot;&gt;JenkinsPipelineUnit&lt;/a&gt;
from LesFurets, with the one small difference being its ability to test the MPL
modules. Testing the whole pipeline doesn’t work, as pipelines can be really
complicated, and writing tests for such monsters is a Sisyphean task. It is much
easier to test a black box with a small amount of steps, ensuring that this
particular task is working correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the MPL, you can find &lt;code&gt;Build&lt;/code&gt; module testing examples: all the tests are
stored in the
&lt;a href=&quot;https://github.com/griddynamics/mpl/tree/master/test/groovy/com/griddynamics/devops/mpl/modules&quot;&gt;test/groovy/com/griddynamics/devops/mpl/modules&lt;/a&gt;
directory, and you can find the
&lt;a href=&quot;https://github.com/griddynamics/mpl/blob/master/test/groovy/com/griddynamics/devops/mpl/modules/Build/BuildTest.groovy&quot;&gt;Build/BuildTest.groovy&lt;/a&gt;
file with a number of test cases there. Tests are executed during the MPL build
process, allowing users to see traces like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;Loading shared library mpl with version snapshot
  MPLModule.call(Build, {maven={tool_version=Maven 2}})
    Build.run()
      Build.MPLModule(Maven Build, {maven.tool_version=Maven 2})
        MavenBuild.run()
          MavenBuild.tool(Maven 2)
          MavenBuild.withEnv([PATH+MAVEN=Maven 2_HOME/bin], groovy.lang.Closure)
            MavenBuild.sh(mvn -B  -DargLine='-Xmx1024m -XX:MaxPermSize=1024m' clean install)
      Build.fileExists(openshift)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The test runs the &lt;code&gt;MPLModule&lt;/code&gt; with custom configuration and mocked steps to
check that, during execution, the tool was changed to &lt;code&gt;Maven 2&lt;/code&gt; according to the
provided configuration. We cover all test cases with such tests, ensuring that
the modules are working as expected, and that the pipeline will work properly.
You can test the whole pipeline if you want, but testing by modules is just an
additional way to simplify the testing process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we’ve looked at how to test the MPL modules, it’s time to look at one
of the key features of the MPL, which is nested libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-benefits-of-nested-libraries&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-benefits-of-nested-libraries&quot;&gt;&lt;/a&gt;The benefits of nested libraries&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When working with a large company, supporting one big library makes no sense.
Each department requires multiple configuration options and tuning for a
somewhat standard pipeline, which creates extra work. The MPL solves such
problems by introducing nested libraries. This infographic displays how a nested
library compares to just using the main library:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-08-mpl/fig04-ways-to-use-the-mpl.png&quot; alt=&quot;Fig 4. Ways to use the MPL&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A nested library is the same as a shared library that imports the MPL and uses
its functionality, modules, and pipelines. Also, it allows the separation of
some team-related logic from the company common logic. Here is the structure of
the MPL with nested libraries:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-08-mpl/fig05-example-of-a-companys-libraries-tree-structure.png&quot; alt=&quot;Fig 5. Example of company’s libraries tree structure&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can import the MPL in the overridden pipeline, specify the path of some
additional modules, override module logic, and use Jenkins power moves: there
are no limitations. When another team needs your unique module, you can just
create a change request to the basic company MPL repo, and share your functional
module with the others.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With nested libraries, it’s possible to debug and modify MPL-provided steps
(&lt;code&gt;MPLModule&lt;/code&gt; for example) and pipelines. This is because nested libraries can
override low-level functionalities of the MPL or the Jenkins Pipeline. There are
no limitations to what you can or can’t change, as these overrides only affect
your own pipeline. This enables experimentation to be done, and then discussed
with other teams to see if it will work in other nested libraries as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are also no limits to the number of nesting levels created, but we
recommend using just two (MPL and nested), because additional levels make
configuration and testing of the nested libraries on lower levels very
complicated.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-power-of-module-overriding&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-power-of-module-overriding&quot;&gt;&lt;/a&gt;The power of module overriding&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further into the nested libraries or project-side modules, it’s possible to
store a module with the same name as one in the upper-level library. This is a
good way to override the logic - you can just replace Build/Build.groovy with
your own - as the functional module will be executed instead of the upper-level
module. For example, this infographic shows module overriding:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-08-mpl/fig06-mpl-modules-overriding.png&quot; alt=&quot;Fig 6. MPL modules overriding&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even better, one of the strengths of the MPL is that you still can use the
upper-level module! The MPL has mechanisms to prevent loops, so the same module
can’t be executed in the same executing branch again. However, you can easily
call the original module a name from another module to use the upper-level
logic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-08-mpl/fig07-petclinic-selenium-example-pipeline-structure.png&quot; alt=&quot;Fig 7. Petclinic-Selenium example pipeline structure&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Petclinic-Selenium example above uses the default &lt;code&gt;MPLPipeline&lt;/code&gt; (you can
find it on the &lt;a href=&quot;https://github.com/griddynamics/mpl/wiki&quot;&gt;MPL Wiki-page&lt;/a&gt;), and
contains project-side modules in a &lt;code&gt;.jenkins&lt;/code&gt; directory. These modules will be
called before the library modules. For example, the &lt;code&gt;Checkout&lt;/code&gt; module is not
placed on the project side, so it will be called from the MPL, but the &lt;code&gt;Build&lt;/code&gt;
module exists in a &lt;code&gt;.jenkins&lt;/code&gt; directory on the project side, and it will be
called:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;MPLPostStep(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;always&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  junit &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;target/surefire-reports/*.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
}

MPLModule(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, CFG)

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt;( fileExists(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Dockerfile&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) ) {
  MPLModule(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Docker Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, CFG)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the &lt;code&gt;Build&lt;/code&gt; module from the project registers the poststep,
calls the original &lt;code&gt;Build&lt;/code&gt; module from the MPL, and then calls the additional
&lt;code&gt;Docker Build&lt;/code&gt; module. The following stages of the pipeline are more
complicated, but all module overriding essentially works like this. Some
projects can be tricky, and need some small tunings for the existing modules.
However, you can easily implement those changes on the project level, and think
about how to move the functionality to the nested library or MPL later.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion-what-the-mpl-brings-to-devops&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion-what-the-mpl-brings-to-devops&quot;&gt;&lt;/a&gt;Conclusion: what the MPL brings to DevOps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many DevOps teams and companies work with bloated, restrictive, and buggy CI/CD
automation platforms. These increase the learning curve for users, cause teams
to work slower, and raise production costs. DevOps teams frequently run into
similar issues on different projects, but a lack of collaboration means that
they have to be individually fixed each time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, with the MPL, DevOps teams have a shared, simple, and flexible CI/CD
platform to improve user support, collaboration, and overall project source code
to the production process. By utilizing the MPL, your company can find an
automation consensus, reach cross-company collaboration goals, and reuse the
best practices from a large community, all with open source tools. If you’re
interested in building an MPL, please contact us to learn more!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;additional-resources&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#additional-resources&quot;&gt;&lt;/a&gt;Additional resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/doc/book/pipeline/#overview&quot;&gt;Jenkins Pipeline Engine&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/doc/book/pipeline/shared-libraries/#extending-with-shared-libraries&quot;&gt;Jenkins Shared Libraries&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/griddynamics/mpl&quot;&gt;MPL GitHub repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overview &amp;amp; demo videos:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/NpnQS3fFlyI&quot;&gt;Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/wwi7oREL02k&quot;&gt;Overview&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/QZsQThhPk-Y&quot;&gt;Demo of the MPL Build&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/UsThHFze76Y&quot;&gt;Demo of the Nested Library&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/GLtvxY1S3Aw&quot;&gt;Demo of the Petclinic Pipeline&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/01/07/webhook-firewalls/</id>
<title>Triggering builds with webhooks behind a secure firewall</title>
<updated>2019-01-17T08:44:15+00:00</updated>
<published>2019-01-07T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2019/01/07/webhook-firewalls/" />
<author>
<name>michaelneale</name>
</author>
<category term="jenkins"></category>
<category term="webhooks"></category>
<category term="security"></category>
<summary>
In this post I wanted to show how you can run Jenkins behind a firewall (which could be a corporate firewall, a NAT’ed network like you have at home) but still receive webhooks in real time from GitHub.com. You can generalise this to other services too - such as BitBucket or DockerHub, or anything really that emits webhooks, but the instructions will be for GitHub projects hosted on github.com.


What are webhooks

Just a very quick refresher on what webhooks are: Messages (often JSON, but not always) typically posted by HTTP(S) from a server to a client that is listening for events.





The...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post I wanted to show how you can run Jenkins behind a firewall (which could be a corporate firewall, a NAT’ed network like you have at home) but still receive webhooks in real time from GitHub.com. You can generalise this to other services too - such as BitBucket or DockerHub, or anything really that emits webhooks, but the instructions will be for GitHub projects hosted on github.com.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what-are-webhooks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-are-webhooks&quot;&gt;&lt;/a&gt;What are webhooks&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just a very quick refresher on what webhooks are: Messages (often JSON, but not always) typically posted by HTTP(S) from a server to a client that is listening for events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-07-webhook-firewalls/webhooks.png&quot; alt=&quot;webhook diagram&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The events flow left to right, Jenkins sits there happily listing on paths like &lt;code&gt;/github-webhook/&lt;/code&gt; or &lt;code&gt;/dockerhub-webhook/&lt;/code&gt; etc for some HTTP request to tell it to wake up and do some work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GitHub/BitBucket may be reporting a new commit or PR, or DockerHub reporting an upstream image has changed. What all these things have in common is that they push to Jenkins, and expect to be able to push to it (ie that Jenkins is visible to them). This works great when the network is open - say GitHub Enterprise, or Jenkins is listening on the web.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;not-on-the-web&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#not-on-the-web&quot;&gt;&lt;/a&gt;Not on the web&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The trick is when something gets in the middle, say a firewall:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-07-webhook-firewalls/firewalls.png&quot; alt=&quot;firewall diagram&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(&lt;em&gt;As is industry standard, all firewalls have to be a wall on fire. Please don’t somehow set bricks on fire in your organisation&lt;/em&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is just the same when you fire up Jenkins on your laptop, and want to receive webhooks from github.com (a legitimate thing, perhaps to test out your setup, perhaps to run builds for iOS on a mac, or some corner of a network that is not exposed to the web). Unless your laptop is addressable to the whole web that is (not likely), or your network is configured just right, the webhooks won’t be able to flow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is fine - we can fall back to polling for changes. Except this is terrible. You burn through API quotas, and you don’t get changes in real time, and really no one is happy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;some-problems-are-opportunities&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#some-problems-are-opportunities&quot;&gt;&lt;/a&gt;Some problems are opportunities&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can both solve this problem, but also, view this is an opportunity. Having things not addressable on the web, or locked down in some default way is a feature, not a bug. You massively reduce your attack surface, and can have defence in depth:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-07-webhook-firewalls/exposed.png&quot; alt=&quot;exposed on web&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;a-webhook-forwarding-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-webhook-forwarding-service&quot;&gt;&lt;/a&gt;A Webhook forwarding service&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enter the memorably named &lt;a href=&quot;https://smee.io/&quot;&gt;Smee&lt;/a&gt;. This is an &lt;a href=&quot;https://github.com/probot/smee&quot;&gt;OSS project&lt;/a&gt; provided by GitHub and also helpfully hosted as a service by GitHub. This can capture and forward webhooks for you. I’ll try to explain it with a diagram:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-07-webhook-firewalls/forwarding.png&quot; alt=&quot;forwarding&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GitHub pushes an event (via HTTPS/json in this case) to Smee.io (the funny thing with circles, which is on the public web and accessible from GitHub.com) - and Jenkins in turn subscribes to Smee with an outgoing connection from a client. Note the direction of the arrows: Jenkins only makes an outbound connection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the important point: this will work as long as the firewall is one way (like a NAT typically is, and many networks). If the Jenkins side can’t connect to anything on the outside world - well, this won’t help with that of course (but that is not often the case).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;setting-it-up&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#setting-it-up&quot;&gt;&lt;/a&gt;Setting it up&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Step 1: Firstly - go to &lt;a href=&quot;https://smee.io/&quot; class=&quot;bare&quot;&gt;https://smee.io/&lt;/a&gt; and click “Start a new channel”:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-07-webhook-firewalls/smee.png&quot; alt=&quot;smee website&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will give you a unique URL (which you should copy for later use):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-07-webhook-firewalls/config1.png&quot; alt=&quot;smee config&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next you should install the smee client next to where you have the Jenkins server running:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;npm install --global smee-client&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(This will make the smee client/command available to receive and forward webhooks).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now start the smee client and point it to your Jenkins server. In this case I have it running on port 8080 (the default if you fire it up on your laptop, change both the port and the smee URL as needed):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;smee --url &lt;a href=&quot;https://smee.io/GSm1B40sRfBvSjYS&quot; class=&quot;bare&quot;&gt;https://smee.io/GSm1B40sRfBvSjYS&lt;/a&gt; --path /github-webhook/ --port 8080&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This says to connect to the smee service, and forward webhooks to /github-webhook/ (that trailing slash is important, don’t miss it). Once this is running, you will see it log that it is connected and forwarding webhooks. Leave this command running for as long as you want to receive webhooks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, you need to configure a pipeline that makes use of github. In this case I set up one from scratch. You can skip this if you already have a pipeline setup:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-07-webhook-firewalls/newpipeline.png&quot; alt=&quot;new pipeline&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I then chose “GitHub” as the where the code is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-07-webhook-firewalls/choice.png&quot; alt=&quot;choose github&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then choose your repository. This will set things up ready to receive webhooks from GitHub. (also if you have an existing pipeline setup, and it is using GitHub as the SCM source, that is also fine).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The final step is to tell GitHub to post webhook events for that repository (or organization, you can do that too) to Smee (which ultimately means Jenkins will receive them).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to the settings tab for your GitHub repository, and then click “add webhook”:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-07-webhook-firewalls/addwebhook.png&quot; alt=&quot;add webhook&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, configure the webhook:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Paste in the “smee” URL you copied from the step above.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose &lt;code&gt;application/json&lt;/code&gt; as the content type&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tell it to &lt;code&gt;send everything&lt;/code&gt; (you can pick and choose what events, but I just did that as simpler).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press Add Webhook (or update)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should look something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-07-webhook-firewalls/config2.png&quot; alt=&quot;config webhook&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OK - webhooks should be flowing now. You can make a change to your repository, and check that a build starts soon after:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2019-01-07-webhook-firewalls/running.png&quot; alt=&quot;running pipeline&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Good luck!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/12/26/gsoc-2019-call-for-mentors/</id>
<title>Google Summer of Code 2019. Call for Project ideas and Mentors</title>
<updated>2019-01-17T08:44:15+00:00</updated>
<published>2018-12-26T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/12/26/gsoc-2019-call-for-mentors/" />
<author>
<name>martinda</name>
</author>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<category term="community"></category>
<category term="events"></category>
<category term="developer"></category>
<summary>
Google Summer of Code
is as program where students are paid a stipend by Google to work on a free open source project like Jenkins,
at full-time for four months (May to August).
Mentors get actively involved with students starting at the end of February when students start to apply
(see the timeline).








We are looking for mentors and project ideas to participate in the 15th edition of the Google Summer of Code program!
We have until February 6th, 2019 at 8pm UTC to submit the application on behalf the Jenkins Organization, but obviously,
we want to be ready before that.


The first step in the process is...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;a href=&quot;https://developers.google.com/open-source/gsoc/&quot;&gt;Google Summer of Code&lt;/a&gt;
is as program where students are paid a stipend by Google to work on a free open source project like Jenkins,
at full-time for four months (May to August).
Mentors get actively involved with students starting at the end of February when students start to apply
(see the &lt;a href=&quot;https://developers.google.com/open-source/gsoc/timeline&quot;&gt;timeline&lt;/a&gt;).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/gsoc/jenkins-gsoc-logo_small.png&quot; alt=&quot;Jenkins GSoC&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are looking for mentors and project ideas to participate in the 15th edition of the Google Summer of Code program!
We have until February 6th, 2019 at 8pm UTC to submit the application on behalf the Jenkins Organization, but obviously,
we want to be ready before that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step in the process is to have mentors and project ideas.
Then we will apply to Google.
We need Google to accept Jenkins' application to the program itself.
And for this to happen, &lt;strong&gt;we need project proposals and mentors&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We currently have a &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/gsoc/2019/project-ideas&quot;&gt;list of project idea proposals&lt;/a&gt;,
and we are looking for new project proposals, mentors, technical advisers, and subject matter experts.
GSoC projects may be about anything around code: new features, plugins, test frameworks, infrastructure, etc., etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Making a project idea proposal is easy, you can read the instructions &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/gsoc/proposing-project-ideas&quot;&gt;here&lt;/a&gt;.
Quick start:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Copy the &lt;a href=&quot;https://docs.google.com/document/d/1l5SdcLnlCwWA6qH8FKT9XC714Dl1XJ9lyy1CKDdKKAU&quot;&gt;project proposal template&lt;/a&gt;,
add a short description of your project idea&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the document for public view and comments, reference communication channels there (if any)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let us know about the project idea via &lt;a href=&quot;https://gitter.im/jenkinsci/gsoc-sig&quot;&gt;our gitter channel&lt;/a&gt; or the
&lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkinsci-gsoc-all-public&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After getting initial feedback from org admins, share your idea with other contributors who might be interested
(via the &lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkinsci-dev&quot;&gt;developer mailing list&lt;/a&gt;, &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/chat&quot;&gt;chats&lt;/a&gt;, or &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs&quot;&gt;special interest groups&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Potential mentors are invited to read the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/gsoc/mentors&quot;&gt;information for mentors&lt;/a&gt; for more information about the project.
Note that being a GSoC mentor does not require expert knowledge of Jenkins.
GSoC org admins will help to find technical advisors, so you can study together with your students.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mentoring takes about 5 to 6 hours of work per week (more at the start, less at the end).
In return, a student works on your project full time for four months.
Think about the projects that you’ve always wanted to do but could not find the time…​
There are also many opportunities to engage with the Jenkins community (meetups, knowledge sharing, communications) and with other projects (e.g. &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/11/13/martinda-gsoc-mentor-summit-experience/&quot;&gt;going to the GSoC Mentor Summit&lt;/a&gt;).
GSoC is a pretty good return on the investment!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For any question, you can find the GSoC admins,
mentors and participants on the &lt;a href=&quot;https://gitter.im/jenkinsci/gsoc-sig&quot;&gt;GSoC SIG Gitter chat&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins GSoC Org Admin Team 2019&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/12/25/year-in-review/</id>
<title>2018 in Review: A year of innovation</title>
<updated>2019-01-17T08:44:15+00:00</updated>
<published>2018-12-25T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/12/25/year-in-review/" />
<author>
<name>kohsuke</name>
</author>
<category term="core"></category>
<category term="community"></category>
<summary>
The end of a year is a great time to step back from the daily grind to look at the big picture.





Across the industry, the relentless march toward more automation still continues on. We are writing software faster than ever, but the demand for software seems to be going up even more, and I feel more and more businesses and executives are keenly aware that software and developers are king. At the ground level, every team I meet sees the software delivery automation to be a critical part of their "software factory," and it&#8217;s important for them to create and...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The end of a year is a great time to step back from the daily grind to look at the big picture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-12-25-year-in-review/2018-256.jpg&quot; alt=&quot;Year in review&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Across the industry, the relentless march toward more automation still continues on. We are writing software faster than ever, but the demand for software seems to be going up even more, and I feel more and more businesses and executives are keenly aware that &lt;a href=&quot;https://www.ciodive.com/news/software-is-king-and-developers-are-in-high-demand/519272/&quot;&gt;software and developers are king&lt;/a&gt;. At the ground level, every team I meet sees the software delivery automation to be a critical part of their &quot;software factory,&quot; and it’s important for them to create and manage them with unhinged flexibility and visibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins continues to play a major role in making this possible, after 14+ years since its birth, and if anything &lt;a href=&quot;http://stats.jenkins.io/jenkins-stats/svg/total-jenkins.svg&quot;&gt;the pace of growth seems to be accelerating&lt;/a&gt;. In this dog year industry, that’s truly remarkable. Being a part of this achievement truly makes me proud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Building Jenkins, being a tool that everyone uses, comes with a great responsibility. So within the Jenkins community, we’ve been hard at work. In fact, &lt;strong&gt;2018 has been the single most innovative year in the history of the whole project&lt;/strong&gt; across the field, at multiple levels.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As we got bigger, we needed better ways to drive initiatives that cut across multiple people. This thinking led to &lt;a href=&quot;https://github.com/jenkinsci/jep/&quot;&gt;JEPs&lt;/a&gt; and &lt;a href=&quot;https://jenkins.io/sigs/&quot;&gt;SIGs&lt;/a&gt;, and 2018 saw these formats getting great traction. After a year of operating them, I think we’ve learnt a lot, and I hope we will continue to improve them based on the learning.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;These new formats gave rise to new collaborations. For example, &lt;a href=&quot;https://jenkins.io/sigs/chinese-localization/&quot;&gt;Chinese Localization SIG&lt;/a&gt; resulted in &lt;a href=&quot;https://jenkins.io/sigs/chinese-localization/#wechat&quot;&gt;our WeChat presence&lt;/a&gt; and &lt;a href=&quot;https://jenkins.io/zh/&quot;&gt;localized website&lt;/a&gt;. &lt;a href=&quot;https://jenkins.io/sigs/platform/&quot;&gt;Platform SIG&lt;/a&gt; was instrumental in &lt;a href=&quot;https://jenkins.io/blog/2018/12/14/java11-preview-availability/&quot;&gt;Java 11 support&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I’m also very happy to see new batch of leaders. In fear of missing out some people, I’m not going to list them individually, but we celebrated many of them as &lt;a href=&quot;https://flic.kr/p/2asPXx1&quot;&gt;Jenkins Ambassadors&lt;/a&gt; this fall (and please &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Jenkins+Ambassador&quot;&gt;nominate more&lt;/a&gt; for the next year!) Those people who lead key efforts are often people who are new to those roles.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some of the new leaders led other efforts that unlock new contributors. It’s about consciously thinking which segment of our potential contributors we aren’t tapping today and understanding why. Something any business does all the time. Ours resulted in &lt;a href=&quot;https://jenkins.io/blog/2018/10/14/gsoc2018-results/&quot;&gt;Google Summer of Code&lt;/a&gt; and &lt;a href=&quot;https://jenkins.io/blog/2018/12/10/outreachy-audit-log-plugin/&quot;&gt;Outreachy&lt;/a&gt; participations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our security process and the pace of fixes have gone up considerably this year again, reflecting our stepping up to the trust our users gave to us. For example, this year &lt;a href=&quot;https://jenkins.io/blog/2018/10/09/telemetry/&quot;&gt;we rolled out a telemetry system&lt;/a&gt; that informs us to develop better fixes more quickly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, where these community improvements ultimately matter is what impact we are creating to software that you use. On that front, I think we did great in 2018, resulting in what I call &lt;a href=&quot;https://www.youtube.com/watch?v=qE3tfS7k1VI&quot;&gt;&quot;5 super powers&quot;&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins-x.io/&quot;&gt;Jenkins X&lt;/a&gt; is probably the most visible innovation of this year, making it much easier to create modern cloud applications on Kubernetes. This also represents &lt;a href=&quot;https://jenkins.io/blog/2018/03/20/evolving-mission-of-jenkins/&quot;&gt;the significant expansion of the Jenkins community and its mission&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/projects/jcasc/&quot;&gt;Jenkins Configuration as Code&lt;/a&gt; hit a major milestone &quot;1.0&quot; this year, and it’s continuing to gain more momentum and traction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&quot;Cloud Native Jenkins&quot; is the term I gave to &lt;a href=&quot;https://jenkins.io/blog/2018/08/31/shifting-gears/&quot;&gt;a new effort that I’m calling to transform Jenkins&lt;/a&gt; into general purpose CI/CD engine that runs at scale on Kubernetes. There’s still much to be defined here, but you can already see some great things like &lt;a href=&quot;https://medium.com/@jdrawlings/serverless-jenkins-with-jenkins-x-9134cbfe6870&quot;&gt;Serverless Jenkins&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/projects/evergreen/&quot;&gt;Evergreen&lt;/a&gt; is another young and upcoming project that has ambitious thesis --- drastically simplifying the adoption and operation of Jenkins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pipeline effort formed &lt;a href=&quot;https://jenkins.io/sigs/pipeline-authoring/&quot;&gt;a new SIG&lt;/a&gt; and I’m looking forward to the impact this will drive in 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The not-so-secret sauce of the Jenkins community that threads together all these improvements from user visible changes to the community improvements is our ability to evolve. As I look forward to 2019, no doubt these things I mentioned will evolve, morph, merge, and split as we continue to learn and adopt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So please, follow &lt;a href=&quot;https://twitter.com/jenkinsci&quot;&gt;@jenkinsci&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/jenkinsxio&quot;&gt;@jenkinsxio&lt;/a&gt; on Twitter to get updates on how we will evolve, and join our community to together build the software that rocks the world. How many open-source projects can say that?&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/12/14/java11-preview-availability/</id>
<title>Java 11 Support Preview is available in Jenkins 2.155+</title>
<updated>2019-03-08T19:35:25+00:00</updated>
<published>2018-12-14T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/12/14/java11-preview-availability/" />
<author>
<name>oleg_nenashev</name>
</author>
<category term="core"></category>
<category term="developer"></category>
<category term="java11"></category>
<category term="community"></category>
<category term="platform-sig"></category>
<summary>
Please refer to Running Jenkins on Java 11 documentation to have the up-to-date details on how to run Jenkins on Java 11.












This is a joint blogpost prepared by the Java 11 Support Team.
On Dec 18 (4PM UTC) we will be also presenting the Java 11 Preview Support at the Jenkins Online Meetup
(link)








Jenkins, one of the leading open-source automation servers, still supports only Java 8.
On September 25 OpenJDK 11 was released.
This is a Long-Term-Support which will stay around for years,
and in the Jenkins project we are interested to offer a full support of this version.
Over the last year many contributors have...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please refer to &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/doc/administration/requirements/jenkins-on-java-11&quot;&gt;Running Jenkins on Java 11&lt;/a&gt; documentation to have the up-to-date details on how to run Jenkins on Java 11.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a joint blogpost prepared by the &lt;a href=&quot;https://github.com/orgs/jenkinsci/teams/java11-support&quot;&gt;Java 11 Support Team&lt;/a&gt;.
On Dec 18 (4PM UTC) we will be also presenting the Java 11 Preview Support at the Jenkins Online Meetup
(&lt;a href=&quot;https://www.meetup.com/Jenkins-online-meetup/events/257008190/&quot;&gt;link&lt;/a&gt;)
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/logos/formal/256.png&quot; alt=&quot;Jenkins Java&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins, one of the leading open-source automation servers, still supports only Java 8.
On September 25 OpenJDK 11 was released.
This is a Long-Term-Support which will stay around for years,
and in the Jenkins project we are interested to offer a full support of this version.
Over the last year many contributors have been working towards enabling support for Java 11 in the project (Jenkins JEP-211).
It was a thorny path,
but now, on behalf of the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs/platform&quot;&gt;Jenkins Platform SIG&lt;/a&gt;,
we are happy to announce preview availability of Java 11 support in Jenkins weekly releases!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Why do we need preview availability for Java 11?
It offers Jenkins contributors and early adopters a way
to try out the changes before the general availability release happens early next year.
It should help us to get more exploratory testing and, hopefully,
resolve most of the issues before Java 11 is officially supported in Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post we will describe how to run with Java 11,
and how to investigate compatibility issues and report them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;background&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#background&quot;&gt;&lt;/a&gt;Background&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you probably remember,
in June 2018 we had an &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/06/08/jenkins-java10-hackathon/&quot;&gt;online hackathon&lt;/a&gt; targeting Java 10+ support in Jenkins.
As a part of the hackathon,
we provided the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/06/17/running-jenkins-with-java10-11/&quot;&gt;experimental support of Java 11&lt;/a&gt;.
This event was a big success for us,
and we were able to get Jenkins running with Java 10 and 11-ea,
including major features like Jenkins Pipeline, JobDSL, Docker/Kubernetes plugins, Configuration as Code, BlueOcean, etc.
It gave us confidence that we can provide Java 11 support in Jenkins without major breaking changes.
After the hackathon, &lt;a href=&quot;https://github.com/oleg-nenashev/&quot;&gt;Oleg Nenashev&lt;/a&gt; created
&lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/211/README.adoc&quot;&gt;JEP-211: Java 10+ support in Jenkins&lt;/a&gt; (was later adjusted to target Java 11 only).
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs/platform&quot;&gt;Platform Special Interest Group&lt;/a&gt;
has been also founded to coordinate the Java 11 support work
and other platform support efforts (packaging, operating system support, etc.).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A group of contributors continued working on Java 11 support,
mostly focusing on upstreaming functional patches,
enabling Java 11 support in development tools,
testing and addressing known compatibility issues.
See the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs/platform/#meetings&quot;&gt;Platform SIG meeting notes&lt;/a&gt; for detailed status updates.
Starting from Jenkins 2.148, Jenkins successfully runs with latest OpenJDK 11 releases on various Linux and Windows platforms.
We performed a LOT of automated and exploratory tests, Jenkins plugins appear to work well with some exceptions (see below).
There is ongoing test automation effort towards the GA releases,
but we were able to successfully run Jenkins core tests,
full &lt;a href=&quot;https://github.com/jenkinsci/acceptance-test-harness/&quot;&gt;Acceptance Test Harness&lt;/a&gt;,
and &lt;a href=&quot;https://github.com/jenkinsci/plugin-compat-tester&quot;&gt;Plugin Compat Tester&lt;/a&gt; for recommended plugins.
We also deployed a temporary
&lt;a href=&quot;https://github.com/jenkinsci/jep/tree/master/jep/211#temporary-experimental-update-center-for-java-11&quot;&gt;Experimental Update Center for Java 11&lt;/a&gt;
which allows quickly delivering fixes for Java 11 early adopters.
Jenkins 2.155+ defaults to this update center when running with Java 11,
and that’s why we announce preview availability for this version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Nov 19, 2018 we presented the current Java 11 support status at the Platform SIG meeting
&lt;a href=&quot;https://docs.google.com/presentation/d/1lw4unaFhsQk7a8HzhxhgTK4X2X2ocv_W_VW7aoH2WkM/edit?usp=sharing&quot;&gt;slides&lt;/a&gt;,
and we agreed that we would like to proceed with the preview availability so that
we can offer something for evaluation to Jenkins users.
By the next meeting on Dec 04, all blockers have been addressed,
and the Platform SIG meeting signed off the Java 11 preview availability.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;running-jenkins-and-java-11-in-docker&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#running-jenkins-and-java-11-in-docker&quot;&gt;&lt;/a&gt;Running Jenkins and Java 11 in Docker&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting from Jenkins 2.155, we provide Docker images for the Jenkins master and agent.
All these images are based on the official
&lt;a href=&quot;https://hub.docker.com/r/_/openjdk/&quot;&gt;openjdk:11-jdk&lt;/a&gt; image maintained by the Docker Community.
There were discussions about migrating to other base images,
but we decided to exclude it from the Preview Availability scope.
Similarly, we do not provide Alpine images for now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;jenkins-master-image&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-master-image&quot;&gt;&lt;/a&gt;Jenkins master image&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java 11 support is now provided as a part of the official
&lt;a href=&quot;https://hub.docker.com/r/jenkins/jenkins/&quot;&gt;jenkins/jenkins&lt;/a&gt; image.
You can run the Jenkins with Java 11 simply as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:jdk11&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following tags are available:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jdk11&lt;/code&gt; - Latest weekly release with Java 11 support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;2.155-jdk11&lt;/code&gt; - Weekly releases packaged with Java 11&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The image is fully compatible with
&lt;a href=&quot;https://github.com/jenkinsci/docker/blob/master/README.md&quot;&gt;jenkins/jenkins documentation&lt;/a&gt;,
e.g. you can use &lt;code&gt;plugins.txt&lt;/code&gt; to install plugins, mount volumes and pass extra options via environment variables.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;agent-images&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#agent-images&quot;&gt;&lt;/a&gt;Agent images&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you use containerized agents via Docker or Kubernetes plugins,
we have also released official Docker images for Jenkins agents:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/jenkins/slave/&quot;&gt;jenkins/slave&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/jenkins/jnlp-slave/&quot;&gt;jenkins/jnlp-slave&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/jenkins/ssh-slave/&quot;&gt;jenkins/ssh-slave&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All images use the &lt;code&gt;latest-jdk11&lt;/code&gt; image tag for JDK11 bundles.
And sorry for the obsolete names!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;experimental-jenkins-master-images&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#experimental-jenkins-master-images&quot;&gt;&lt;/a&gt;Experimental Jenkins master images&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to simplify testing, we also provide some experimental images on DockerHub.
We set up a continuous delivery flow for them,
so you can get patches without waiting for Jenkins weekly releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/jenkins4eval/blueocean-platform-support/&quot;&gt;jenkins4eval/blueocean-platform-support&lt;/a&gt; -
Equivalent of &lt;a href=&quot;https://hub.docker.com/r/jenkinsci/blueocean/&quot;&gt;jenkinsci/blueocean&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tag: &lt;code&gt;latest-jdk11&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The image bundles all Jenkins Pipeline and Blue Ocean patches required to run on Java 11&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to try Pipeline, use this image&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/jenkins/jenkins-experimental/&quot;&gt;jenkins/jenkins-experimental&lt;/a&gt; -
Equivalent of &lt;a href=&quot;https://hub.docker.com/r/jenkins/jenkins/&quot;&gt;jenkins/jenkins&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tag: &lt;code&gt;latest-jdk11&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The image is released from the &lt;code&gt;java11-support&lt;/code&gt; feature branch in the Jenkins core&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The branch may be slightly ahead or behind the &lt;code&gt;master&lt;/code&gt; branch,
we may use the branch to quickly deliver patches to Java 11 users&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eventually we will move the experimental flow to the new &lt;code&gt;jenkins4eval&lt;/code&gt; organization
being created as a part of &lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/217/README.adoc&quot;&gt;JEP-217&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;running-jenkins-war-with-java-11&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#running-jenkins-war-with-java-11&quot;&gt;&lt;/a&gt;Running jenkins.war with Java 11&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Running without Docker is not that trivial,
because Jenkins depends on some modules which have been removed from Java 11.
We plan to address it in the General Availability release somehow (see &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-52186&quot;&gt;JENKINS-52186&lt;/a&gt;),
but for now some manual actions are required to run Jenkins WAR with Java 11.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Download Jenkins WAR for 2.155&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the following libraries to the same directory as jenkins.war&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://central.maven.org/maven2/javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.jar&quot;&gt;jaxb-api-2.3.0.jar&lt;/a&gt; (save as jaxb-api.jar)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://central.maven.org/maven2/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-core-2.3.0.1.jar&quot;&gt;jaxb-core-2.3.0.1.jar&lt;/a&gt; (save as jaxb-core.jar)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://central.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-impl-2.3.0.1.jar&quot;&gt;jaxb-impl-2.3.0.1.jar&lt;/a&gt; (save as jaxb-impl.jar)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/javaee/activation/releases/download/JAF-1_2_0/javax.activation.jar&quot;&gt;javax.activation v.1.2.0&lt;/a&gt;  (save as javax.activation.jar)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the following command:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;Run Jenkins with ${JAVA11_HOME}/bin/java \
    -p jaxb-api.jar:javax.activation.jar --add-modules java.xml.bind,java.activation \
    -cp jaxb-core.jar:jaxb-impl.jar \
    -jar jenkins.war --enable-future-java --httpPort=8080 --prefix=/jenkins&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;known-compatibility-issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#known-compatibility-issues&quot;&gt;&lt;/a&gt;Known compatibility issues&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To help users to track down the compatibility issues,
we have created a new &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Known+Java+11+Compatibility+issues&quot;&gt;Known Java 11 Compatibility Issues&lt;/a&gt; Wiki page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Several important issues and obstacles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/workflow-support&quot;&gt;Pipeline: Support Plugin&lt;/a&gt; has a known issue
with context persistency when running with Java 11 (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-51998&quot;&gt;JENKINS-51998&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We have deployed a temporary fix to the
&lt;a href=&quot;https://github.com/jenkinsci/jep/tree/master/jep/211#temporary-experimental-update-center-for-java-11&quot;&gt;Experimental Update Center for Java 11&lt;/a&gt;.
 Fix version: &lt;code&gt;3.0-java11-alpha-1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you use Jenkins Pipeline, make sure you run with this fix.
Otherwise the jobs will fail almost immediately&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When updating instances to Java 11, make sure there is no running Pipelines&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-54305&quot;&gt;JENKINS-54305&lt;/a&gt; -
&lt;a href=&quot;jdk-tool&quot;&gt;JDK Tool Plugin&lt;/a&gt; does not offer installers for JDK 11&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-52282&quot;&gt;JENKINS-52282&lt;/a&gt; -
Java Web Start is no longer available in Java 11, so it is no longer possible to start agents from Web UI.
We do not plan to provide a replacement.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also know about some minor incompatibilities in other plugins,
but we do not consider them as blockers for preview availability.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reporting-compatibility-issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#reporting-compatibility-issues&quot;&gt;&lt;/a&gt;Reporting compatibility issues&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you discover any Java 11 incompatibilities, please
&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/How+to+report+an+issue&quot;&gt;report issues in our bugtracker&lt;/a&gt;.
Please set &lt;code&gt;java11-compatibility&lt;/code&gt; labels for such issues
so that they automatically appear on the Wiki page and get triaged.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the security issues please use the standard
&lt;a href=&quot;https://jenkins.io/security/#reporting-vulnerabilities&quot;&gt;vulnerability reporting process&lt;/a&gt;.
Although we will be fixing Java 11 specific issues in public while it is in the preview,
following the security process will help us to investigate impact on Java 8 users.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;java-11-support-team&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#java-11-support-team&quot;&gt;&lt;/a&gt;Java 11 Support Team&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once Java 11 support is released, we expect reports of regressions in plugins and Jenkins core.
One of the concerns are exotic platforms with native libraries, and of course other Java versions.
There is also a risk of 3rd-party library incompatibilities with Java 11.
To mitigate the risks, we have created a
&lt;a href=&quot;https://github.com/orgs/jenkinsci/teams/java11-support&quot;&gt;Java 11 Support Team&lt;/a&gt;.
This team will be focusing on triaging the incoming issues,
helping to review pull requests and, in some cases, delivering the fixes.
The process for this team is &lt;a href=&quot;https://github.com/jenkinsci/jep/tree/master/jep/211#post-release-support&quot;&gt;documented&lt;/a&gt; in JEP-211.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We do not expect the &lt;em&gt;Java 11 Support Team&lt;/em&gt; to be able to fix all discovered issues,
and we will be working with Jenkins core and plugin maintainers to get the fixes delivered.
If you are interested to join the team,
reach out to us in the &lt;a href=&quot;https://gitter.im/jenkinsci/platform-sig&quot;&gt;Platform SIG Gitter Channel&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;contributing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributing&quot;&gt;&lt;/a&gt;Contributing&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will appreciate any kind of contributions in the Java 11 effort,
including trying out Jenkins with Java 11, reporting and fixing compatibility issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you want to do the exploratory testing,
we recommend to try out Java 11 support at one of your test instances.
Such testing will be much appreciated,
especially if you use some service integration plugins or exotic platforms.
The issue reporting guidelines are provided &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/12/14/java11-preview-availability/#reporting-compatibility-issues&quot;&gt;above&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are a plugin developer/maintainer,
we would appreciate if you could test your plugin with Java 11.
In order to help with that, we have created a Wiki page with
&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Java+11+Developer+Guidelines&quot;&gt;Java 11 Developer guidelines&lt;/a&gt;.
This page explains how to build and test plugins with Java 11,
and it also lists known issues in development tools&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whatever you do, please let us know about your experience by sending a message to
the &lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkins-platform-sig&quot;&gt;Platform SIG mailing list&lt;/a&gt;.
Such information will help us a lot to track changes and contributions.
Any other feedback about the migration complexity will be appreciated!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;whats-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-next&quot;&gt;&lt;/a&gt;What’s next?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Dec 18 (4PM UTC) we will be presenting the Java 11 Preview Support at the Jenkins Online Meetup
(&lt;a href=&quot;https://www.meetup.com/Jenkins-online-meetup/events/257008190/&quot;&gt;link&lt;/a&gt;).
At this meetup we will summarize the current Java 11 Preview support status.
If you are a plugin developer, we will also organize separate sessions about testing plugins with Java 11 and about common best practices for fixing compatibility issues.
Please follow the Platform SIG announcements if you are interested.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the next weeks we will focus on addressing feedback from early adopters and
fixing the discovered compatibility issues.
We will also continue working on Java 11 support patches towards the general availability next year (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-51805&quot;&gt;JENKINS-51805&lt;/a&gt;).
In addition to that, we will start working on Java 11 support in subprojects,
including &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/jenkins-x/&quot;&gt;Jenkins X&lt;/a&gt; and &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/evergreen/&quot;&gt;Jenkins Evergreen&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/jep/tree/master/jep/211&quot;&gt;JEP-211: Java 11 support in Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/doc/administration/requirements/java/&quot;&gt;Java requirements in Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Known+Java+11+Compatibility+issues&quot;&gt;Known Java 11 Compatibility Issues&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Java+11+Developer+Guidelines&quot;&gt;Java 11 Developer guidelines&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs/platform/&quot;&gt;Platform Special Interest Group&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/12/10/kubecon-is-here/</id>
<title>KubeCon + CloudNativeCon North America 2018 is Here!</title>
<updated>2018-12-14T20:58:24+00:00</updated>
<published>2018-12-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/12/10/kubecon-is-here/" />
<author>
<name>lnewman</name>
</author>
<category term="cloud-native"></category>
<category term="kubernetes"></category>
<category term="kubecon"></category>
<summary>
The time has come - KubeCon + CloudNativeCon North America 2018 has arrived.
The conference has completely sold out and the schedule is jam packed with interesting talks.


If you&#8217;re among those with tickets, here are a couple Jenkins related events that might interest you:




On Wednesday at 3:40pm, Carlos Sanchez will be presenting
Jenkins X: Continuous Delivery for Kubernetes in
Tahoma 3/4 @ TCC.


On Tuesday at 2:35pm, Jonathan Hess &amp; Loren Trout from
SAP will discuss how
Migrating Jenkins to Kubernetes Broke Our Brains in Room 606-609.




I look forward to seeing you there!...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;https://events.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2018&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-12-kubecon-na/logo.svg&quot; alt=&quot;KubeCon + CloudNativeCon North America 2018&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The time has come - KubeCon + CloudNativeCon North America 2018 has arrived.
The conference has completely sold out and the schedule is jam packed with interesting talks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re among those with tickets, here are a couple Jenkins related events that might interest you:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On Wednesday at 3:40pm, Carlos Sanchez will be presenting
&lt;a href=&quot;https://kccna18.sched.com/event/GrT2&quot;&gt;Jenkins X: Continuous Delivery for Kubernetes&lt;/a&gt; in
&lt;a href=&quot;https://kccna18.sched.com/venue/Tahoma+3%2F4+%40+TCC&quot;&gt;Tahoma 3/4 @ TCC&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On Tuesday at 2:35pm, Jonathan Hess &amp;amp; Loren Trout from
&lt;a href=&quot;https://www.sap.com&quot;&gt;SAP&lt;/a&gt; will discuss how
&lt;a href=&quot;https://kccna18.sched.com/event/GrSh&quot;&gt;Migrating Jenkins to Kubernetes Broke Our Brains&lt;/a&gt; in Room 606-609.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I look forward to seeing you there!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/12/10/the-official-Docker-image/</id>
<title>Official Jenkins image to use from Docker Hub</title>
<updated>2018-12-11T00:14:55+00:00</updated>
<published>2018-12-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/12/10/the-official-Docker-image/" />
<author>
<name>batmat</name>
</author>
<category term="docker"></category>
<summary>
There are now three different Docker Hub repositories that are or have been used as the "official" Jenkins image.
This article aims at providing a clarification about which one is the current official one (as of December 2018 :-)).


The official one



docker pull jenkins/jenkins



i.e. https://hub.docker.com/r/jenkins/jenkins/ is the right repository to use.


I also documented some time ago on my blog the recommended way to run Jenkins using the official Docker image.




The deprecated ones



jenkins

Deprecated since a long time already.
A short version of why we stopped using and updating this image is that we never had a way to get our images published without having...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are now three different Docker Hub repositories that are or have been used as the &quot;official&quot; Jenkins image.
This article aims at providing a clarification about which one is the current official one (as of December 2018 :-)).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-official-one&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-official-one&quot;&gt;&lt;/a&gt;The official one&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;docker pull jenkins/jenkins&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;i.e. &lt;a href=&quot;https://hub.docker.com/r/jenkins/jenkins/&quot; class=&quot;bare&quot;&gt;https://hub.docker.com/r/jenkins/jenkins/&lt;/a&gt; is the right repository to use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I also documented some time ago on my blog the &lt;a href=&quot;https://batmat.net/2018/09/07/how-to-run-and-upgrade-jenkins-using-the-official-docker-image/&quot;&gt;recommended way to run Jenkins using the official Docker image&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-deprecated-ones&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-deprecated-ones&quot;&gt;&lt;/a&gt;The deprecated ones&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;a href=&quot;https://hub.docker.com/_/jenkins/&quot;&gt;&lt;code&gt;jenkins&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Deprecated since a long time already.
A short version of why we stopped using and updating this image is that we never had a way to get our images published without having each time to go through a manual process.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;a href=&quot;https://hub.docker.com/r/jenkinsci/jenkins&quot;&gt;&lt;code&gt;jenkinsci/jenkins&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Deprecated since a long time too, but for easing transition, we had kept updating both &lt;code&gt;jenkins/jenkins&lt;/code&gt; (the right one) and &lt;code&gt;jenkinsci/jenkins&lt;/code&gt; together.
We stopped updating &lt;code&gt;jenkinsci/jenkins&lt;/code&gt; in early December 2018 (cf. &lt;a href=&quot;https://issues.jenkins-ci.org/browse/INFRA-1934&quot;&gt;INFRA-1934&lt;/a&gt; for details if you are interested)&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/12/10/outreachy-audit-log-plugin/</id>
<title>Outreachy internships to add audit logging support to Jenkins</title>
<updated>2018-12-11T00:14:55+00:00</updated>
<published>2018-12-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/12/10/outreachy-audit-log-plugin/" />
<author>
<name>jvz</name>
</author>
<category term="community"></category>
<category term="outreachy"></category>
<category term="outreachy2018"></category>
<summary>
This year marks the first time the Jenkins project is participating in Outreachy.
Outreachy is a program similar to Google Summer of Code (GSoC) where interns work on open source projects for a paid stipend.
The key difference is that Outreachy reaches out to underrepresented groups and those who face systemic bias or discrimination in the technology industry in their home country.
Once I learned about this program, I immediately volunteered to mentor as the concept strongly aligns with my ideals of inclusiveness and community building.
I&#8217;m happy to report that both the Jenkins project,  and my employer [CloudBees](https://www.cloudbees.com), have been very supportive...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year marks the first time the Jenkins project is participating in &lt;a href=&quot;https://www.outreachy.org/&quot;&gt;Outreachy&lt;/a&gt;.
Outreachy is a program similar to Google Summer of Code (GSoC) where interns work on open source projects for a paid stipend.
The key difference is that Outreachy reaches out to underrepresented groups and those who face systemic bias or discrimination in the technology industry in their home country.
Once I learned about this program, I immediately volunteered to mentor as the concept strongly aligns with my ideals of inclusiveness and community building.
I’m happy to report that both the Jenkins project,  and my employer [CloudBees](&lt;a href=&quot;https://www.cloudbees.com&quot; class=&quot;bare&quot;&gt;https://www.cloudbees.com&lt;/a&gt;), have been very supportive of this program.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Expanding on our previous efforts to mentor students in GSoC, this year we’ve joined up with Outreachy to mentor two interns.
Our interns for this season of Outreachy,  &lt;a href=&quot;https://github.com/Lathaguna&quot;&gt;Latha Gunasekar&lt;/a&gt; and &lt;a href=&quot;https://github.com/davidolorundare&quot;&gt;David Olorundare&lt;/a&gt;, will be working with me on &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin&quot;&gt;audit logging support for Jenkins&lt;/a&gt;.
I am excited to welcome both David and Latha, and am looking forward to what they will learn about both professional software engineering and contributing to an open source community.
Stay tuned for blog post entries introducing both people in the near future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The audit logging support project forms a new connection between Jenkins and &lt;a href=&quot;https://logging.apache.org/log4j/2.x/&quot;&gt;Apache Log4j&lt;/a&gt; which offers great opportunities for our interns to learn more about open source governance and meet new people.
As a bonus, the project aims to provide the tooling necessary to support advanced observability concerns such as running anomaly detection on authentication events to detect potential intrusion attempts.
We will also be authoring a &lt;a href=&quot;https://github.com/jenkinsci/jep&quot;&gt;JEP&lt;/a&gt; to detail the audit logging API provided by the plugin and how other plugins can define and log their own audit events besides the Jenkins Core ones that come with the plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’m looking forward to the great work we’ll be doing together, and I hope that we’ll be able to welcome more Outreachy interns in the future!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/12/05/security-updates/</id>
<title>Important security updates for Jenkins</title>
<updated>2018-12-11T00:14:55+00:00</updated>
<published>2018-12-05T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/12/05/security-updates/" />
<author>
<name>daniel-beck</name>
</author>
<category term="core"></category>
<category term="security"></category>
<summary>
We just released security updates to Jenkins, versions 2.154 and LTS 2.150.1, that fix multiple security vulnerabilities.
Since 2.150.1 is the first release in the new LTS line, we also released 2.138.4, a security update for the previous LTS line.
This allows administrators to install today&#8217;s security fixes without having to upgrade to the new LTS line immediately.


For an overview of what was fixed, see the security advisory.
For an overview on the possible impact of these changes, see our LTS 2.138.4 upgrade guide.


A note on previously released changes related to this fix

In the Jenkins core security updates released in August and October,...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We just released security updates to Jenkins, versions 2.154 and LTS 2.150.1, that fix multiple security vulnerabilities.
Since 2.150.1 is the first release in the new LTS line, we also released 2.138.4, a security update for the previous LTS line.
This allows administrators to install today’s security fixes without having to upgrade to the new LTS line immediately.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For an overview of what was fixed, see the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/security/advisory/2018-12-05&quot;&gt;security advisory&lt;/a&gt;.
For an overview on the possible impact of these changes, see our &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/doc/upgrade-guide/2.138/#upgrading-to-jenkins-lts-2-138-4&quot;&gt;LTS 2.138.4 upgrade guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;a-note-on-previously-released-changes-related-to-this-fix&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-note-on-previously-released-changes-related-to-this-fix&quot;&gt;&lt;/a&gt;A note on previously released changes related to this fix&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Jenkins core security updates released in August and October, we also included security improvements that can be disabled by setting various system properties.
Those changes are an essential part of the SECURITY-595 fix, so we strongly recommend not disabling them for any reason.
Previously published documentation has been updated.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/11/13/martinda-gsoc-mentor-summit-experience/</id>
<title>Google Summer of Code Mentor Summit 2018</title>
<updated>2018-11-15T17:25:01+00:00</updated>
<published>2018-11-13T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/11/13/martinda-gsoc-mentor-summit-experience/" />
<author>
<name>martinda</name>
</author>
<category term="community"></category>
<category term="events"></category>
<category term="gsoc"></category>
<category term="gsoc2018"></category>
<summary>
This year, the Jenkins organization participated in the Google Summer of Code Mentor Summit
at the Google office in Sunnyvale on Oct 12, 13 and 14, 2018.
The GSoC Mentor Summit is where mentors of all organizations participating in the GSoC program are invited each year
to learn and network with mentors from other organization, and make GSoC a better program.
This is the second time Jenkins mentors have participated in the summit, the first time was in 2016.


Exceptionally, three Jenkins GSoC mentors were invited to the summit this year.
Normally only two mentors are invited, but when there are cancellations, Google draws a name...
</summary>
<content type="html">
&lt;div class=&quot;imageblock right center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/gsoc/jenkins-gsoc-logo_small.png&quot; alt=&quot;Jenkins GSoC&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year, the Jenkins organization participated in the Google Summer of Code Mentor Summit
at the Google office in Sunnyvale on Oct 12, 13 and 14, 2018.
The GSoC Mentor Summit is where mentors of all organizations participating in the GSoC program are invited each year
to learn and network with mentors from other organization, and make GSoC a better program.
This is the second time Jenkins mentors have participated in the summit, the first time was in 2016.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Exceptionally, three Jenkins GSoC mentors were invited to the summit this year.
Normally only two mentors are invited, but when there are cancellations, Google draws a name at random from the waiting list,
and the Jenkins organization was lucky enough and sent an extra mentor this year!
The mentors participating this year were Oleg Nenashev, Jeff Pearce and Martin d’Anjou.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is worth mentioning that the Mentor Summit is not a typical conference where you go
sit and listen at what speakers have to say, quite the contrary. The Mentor Summit is an unconference
where participants are invited to fill empty time slots with their own topic of discussion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;friday-oct-12&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#friday-oct-12&quot;&gt;&lt;/a&gt;Friday Oct 12&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;pre-conference-meeting&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pre-conference-meeting&quot;&gt;&lt;/a&gt;Pre-conference meeting&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The mentors had a short pre-conference meeting to reflect on the Jenkins participation in the 2018 GSoC program,
and to plan for 2019.
We were joined at this meeting by Lloyd Chang, whom we had met at Jenkins World 2018.
Thank you Lloyd for joining us! A few ideas we had for 2019 are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Move project proposals to individual Google Documents&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a template for project proposed by potential mentors and by project champions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create an Organization Administrator Guide for future Jenkins GSoC project admins&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Other preparations we agreed to work on include a review of the 2018 feedback and the creation
of an &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-54059&quot;&gt;Epic&lt;/a&gt; capturing the action items in preparation for 2019.
We are also planning on making progress on the GSoC Budget process described in &lt;a href=&quot;https://github.com/jenkinsci/jep/tree/master/jep/8&quot;&gt;JEP-8&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;summit-starts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summit-starts&quot;&gt;&lt;/a&gt;Summit Starts!&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The summit started by a welcoming dinner at the Google Cafeteria and an evening session
where we were explained how the unconference would work. We proposed a few topics:
dealing with CPT lost slots, motivating mentors, and Open Source Hardware ASIC/FPGA.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On thing to say is that everyone at the conference had heard of Jenkins, or was already using Jenkins.
Lots of people came to tell us their Jenkins experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I noticed this too - made me feel proud to be part of the Jenkins project.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Jeff Pearce&lt;br /&gt;
&lt;cite&gt;Jenkins GSoC mentor in 2018&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;saturday-oct-13&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#saturday-oct-13&quot;&gt;&lt;/a&gt;Saturday Oct 13&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock left&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/conferences/gsoc-mentor-summit-2018-unconference.jpg&quot; alt=&quot;Unconference sessions&quot; width=&quot;250&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The morning started with a couple of announcements from Google.
The first one was that Google is thinking of creating a program called &quot;Google Season of Docs&quot; (GSoD for short),
where technical writers would be paired with Open Source Organizations to help them write documentation such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;High-impact tutorials&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set of How-To Guides&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Contributor’s Guide&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documentation refactoring&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plain documentation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have additional details regarding this in the
&lt;a href=&quot;https://docs.google.com/document/d/1tN9fnnJw9aBYsDwfDOVL5URTyoOyS3UYH4ijMAUOl3A/edit#heading=h.ipkcylodrufe&quot;&gt;GSoC Mentor Summit Notes&lt;/a&gt;
and we quickly concluded that if this program comes to life, Jenkins should be a participating organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The other announcement made by the GSoC administrators is that GSoC may take a different form in 2020.
However, not much more information has been made available at this time.
The program has been operating for 13 years, and in 2020 it will have been 15 years.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The announcements were followed by a series of &lt;strong&gt;morning&lt;/strong&gt; lightning talks.
This is where organizations showcase what their students accomplished during the program.
This is when we had a bit of a surprise…​&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Oleg who had signed up for the &lt;strong&gt;evening&lt;/strong&gt; lightning talks, was watching the talks while casually preparing slides for his &lt;strong&gt;evening&lt;/strong&gt; presentation.
But something unusual happened: many talks were shorter than the 3-minute allotted, and suddenly we were ahead of schedule.
That’s when Oleg was called to the stage.
I had no idea whether his slides were ready or not since he had just leaned over to me to say that he wanted to talk about all 3 projects we had this year.
Not knowing how far he had gotten into refactoring the slides, this was going to be…​ interesting.
Being an experienced presenter, Oleg pulled it off brilliantly.
The slides were effectively ready (how he managed that I have no idea),
but you can see the slides of his lightning talk here:
&lt;a href=&quot;https://docs.google.com/presentation/d/1TYnH_hxRf_yFofJP_wl2kckj2GFLxYQK-4-FGhVX3-Q/edit#slide=id.p1&quot;&gt;Jenkins Remoting over Apache Kafka&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then there were the unconference sessions. Some of the sessions we attended are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Documentation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Attracting and retaining mentors (facilitated by Martin)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Organizing and motivating volunteers and mentors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Getting students from coding/boot camps involved in open source&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Retaining students after GSoC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open Event management System&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GSoC Feedback&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have notes for all the session in &lt;a href=&quot;https://docs.google.com/document/d/1tN9fnnJw9aBYsDwfDOVL5URTyoOyS3UYH4ijMAUOl3A/edit#&quot;&gt;the main document&lt;/a&gt;.
Some sessions were captured in separated documents which are linked from the main document, or from this blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There were lots of good ideas in those sessions, and we will do what we can next year to implement some of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some organizations have said that the key for student retention
is to give them responsibilities and tasks after the program is over.
We have certainly seen that this year, with one of our students asking for more responsibilities and wanting to know how
his plugin project could continue to grow within the Jenkins project (while at the same time help out on another GSoC plugin!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the evening was the second round of lightning talks.
Jeff Pearce presented the &lt;a href=&quot;https://docs.google.com/presentation/d/1CyUM_m9poSGk25SqMvYNpWrALoG8Wklkga4TPsn8uwQ/edit#slide=id.p1&quot;&gt;Code Coverage API Plugin&lt;/a&gt; lightning talk,
(he was not caught by surprise).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/conferences/gsoc-mentor-summit-2018-chocolate-1.jpg&quot; alt=&quot;Chocolate table at the GSoC 2018 Mentor Summit&quot; width=&quot;200&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the lightning talks, we were invited to hang out at the cafeteria and on the patio, to exchange stickers,
network with mentors of other organizations, and enjoy late evening snacks, music and of course the chocolate table!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sunday-oct-14&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sunday-oct-14&quot;&gt;&lt;/a&gt;Sunday Oct 14&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Sunday, the sessions continued. An interesting session was &quot;Beyond GSoC, What can Google do?&quot;.
One person got a big round of applause when he said: &quot;Cloud credits&quot;. It turns out the GSoC program admins
have been trying to get that for us for about 3 years. Google may be big and powerful, but some things
are hard and remain hard in the corporate world.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An interesting suggestion was made by Oleg, and it would be to have a program with smaller, shorter term
commitments, something that would encourage more granular contributions but would not require a 4-month
long commitment. This was noted by the GSoC program admins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then we attended a number of sessions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/document/d/1k1nhJptJPklbcUc2riBjnNVcayiSq7EMywf6QHFHIwM/edit#heading=h.ag29mes0pkan&quot;&gt;Open Hardware ASIC/FPGA&lt;/a&gt; (facilitated by Martin)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Community Metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.outreachy.org/&quot;&gt;Outreachy&lt;/a&gt; (Jenkins is participating in this program)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/document/d/1nLjZp-RRqLiB5ShegSjsACcPrU444OxyyI6nKLQUdmA/edit#heading=h.mnmo3qdv8jvc&quot;&gt;Failing a student&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Burnout (of mentors and org admins)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then the day came to an end with some last words by Google thanking all the mentors and volunteers who
run this program in their organizations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;return-trip&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#return-trip&quot;&gt;&lt;/a&gt;Return trip&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would now like to add a personal note. After the summit, like many others I fly back home,
so I spend the evening at the SFO international terminal waiting for my late night flight.
That is where I get to meet more mentors, as some of us still wear our badges and T-Shirts,
and also recognize each other from being at the conference.
And funny enough, there are so many geeks at that terminal
that we may have recruited, among the passengers, a mentor to another org for next year!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;want-a-gsoc-student-to-work-on-your-project-in-2019&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#want-a-gsoc-student-to-work-on-your-project-in-2019&quot;&gt;&lt;/a&gt;Want a GSoC student to work on your project in 2019?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have already started the preparations for GSoC 2019.
And we cannot do this without the participation of the Jenkins community.
We are already looking for:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mentors from the Jenkins Special Interest Groups&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mentors from any background and any provenance (being a Jenkins developer is NOT required)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Project proposals&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Students and their proposals&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lots of people are afraid that mentoring a student will take a lot of their time.
If you feel that way, you are not alone. It does take some time. In my case, I spend 5 to 8 hours per week on mentor tasks (more at the start, less at the end).
To make it easier on mentors who likely have full time jobs and life commitments, we define different mentor roles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Project champion co-mentor&lt;/strong&gt;: this is the mentor who proposes the idea, but may not have all the Jenkins code expertise needed. This mentor works with the student to define the project and acts mostly as a &quot;customer&quot; of the project. This mentor usually know enough about coding to comment on pull-requests with regards to the over quality, style and features of the code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Technical co-mentor&lt;/strong&gt;: this is the mentor who knows enough about the Jenkins code to guide the student on coding, and to provide Jenkins specific code reviews on pull-requests, but has limited involvement outside the coding activity of the student.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a third role which is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Subject Matter Expert&lt;/strong&gt;: these individuals are not mentors, but we reach out to them 3-4 times during the project for advice and guidance, and sometimes complicated programming challenges.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have questions or are curious about the program,
contact us on the &lt;a href=&quot;https://gitter.im/jenkinsci/gsoc-sig&quot;&gt;GSoC Gitter SIG chat&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We would like to emphasize that project proposals are not limited to &quot;big projects&quot;.
For example, it is perfectly fine to have a proposal that is a collection of related Jira issues that aim to improve your project,
or a list of tasks that need to be done for your project.
Writing documentation is outside the scope of GSoC, but automating
documentation generation, as long as it is mostly about writing code, is within the scope of GSoC.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We look forward working with the Jenkins community on GSoC 2019!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/11/12/inspecting-binaries-with-jenkins/</id>
<title>The Silence of the Lambs: Inspecting binaries with Jenkins</title>
<updated>2018-11-15T17:25:01+00:00</updated>
<published>2018-11-12T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/11/12/inspecting-binaries-with-jenkins/" />
<author>
<name>michaelhuettermann</name>
</author>
<category term="devops"></category>
<category term="devsecops"></category>
<category term="security"></category>
<category term="vulnerabilities"></category>
<category term="compliance"></category>
<category term="twistlock"></category>
<summary>
This is a guest post by Michael Hüttermann.






In a past blog post,
Delivery Pipelines, with Jenkins 2, SonarQube, and Artifactory,
we talked about pipelines which result in binaries for development versions, and in
Delivery pipelines, with Jenkins 2: how to promote Java EE and Docker binaries toward production,
we examined ways to consistently promote applications toward production. In this blog post, I continue on both by discussing more details on security related quality gates
and bringing this together with the handling of Docker images.


Use case: Foster security on given, containerized business application


Security is an overloaded term with varying meaning in different contexts. For this contribution,...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a guest post by &lt;a href=&quot;https://github.com/michaelhuettermann&quot;&gt;Michael Hüttermann&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a past blog post,
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2017/04/18/continuousdelivery-devops-sonarqube/&quot;&gt;Delivery Pipelines, with Jenkins 2, SonarQube, and Artifactory&lt;/a&gt;,
we talked about pipelines which result in binaries for development versions, and in
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2017/07/05/continuousdelivery-devops-artifactory/&quot;&gt;Delivery pipelines, with Jenkins 2: how to promote Java EE and Docker binaries toward production&lt;/a&gt;,
we examined ways to consistently promote applications toward production. In this blog post, I continue on both by discussing more details on security related quality gates
and bringing this together with the handling of Docker images.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-case-foster-security-on-given-containerized-business-application&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#use-case-foster-security-on-given-containerized-business-application&quot;&gt;&lt;/a&gt;Use case: Foster security on given, containerized business application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Security is an overloaded term with varying meaning in different contexts. For this contribution, I consider security as the sum of rules regarding vulnerabilities
(Common Vulnerability and Exposure, CVE), in binaries. In a past blog post, we’ve identified SonarQube already, as a very helpful tool to identify flaws
in source code, particularly concerning reliability (bugs), vulnerabilities (security, e.g. CWE, that is common weakness enumaration, and OWASP, that is the Open Web Application Security Project), and
maintainability (code smells). Now it is a good time to add another tool to the chain, that is Twistlock, for inspection binaries for security issues.
Features of Twistlock include&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Compliance and vulnerability management, transitively&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Runtime defense&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cloud-native CI/CD support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Broad coverage of supported artifact types and platforms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;API, dashboards, and Jenkins integration, with strong configuration options&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The underlying use case can be derived from several real-world security initiatives, in enterprises, based on given containerized applications. In practice, it is not a surprise that after adding such new
quality gates, you identify historically grown issues. However, there are many good reasons to do so. You don’t need any Word documents to check any governance criteria manually, rather
execution and reporting are done automatically and also part of the actions are taken automatically. And above all, of course, your application is quality assured regarding known vulnerability issues, aligned with
the DevOps approach: development is interested in quick feedback whether their change would introduce any vulnerabilities, and operations is interested in insights whether and
how running applications are affected if a new CVE is discovered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The term DevSecOps was coined to explicitely add security concerns to DevOps.
In my opinion, security is already inherent part of DevOps.
Thus, there is no strong reason to introduce a new word. Surely, new words are catchy.
But they have limits.
Or have you ever experienced NoDev, the variant of DevOps where features are suddenly falling from the sky and deployed to production automatically?&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Conceptually, container inspection is now part of the delivery pipeline and Twistlock processing is now triggered once we have produced our Docker images, see below, in order to get
fast feedback.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/jenkins-devsecops/01.png&quot; alt=&quot;01&quot; title=&quot;The delivery pipeline, failing the quality gate of inspecting Docker image.&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Software is staged over different environments by configuration, without rebuilding. All changes go through the entire staging process, although defined
exception routines may be in place, for details see Michael Hüttermann, &lt;em&gt;Agile ALM&lt;/em&gt; (Manning, 2012). The staged software consists of all artifacts which
make up the release, consistently, including the business application, test cases, build scripts, Chef cookbooks, Dockerfiles, Jenkins files to build all
that in a self-contained way, for details see Michael Hüttermann, &lt;em&gt;DevOps for Developers&lt;/em&gt; (Apress, 2012).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This blog post covers sample tools. Please note, that there are also alternative tools available, and the best target architecture is aligned with concrete requirements and given basic
conditions. Besides that, the sample toolchain is derived from couple of real world success stories, designed and implemented in the field. However, this blog post
simplifies and abstracts them in order to stay focussed while discussing the primitives of delivery units. For example, aggregating multiple Docker images with ASCII files, does not change the
underlying primitives and their handlings. For more information on all parts of the blog post, please consult the respective documentation, good books or attend fine conferences. Or go to the extremes: talk to your colleagues.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our sample process, we produce a web application that is packaged in a Docker image. The produced Docker images are distributed only if the dedicated quality gate passes.
A quality gate is a stage in the overall pipeline and a sum of defined commitments, often
called requirements, the unit of work must pass. In our case, the quality gate comprises inspection of produced binaries and it fails if vulnerabilities of severity 'critical' are found.
We can configure Twistlock according to our requirements. Have a look how we’ve integrated it into our Jenkins pipeline, with focus on detecting vulnerabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile (excerpt): Twistlock inspection triggered&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Twistlock: Analysis&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; version = readFile(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;version.properties&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).trim() &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    println &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Scanning for version: &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;version&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    twistlockScan &lt;span style=&quot;color:#606&quot;&gt;ca&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;cert&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;compliancePolicy&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;critical&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, \
        &lt;span style=&quot;color:#606&quot;&gt;dockerAddress&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;unix:///var/run/docker.sock&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, \
        &lt;span style=&quot;color:#606&quot;&gt;ignoreImageBuildTime&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;key&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;logLevel&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, \
        &lt;span style=&quot;color:#606&quot;&gt;policy&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;critical&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;repository&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;huttermann-docker-local.jfrog.io/michaelhuettermann/alpine-tomcat7&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;\&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        &lt;span style=&quot;color:#606&quot;&gt;requirePackageUpdate&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;tag&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;$&lt;/span&gt;version&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;timeout&lt;/span&gt;: &lt;span style=&quot;color:#00D&quot;&gt;10&lt;/span&gt;
}

stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Twistlock: Publish&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) { &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; version = readFile(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;version.properties &lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).trim()
    println &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Publishing scan results for version: &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;version&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    twistlockPublish &lt;span style=&quot;color:#606&quot;&gt;ca&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;cert&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, \
        &lt;span style=&quot;color:#606&quot;&gt;dockerAddress&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;unix:///var/run/docker.sock&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;key&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, \
        &lt;span style=&quot;color:#606&quot;&gt;logLevel&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;repository&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;huttermann-docker-local.jfrog.io/michaelhuettermann/alpine-tomcat7&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;tag&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;$&lt;/span&gt;version&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, \
        &lt;span style=&quot;color:#606&quot;&gt;timeout&lt;/span&gt;: &lt;span style=&quot;color:#00D&quot;&gt;10&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Twistlock inspection as part of the sequence of stages in Jenkinsfile&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Nailing down the version of the to be inspected image, dynamically&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configuring analysis including vulnerability severity level&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Publishing the inspection results to Twistlock console, that is the dashboard&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let’s start with the first phase to bring our application in shape again, that is gaining insight about the security related flaws.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;phase-1-gain-insights-about-security-related-flaws&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#phase-1-gain-insights-about-security-related-flaws&quot;&gt;&lt;/a&gt;Phase 1: Gain insights about security related flaws&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After we’ve introduced the new quality gate, it failed, see image above. As integration with other tools, Jenkins is the automation engine and does provide helpful context information,
however, those cannot replace features and data the dedicated, triggered tool does offer. Thus, this is the moment to switch to the dedicated tool, that is Twistlock. Opening
the dashboard, we can navigate to the Jenkins build jobs, that is the specific run of the build, and the respective results of the Twistlock analysis. What we see now is a list
of vulnerabilities, and we need to fix those of severity &lt;em&gt;critical&lt;/em&gt; in order to pass the quality gate, and get our changes again toward production. The list shows entries of
type &lt;em&gt;jar&lt;/em&gt;, that is a finding in a binary as part of the Docker image, in our case the WAR file we’ve deployed to a web container (Tomcat), and of type &lt;em&gt;OS&lt;/em&gt;, those are issues of the underlying image itself, the
operating system, either part of the base image, or as a package added/changed in our Dockerfile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/jenkins-devsecops/02.png&quot; alt=&quot;02&quot; title=&quot;Twistlock findings: overview.&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can now easily zoom in and examine the vulnerabilities of the Docker layers. This really helps to structure work and identify root causes. Since, typically,
a Docker image extends a Docker base image, the findings in the base image are shown on the top, see next screenshot, grouped by severity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/jenkins-devsecops/03.png&quot; alt=&quot;03&quot; title=&quot;Twistlock also displays the vulnerabilities according to Docker layers. Findings based on the base image are listed at the top.&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Other Docker layers were added to the base image, and those can add vulnerabilities too. In our case, the packaged WAR file obviously contains a vulnerability. The next image shows how we examine that finding, while this time
expanding the Twistlock wizard (that is the plus sign) to directly see the list of found vulnerabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/jenkins-devsecops/04.png&quot; alt=&quot;04&quot; title=&quot;Twistlock recursively inspects embedded binaries auch as the WAR with its libraries. Here the wizard is expanded showing all vulnerabilities of this layer. On the right side, we can move over the different sections of our Dockerfile.&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finding and visualizing the issues are a very good first step, and we’ve even made those findings actionable, so we now have to take action and address them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;phase-2-address-the-findings&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#phase-2-address-the-findings&quot;&gt;&lt;/a&gt;Phase 2: Address the findings&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To address the findings, we need to split our initiative into two parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Fixing the critical vulnerabilities related to the Docker image (in our case largely the base image)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixing the critical vulnerabilities related to the embedded deployment unit (in our case the WAR)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s proceed bottom up, first coping with the Docker base image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is an easy example covering multiple scenarios particularly identifying and fixing vulnerabilities in transitive binaries, i.e. binaries contained in
other binaries, e.g. a Docker image containing a WAR file that in turn contains libraries. To expand this vertical feasibility spike, you can easily add
more units of each layer, or add more abstractions, however, the idea can always be nailed down to the primitives, covered in this blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s now have a look at the used Docker image by looking at the used Dockerfile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Dockerfile: The Dockerfile based on Alpine, running OpenJDK 8&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;FROM openjdk:8-jre-alpine &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
LABEL maintainer &quot;michael@huettermann.net&quot;

# Domain of your Artifactory. Any other storage and URI download link works, just change the ADD command, see below.
ARG ARTI
ARG VER

# Expose web port
EXPOSE 8080

# Tomcat Version
ENV TOMCAT_VERSION_MAJOR 9 &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
ENV TOMCAT_VERSION_FULL  9.0.6

# Download, install, housekeeping
RUN apk add --update curl &amp;amp;&amp;amp;\  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  apk add bash &amp;amp;&amp;amp;\
  #apk add -u libx11 &amp;amp;&amp;amp;\  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  mkdir /opt &amp;amp;&amp;amp;\
  curl -LO ${ARTI}/list/generic-local/apache/org/tomcat/tomcat-${TOMCAT_VERSION_MAJOR}/v${TOMCAT_VERSION_FULL}/bin/apache-tomcat-${TOMCAT_VERSION_FULL}.tar.gz &amp;amp;&amp;amp;\
  gunzip -c apache-tomcat-${TOMCAT_VERSION_FULL}.tar.gz | tar -xf - -C /opt &amp;amp;&amp;amp;\
  rm -f apache-tomcat-${TOMCAT_VERSION_FULL}.tar.gz &amp;amp;&amp;amp;\
  ln -s /opt/apache-tomcat-${TOMCAT_VERSION_FULL} /opt/tomcat &amp;amp;&amp;amp;\
  rm -rf /opt/tomcat/webapps/examples /opt/tomcat/webapps/docs &amp;amp;&amp;amp;\
  apk del curl &amp;amp;&amp;amp;\
  rm -rf /var/cache/apk/*

# Download and deploy the Java EE WAR
ADD http://${ARTI}/list/libs-release-local/com/huettermann/web/${VER}/all-${VER}.war /opt/tomcat/webapps/all.war &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;

RUN chmod 755 /opt/tomcat/webapps/*.war

# Set environment
ENV CATALINA_HOME /opt/tomcat

# Start Tomcat on startup
CMD ${CATALINA_HOME}/bin/catalina.sh run&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Base image ships OpenJDK 8, on Alpine&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Defined version of web container&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Applying some defined steps to configure Alpine, according to requirements&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Updating package itself would address one vulnerability already&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Deploying the application&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By checking available versions of the official OpenJDK Alpine image, we see that there’s a newer version 8u181 which we could use.
We can zoom in and study release notes and contents, or we just pragmatically switch the base image to a more recent version. Often it is a good idea
to upgrade versions regularly, in defined intervals. This leads to the following change in the Dockerfile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Dockerfile (excerpt): The Dockerfile based on Alpine, running OpenJDK 8u181&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;FROM openjdk:8u181-jre-alpine &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
LABEL maintainer &quot;michael@huettermann.net&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Base image is now OpenJDK 8u181, on Alpine&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are more options available to fix the issues, but let’s proceed to the second part, the vulnerabilities in the deployment unit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before we push this change to GitHub, we also address the vulnerability issue in the deployment unit, that is &lt;em&gt;jetty-io&lt;/em&gt;. Here we are a bit unsure about
why, in this specific use case, the library is used. To retrieve more information about dependencies, we run a &lt;em&gt;dependency:tree&lt;/em&gt; command on our Maven
based project. We now see that jetty-io is transitively referenced by &lt;em&gt;org.seleniumhq.selenium:htmlunit-driver&lt;/em&gt;. We can surely discuss why this is a compile
dependency and the libraries are shipped as part of the WAR, but let’s consider this to be given according to requirements, thus we must take special attention now
to version 2.29.0 of the specific library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/jenkins-devsecops/05.png&quot; alt=&quot;05&quot; title=&quot;Inspecting the dependency structure, with the used build tool&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also here we can browse release notes and content (particularly how those libs are built themselves), and come to the conclusion to
switch from the used version, that is &lt;em&gt;2.29.0&lt;/em&gt;, to a newer version of &lt;em&gt;htmlunit-driver&lt;/em&gt;, that is &lt;em&gt;2.31.1&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;pom.xml (excerpt): Build file&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.seleniumhq.selenium&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;selenium-java&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.14.0&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.seleniumhq.selenium&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
            &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;htmlunit-driver&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.31.1&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;junit&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;junit&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.7&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Part of the underlying POM defining dependencies&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Definition of the dependency, causing the vulnerability finding; we use a newer version now&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OK, now we are done. We push the changes to GitHub, and our GitHub webhook directly triggers the workflow. This time the quality gate passes, so it
looks like our fixes did address the root causes and eliminated those with the configured threshold severity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/jenkins-devsecops/06.png&quot; alt=&quot;06&quot; title=&quot;Part of the delivery pipeline, showing the quality gate passed and Docker image inspected without findings of severity CRITICAL&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, after running through our entire workflow, that is made up of different pipelines, our inspected and quality assured container does successfully
run in our production runtime environment, that is on Oracle Cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/jenkins-devsecops/07.png&quot; alt=&quot;07&quot; title=&quot;The quality assured Docker container runs in the Oracle Cloud.&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Crisp, isn’t it?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This closes our quick walkthrough of how to inject security related quality gates into a Jenkins based delivery pipeline.
We’ve discussed some concepts and how this can look like with sample tools.
In the center of our efforts, we used Jenkins, the swiss army knife of automation.
We enriched our ecosystem by integrating couple of platforms and tools, above all Twistlock.
After this tasty appetizer you are ready to assess your own delivery pipelines,
concepts and tools, and to possibly invest even more attention to security.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://huettermann.net/alm/&quot;&gt;'Agile ALM', Manning, 2011&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://huettermann.net/devops/&quot;&gt;'DevOps for Developers', Apress, 2012&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker, the standard to develop and ship set of changes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/_/openjdk/&quot;&gt;Docker images, shipping OpenJDK&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.oracle.com/en_US/containers&quot;&gt;Oracle Cloud Infrastructure, for containers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://alpinelinux.org/&quot;&gt;Alpine Linux&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sonarqube.org/&quot;&gt;SonarQube, the language/platform agnostic Continuous Inspection tool&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.twistlock.com/&quot;&gt;Twistlock, the container security platform&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/michaelhuettermann/sandbox/tree/master/all/&quot;&gt;Sources on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://de.wikipedia.org/wiki/American_Standard_Code_for_Information_Interchange&quot;&gt;ASCII, commonly used standard to work on primitives, such as Docker (and their aggregations)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures&quot;&gt;Common Vulnerabilities and Exposures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/jBGFjFc6Jf8?t=1427&quot;&gt;Holistic pipelines, Live 15-minute Jenkins Demos, Part 1, on YouTube&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/rS_pchiwGdM?t=95&quot;&gt;Holistic pipelines, Live 15-minute Jenkins Demos, Part 2, on YouTube&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2017/04/18/continuousdelivery-devops-sonarqube/&quot;&gt;Delivery Pipelines, with Jenkins 2, SonarQube, and Artifactory&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2017/07/05/continuousdelivery-devops-artifactory/&quot;&gt;Delivery pipelines, with Jenkins 2: how to promote Java EE and Docker binaries toward production&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/11/07/Validate-Jenkinsfile/</id>
<title>Validate your Jenkinsfile from within VS Code</title>
<updated>2018-11-12T18:24:58+00:00</updated>
<published>2018-11-07T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/11/07/Validate-Jenkinsfile/" />
<author>
<name>janjoerke</name>
</author>
<category term="jenkinsfile"></category>
<category term="validation"></category>
<category term="vscode"></category>
<category term="pipeline"></category>
<category term="pipeline authoring"></category>
<category term="development"></category>
<summary>
In my daily work I often have to create or modify Jenkinsfiles and more often than I would like, I make mistakes. It is a very tedious workflow when you make a change to your Jenkinsfile, create a commit, push the commit and wait for your Jenkins Server to tell you, that you have missed a bracket.


The Command-line Pipeline Linter (https://jenkins.io/doc/book/pipeline/development/) does a great job of reducing the turnaround times when writing a Jenkinsfile, but its usage has its own inconveniences. You need tools like curl or ssh to make a connection to your Jenkins Server and you need to...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my daily work I often have to create or modify Jenkinsfiles and more often than I would like, I make mistakes. It is a very tedious workflow when you make a change to your Jenkinsfile, create a commit, push the commit and wait for your Jenkins Server to tell you, that you have missed a bracket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Command-line Pipeline Linter (&lt;a href=&quot;https://jenkins.io/doc/book/pipeline/development/&quot; class=&quot;bare&quot;&gt;https://jenkins.io/doc/book/pipeline/development/&lt;/a&gt;) does a great job of reducing the turnaround times when writing a Jenkinsfile, but its usage has its own inconveniences. You need tools like curl or ssh to make a connection to your Jenkins Server and you need to remember the correct command to validate your Jenkinsfile. I still did not like the solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As VS Code is my daily driver, I started to look at writing extensions for it and out of it came a little extension which makes validating Jenkinsfiles just a little bit more comfortable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What the 'Jenkins Pipeline Linter Connector' does is, that it takes the file that you have currently opened, pushes it to your Jenkins Server and displays the validation result in VS Code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/vscode-pipeline-linter/example1.gif&quot; alt=&quot;Jenkins Pipeline Linter Connector | Example 1&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/vscode-pipeline-linter/example2.gif&quot; alt=&quot;Jenkins Pipeline Linter Connector | Example 2&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;​You can find the extension from within the VS Code extension browser or at the following url: &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=janjoerke.jenkins-pipeline-linter-connector&quot; class=&quot;bare&quot;&gt;https://marketplace.visualstudio.com/items?itemName=janjoerke.jenkins-pipeline-linter-connector&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The extension adds four settings entries to VS Code which you have to use to configure the Jenkins Server you want to use for validation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jenkins.pipeline.linter.connector.url&lt;/code&gt; is the endpoint at which your Jenkins Server expects the POST request, containing your Jenkinsfile which you want to validate. Typically this points to &lt;em&gt;&lt;a href=&quot;http://&amp;lt;your_jenkins_server:port&amp;gt;/pipeline-model-converter/validate&quot; class=&quot;bare&quot;&gt;http://&amp;lt;your_jenkins_server:port&amp;gt;/pipeline-model-converter/validate&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jenkins.pipeline.linter.connector.user&lt;/code&gt; allows you to specify your Jenkins username.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jenkins.pipeline.linter.connector.pass&lt;/code&gt; allows you to specify your Jenkins password.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jenkins.pipeline.linter.connector.crumbUrl&lt;/code&gt; has to be specified if your Jenkins Server has CRSF protection enabled. Typically this points to &lt;em&gt;&lt;a href=&quot;http://&amp;lt;your_jenkins_server:port&amp;gt;/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,%22:%22,//crumb&quot; class=&quot;bare&quot;&gt;http://&amp;lt;your_jenkins_server:port&amp;gt;/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,%22:%22,//crumb&lt;/a&gt;)&lt;/em&gt;.
​&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/10/18/contributor-summit-summary/</id>
<title>What to Expect at the Jenkins Contributor Summit</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-10-18T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/10/18/contributor-summit-summary/" />
<author>
<name>tracymiranda</name>
</author>
<category term="community"></category>
<category term="events"></category>
<category term="jenkins-world"></category>
<summary>
The Jenkins Contributor summit is where the current and future contributors of the Jenkins project get together.
This summit will be on Tuesday, October 23rd 2018 in Nice, France just before Jenkins World.
What should those planning on joining expect at the event?
Earlier this year in September we had a contributor summit in San Francisco which gave us a pretty good outline of what to expect.
First of all it was one of the biggest contributor summits ever with lots of first-time attendees.


Morning


There are plenty of exciting developments happening in the Jenkins community, which meant there was a packed program.
One of the most...
</summary>
<content type="html">
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/conferences/contributor_summit_kk.jpg&quot; alt=&quot;Contributor Summit - Morning&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/conferences/devops-world-2018.jpg&quot; alt=&quot;DevOps World | Jenkins World 2018&quot; width=&quot;200&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins Contributor summit is where the current and future contributors of the Jenkins project get together.
This summit will be on Tuesday, October 23rd 2018 in Nice, France just before &lt;a href=&quot;https://www.cloudbees.com/devops-world/nice&quot;&gt;Jenkins World&lt;/a&gt;.
What should those planning on joining expect at the event?
Earlier this year in September we had a contributor summit in San Francisco which gave us a pretty good outline of what to expect.
First of all it was one of the biggest contributor summits ever with lots of first-time attendees.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;morning&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#morning&quot;&gt;&lt;/a&gt;Morning&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are plenty of exciting developments happening in the Jenkins community, which meant there was a packed program.
One of the most anticipated updates was Kohsuke Kawaguchi speaking about &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/31/shifting-gears&quot;&gt;Jenkins Shifting Gears&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There were also updates on the '5 Jenkins Superpower' projects in active development:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/04/06/jenkins-essentials&quot;&gt;Jenkins Evergreen&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins-x.io&quot;&gt;Jenkins X&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.praqma.com/stories/jenkins-configuration-as-code&quot;&gt;Configuration as Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/doc/book/pipeline&quot;&gt;Jenkins Pipeline&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs/cloud-native&quot;&gt;Cloud Native Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As ever Jenkins is a community driven by its members so it was also great to get an update on &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/gsoc&quot;&gt;Google Summer of Code&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;birds-of-a-feather-bof&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#birds-of-a-feather-bof&quot;&gt;&lt;/a&gt;Birds-of-a-feather (BoF)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After a packed morning of updates, it was time for a break and some lunch.
After lunch attendees divided up into groups and gathered around tables for unconference style discussions of specific areas.
Each table ran differently: some had demos, some did presentations, some hacked on code and others brainstormed ideas.
There was definitely alot of energy in the room and huge exchange of ideas.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ignite-talks-wrap-up&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ignite-talks-wrap-up&quot;&gt;&lt;/a&gt;Ignite Talks &amp;amp; Wrap-up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To finish off the session we had a set of ignite talks.
Attendees were invited to volunteer on the day - no easy task given the pressure involved- and many did.
Hats off to Liam Newman, Mandy Hubbard, Eric Smalling, Pui Chee Chan, Martin d’Anjou and Vishal Raina for getting out of their comfort zone and doing talks.
There were two surprise ignite talks, one for James Strachan and one for Kohsuke Kawaguchi which were highly entertaining gave the audience lots of laughs.
Someone even captured KK’s talk on video.  The sound isn’t great but it was a truly visionary talk:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;640&quot; src=&quot;https://www.youtube.com/embed/egFrqmENGDE?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally the event finished with swag presentations and a fun Kahoot quiz to wrap things up.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributor-appreciation-event&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributor-appreciation-event&quot;&gt;&lt;/a&gt;Contributor Appreciation Event&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the summit, contributors were invited to join at the after party at Spin.
Spin was a unique venue in San Francisco where attendees could socialise and also play ping-pong!
While some took it seriously most enjoyed the relaxed way to get to know their fellow contributors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/conferences/contributor_summit_sf.jpg&quot; alt=&quot;contributor summit sf&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;see-you-in-nice&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#see-you-in-nice&quot;&gt;&lt;/a&gt;See you in Nice&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The event was a lot of fun and the contributor summit in Nice will follow a very similar structure.
All levels of contributor are welcome, there will be lots of opportunity for in-depth discussions and you can even do an ignite talk!
While we won’t be repeating the ping pong event there will be something equally unique to follow on from the summit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Attending is free, and no DevOps World | Jenkins World ticket is needed, but &lt;a href=&quot;https://www.eventbrite.com/e/contributor-summit-nice-tickets-48353733318&quot;&gt;RSVP&lt;/a&gt; if you are going to attend to help us plan.
See you there!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As long as you’re in Nice for the Contributor Summit,
join Tracy, Kohsuke, and hundreds of other Jenkins users at
&lt;a href=&quot;https://www.cloudbees.com/devops-world/nice&quot;&gt;DevOps World - Jenkins World&lt;/a&gt; on October 22-25.
Register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/10/16/custom-war-packager/</id>
<title>Build your own Jenkins! Introducing Custom WAR/Docker Packager</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-10-16T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/10/16/custom-war-packager/" />
<author>
<name>oleg_nenashev</name>
</author>
<category term="tools"></category>
<category term="docker"></category>
<category term="jenkins-x"></category>
<category term="cloud-native"></category>
<summary>
I would like to introduce Custom WAR Packager -
a new tool for Jenkins administrators and developers.
This tool allows packaging custom Jenkins distributions as WAR files,
Docker images
and Jenkinsfile Runner bundles.
This tool allows packaging Jenkins, plugins, and configurations in a ready-to-fly distribution.
Custom WAR packager is a part of the Ephemeral Jenkins master toolchain
which we presented in our A Cloud Native Jenkins blogpost.
This toolchain is already used in Jenkins X to package serverless images.


In this blogpost I will show some common use-cases for Custom WAR Packager.


History


As with Jenkins itself, Custom WAR Packager started as a small development tool.
For a long time it was...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would like to introduce &lt;a href=&quot;https://github.com/jenkinsci/custom-war-packager&quot;&gt;Custom WAR Packager&lt;/a&gt; -
a new tool for Jenkins administrators and developers.
This tool allows packaging custom Jenkins distributions as WAR files,
&lt;a href=&quot;https://github.com/jenkinsci/docker&quot;&gt;Docker images&lt;/a&gt;
and &lt;a href=&quot;https://github.com/jenkinsci/jenkinsfile-runner&quot;&gt;Jenkinsfile Runner&lt;/a&gt; bundles.
This tool allows packaging Jenkins, plugins, and configurations in a ready-to-fly distribution.
Custom WAR packager is a part of the Ephemeral Jenkins master toolchain
which we presented in our &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/12/speaker-blog-a-cloud-native-jenkins/&quot;&gt;A Cloud Native Jenkins&lt;/a&gt; blogpost.
This toolchain is already used in &lt;a href=&quot;https://jenkins-x.io&quot;&gt;Jenkins X&lt;/a&gt; to package &lt;a href=&quot;https://github.com/jenkins-x/jenkins-x-serverless&quot;&gt;serverless images&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blogpost I will show some common use-cases for Custom WAR Packager.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;history&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#history&quot;&gt;&lt;/a&gt;History&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As with Jenkins itself, Custom WAR Packager started as a small development tool.
For a long time it was a problem to run integration testing in Jenkins.
We have 3 main frameworks for it:
    &lt;a href=&quot;https://github.com/jenkinsci/jenkins-test-harness&quot;&gt;Jenkins Test Harness&lt;/a&gt;,
    &lt;a href=&quot;https://github.com/jenkinsci/acceptance-test-harness&quot;&gt;Acceptance Test Harness&lt;/a&gt;,
    and &lt;a href=&quot;https://github.com/jenkinsci/plugin-compat-tester&quot;&gt;Plugin Compatibility Tester&lt;/a&gt;.
All these frameworks require a Jenkins WAR file to be passed to them to run tests.
What if you want to run Jenkins tests in a custom environment like AWS?
Or what if you want to reuse existing Jenkins Pipeline tests and to run them against
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs/cloud-native/pluggable-storage/&quot;&gt;Pluggable Storage&lt;/a&gt; to ensure there are no regressions?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And it was not just an idle question.
There were major activities happening in the Jenkins project: Cloud-Native Jenkins, Jenkins Evergreen, and Jenkins X.
All these activities required a lot of integration testing  to enable Continuous Delivery flows.
In order to do this in existing test frameworks, we needed to package a self-configuring WAR file so that it would be possible to run integration tests in existing frameworks.
That is why Custom WAR Packager was created in April 2018.
Later it got support for packaging Docker images,
and in September 2018 it also got support for Jenkinsfile Runner
which was created by &lt;a href=&quot;https://github.com/kohsuke/&quot;&gt;Kohsuke Kawaguchi&lt;/a&gt;
and then improved by &lt;a href=&quot;https://github.com/ndeloof&quot;&gt;Nicolas de Loof&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-inside&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-inside&quot;&gt;&lt;/a&gt;What’s inside?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Custom WAR packager is a tool which is available as CLI Executable, Maven Plugin, or Docker package.
This tool takes input definitions and packages them as requested by the user.
Everything is managed by a YAML configuration file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-10-16-cwp/cwp_flow.png&quot; alt=&quot;Custom WAR Packager build flow&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The tool supports various types of inputs.
The list of plugins can be passed via YAML itself, &lt;code&gt;pom.xml&lt;/code&gt;, or a BOM file from &lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/309/README.adoc&quot;&gt;JEP-309&lt;/a&gt;.
Custom WAR Packager supports not only released versions,
but also builds deployed to the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/05/15/incremental-deployment/&quot;&gt;Incremental repository&lt;/a&gt; (CD flow for Jenkins core and plugins - &lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/305/README.adoc&quot;&gt;JEP-305&lt;/a&gt;) and
even direct builds by Git or directory path specifications.
It allows building packages from any source, without waiting for official releases.
The builds are also pretty fast, because the plugin does caching in the local Maven repository by using commit IDs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Custom WAR packager also supports the following self-configuration options:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;YAML files for &lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin&quot;&gt;Jenkins Configuration as Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Groovy+Hook+Script&quot;&gt;Groovy Hooks&lt;/a&gt; (e.g. init hooks for pre-configuration)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System properties&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;war-packaging&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#war-packaging&quot;&gt;&lt;/a&gt;WAR Packaging&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;WAR packaging happens by default every time the repo is built.
Generally Custom WAR Packager repackages all inputs into a single WAR file by following conventions defined in the Jenkins core and the JCasC plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sample configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#606&quot;&gt;bundle&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;groupId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;io.jenkins.tools.war-packager.demo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;artifactId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;blogpost-demo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;vendor&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Jenkins project&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;description&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Just a demo for the blogpost&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#606&quot;&gt;war&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;groupId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;org.jenkins-ci.main&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;artifactId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jenkins-war&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;source&lt;/span&gt;:
    &lt;span style=&quot;color:#606&quot;&gt;version&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;2.138.2&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#606&quot;&gt;plugins&lt;/span&gt;:
  - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;groupId: &quot;io.jenkins&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;artifactId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;configuration-as-code&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;source&lt;/span&gt;:
      &lt;span style=&quot;color:#777&quot;&gt;# Common release&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;version&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;1.0-rc2&lt;/span&gt;&lt;/span&gt;
  - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;groupId: &quot;io.jenkins&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;artifactId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;artifact-manager-s3&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;source&lt;/span&gt;:
      &lt;span style=&quot;color:#777&quot;&gt;# Incrementals&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;version&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;1.2-rc259.c9d60bf2f88c&lt;/span&gt;&lt;/span&gt;
  - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;groupId: &quot;org.jenkins-ci.plugins.workflow&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;artifactId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;workflow-job&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;source&lt;/span&gt;:
      &lt;span style=&quot;color:#777&quot;&gt;# Git&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;git&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;https://github.com/jglick/workflow-job-plugin.git&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;commit&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;18d78f305a4526af9cdf3a7b68eb9caf97c7cfbc&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#777&quot;&gt;# etc.&lt;/span&gt;
&lt;span style=&quot;color:#606&quot;&gt;systemProperties&lt;/span&gt;:
    &lt;span style=&quot;color:#606&quot;&gt;jenkins.model.Jenkins.slaveAgentPort&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;9000&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;jenkins.model.Jenkins.slaveAgentPortEnforce&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#606&quot;&gt;groovyHooks&lt;/span&gt;:
  - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;type: &quot;init&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;id&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;initScripts&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;source&lt;/span&gt;:
      &lt;span style=&quot;color:#606&quot;&gt;dir&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;src/main/groovy&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#606&quot;&gt;casc&lt;/span&gt;:
  - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;id: &quot;jcasc&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;source&lt;/span&gt;:
      &lt;span style=&quot;color:#606&quot;&gt;dir&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;casc.yml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;docker-packaging&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#docker-packaging&quot;&gt;&lt;/a&gt;Docker packaging&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to do the Docker packaging, Custom WAR Packager uses the official
&lt;a href=&quot;https://hub.docker.com/r/jenkins/jenkins/&quot;&gt;jenkins/jenkins&lt;/a&gt;
Docker images or other images using the same format.
During the build the WAR file just gets replaced by the one built by the tool.
It means that &lt;strong&gt;ALL&lt;/strong&gt; image features are available for such custom builds: &lt;code&gt;plugins.txt&lt;/code&gt;, Java options, Groovy hooks, etc., etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;## ...&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;## WAR configuration from above&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;## ...&lt;/span&gt;

&lt;span style=&quot;color:#606&quot;&gt;buildSettings&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;docker&lt;/span&gt;:
    &lt;span style=&quot;color:#606&quot;&gt;build&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;# Base image&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;base&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jenkins/jenkins:2.138.2&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;# Tag to set for the produced image&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;tag&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jenkins/custom-war-packager-casc-demo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, &lt;a href=&quot;https://github.com/jenkinsci/custom-war-packager/tree/master/demo/external-logging-elasticsearch&quot;&gt;this demo&lt;/a&gt;
shows packaging of a Docker image with External Build Logging to Elasticsearch.
Although the implementations have been improved as a part of &lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/207/README.adoc&quot;&gt;JEP-207&lt;/a&gt; and &lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/210/README.adoc&quot;&gt;JEP-210&lt;/a&gt;,
you can check out this demo to see how the Docker image does self-configuration, connects to a Elasicsearch, and then starts externally storing logs without changes in build log UIs.
A Docker Compose file for running the entire cluster is included.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jenkinsfile-runner-packaging&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkinsfile-runner-packaging&quot;&gt;&lt;/a&gt;Jenkinsfile Runner packaging&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is probably the most tricky mode of Jenkinsfile Runner.
In March a new &lt;a href=&quot;https://github.com/jenkinsci/jenkinsfile-runner&quot;&gt;Jenkinsfile Runner&lt;/a&gt; project
&lt;a href=&quot;https://groups.google.com/d/msg/jenkinsci-dev/gjz3CDhi-kk/1mwi_oa0AQAJ&quot;&gt;was announced&lt;/a&gt; in the developer mailing list.
The main idea is to support running Jenkins Pipeline in a single-shot master mode when the instance just executes a single run and prints outputs to the console.
Jenkinsfile Runner runs as CLI or as a Docker image.
Custom WAR Packager is able to produce both, though only Docker run mode is recommended.
With Jenkinsfile Runner you can run Pipelines simply as…​&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;docker run --rm -v $PWD/Jenkinsfile:/workspace/Jenkinsfile acmeorg/jenkinsfile-runner&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we started working on Ephemeral (aka &quot;single-shot&quot;) masters in the Cloud Native SIG,
there was an idea to use Custom WAR Packager and other existing tools (Jenkinsfile Runner, Jenkins Configuration as Code, etc.) to implement it.
It would be possible to just replace Jenkins core JAR and add plugins to Jenkinsfile Runner, but it is not enough.
To be efficient, Jenkinsfile Runner images should start up &lt;strong&gt;FAST&lt;/strong&gt;, really fast.
In the build flow implementation we used some experimental options available in Jenkins and Jenkinsfile Runner, including classloader precaching, plugin unarchiving, etc, etc.
With such patches Jenkins starts up in few seconds with configuration-as-code and dozens of bundled plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, how to build custom Jenkinsfile Runner images?
Although there is no release so far, it is not something which can stop us as you see above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;##...&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;## WAR Configuration from above&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;##...&lt;/span&gt;

&lt;span style=&quot;color:#606&quot;&gt;buildSettings&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;jenkinsfileRunner&lt;/span&gt;:
    &lt;span style=&quot;color:#606&quot;&gt;source&lt;/span&gt;:
      &lt;span style=&quot;color:#606&quot;&gt;groupId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;io.jenkins&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;artifactId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jenkinsfile-runner&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;build&lt;/span&gt;:
        &lt;span style=&quot;color:#606&quot;&gt;noCache&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;source&lt;/span&gt;:
        &lt;span style=&quot;color:#606&quot;&gt;git&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;https://github.com/jenkinsci/jenkinsfile-runner.git&lt;/span&gt;&lt;/span&gt;
        &lt;span style=&quot;color:#606&quot;&gt;commit&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;8ff9b1e9a097e629c5fbffca9a3d69750097ecc4&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;docker&lt;/span&gt;:
      &lt;span style=&quot;color:#606&quot;&gt;base&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jenkins/jenkins:2.138.2&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;tag&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;onenashev/cwp-jenkinsfile-runner-demo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;build&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find a Demo of Jenkinsfile Runner packaging with Custom WAR Packager
&lt;a href=&quot;https://github.com/jenkinsci/custom-war-packager/tree/master/demo/jenkinsfile-runner&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;more-info&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#more-info&quot;&gt;&lt;/a&gt;More info&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many other features which are not described in this blogpost.
For example, it is possible to alter Maven build settings or to add/replace libraries within the Jenkins core (e.g. Remoting).
Please see the &lt;a href=&quot;https://github.com/jenkinsci/custom-war-packager/blob/master/README.md&quot;&gt;Custom WAR Packager documentation&lt;/a&gt; for more information.
There are a number of demos available in the repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are interested to contribute to the repository,
please create pull requests and CC &lt;a href=&quot;https://github.com/oleg-nenashev/&quot;&gt;@oleg-nenashev&lt;/a&gt;
and &lt;a href=&quot;https://github.com/raul-arabaolaza&quot;&gt;Raul Arabaolaza&lt;/a&gt; who is the second maintainer now working on Jenkins test automation flows.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-next&quot;&gt;&lt;/a&gt;What’s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are still many improvements that could be made to the tool to make it more efficient:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add upper bounds checks for transitive plugin dependencies so that the conflicts are discovered during the build&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow passing all kinds of system properties and Java options via configuration YAML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improve Jenkinsfile Runner to improve performance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrate the tool into Jenkins Integration test flows
(see &lt;a href=&quot;https://github.com/jenkins-infra/pipeline-library/blob/master/vars/essentialsTest.groovy&quot;&gt;essentialsTest()&lt;/a&gt;
 in the Jenkins Pipeline library)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many other tasks could be implemented in Custom WAR Packager,
but even now it is available to all Jenkins users so that they can build their own Jenkins bundles with it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;want-to-know-more&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#want-to-know-more&quot;&gt;&lt;/a&gt;Want to know more?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are going to &lt;a href=&quot;https://www.cloudbees.com/devops-world/nice&quot;&gt;DevOps World - Jenkins World in Nice&lt;/a&gt; on Oct 22-25,
I will be presenting Custom WAR Packager at the Community Booth during the lunch demo sessions.
We will be also repeating our &lt;a href=&quot;https://sched.co/FIox&quot;&gt;A Cloud Native Jenkins&lt;/a&gt; talk together with Carlos Sanchez where we will show how Ephemeral Jenkins works with Pluggable Storage.
Jenkins X team is also going to present their project using Custom WAR Packager.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come meet Oleg and other Cloud Native SIG members at
&lt;a href=&quot;https://www.cloudbees.com/devops-world/nice&quot;&gt;DevOps World - Jenkins World&lt;/a&gt; on October 22-25 in Nice.
register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/10/14/gsoc2018-results/</id>
<title>Jenkins in Google Summer of Code 2018 Results</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-10-14T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/10/14/gsoc2018-results/" />
<author>
<name>oleg_nenashev</name>
</author>
<category term="community"></category>
<category term="events"></category>
<category term="gsoc"></category>
<category term="gsoc2018"></category>
<summary>
It has been a while since the last blogpost about Google Summer of Code in Jenkins.
GSoC 2018 has officially finished on August 23, and we had a Jenkins Online Meetup where we had final presentations of the GSoC projects.
It is never late to provide more context, so I would like to summarize the results and provide updates of what was happening in Jenkins GSoC Special Interest Group over last 2 months.
In this blogpost you can find project status overviews and updates from the Jenkins GSoC SIG.


But first of all, I would like to thank all our students, their mentors
and to...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/gsoc/jenkins-gsoc-logo_small.png&quot; alt=&quot;Jenkins GSoC&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It has been a while since the last blogpost about &lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code&lt;/a&gt; in Jenkins.
GSoC 2018 has officially finished on August 23, and we had a &lt;a href=&quot;https://www.meetup.com/Jenkins-online-meetup/events/253577758/&quot;&gt;Jenkins Online Meetup&lt;/a&gt; where we had final presentations of the GSoC projects.
It is never late to provide more context, so I would like to summarize the results and provide updates of what was happening in &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs/gsoc&quot;&gt;Jenkins GSoC Special Interest Group&lt;/a&gt; over last 2 months.
In this blogpost you can find project status overviews and updates from the Jenkins &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs/gsoc&quot;&gt;GSoC SIG&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But first of all, I would like to thank all our students, their mentors
and to all other contributors who proposed project ideas, participated in student selection, community bonding and further reviews.
Google Summer of Code is a major effort which would not be possible without active participation of the Jenkins community&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year we started preparing for Google Summer of Code in early December.
14 project ideas and 12 potential mentors we published on our website,
and we got dozens of students reaching out to us during the application period.
After processing applications, we have selected 4 applications for GSoC.
Unfortunately one project got cancelled due to student eligibility issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, we had the following projects:
Code Coverage API plugin, Remoting over Apache Kafka, and Simple Pull-Request Job Plugin
(also known as &lt;em&gt;Pipeline as YAML&lt;/em&gt;).
All these projects have a significant value to the Jenkins community.
They were focused on areas which have been discussed in the community for a long time,
but which had no progress so far.
Google Summer of Code allowed us to kick-start these projects,
and to make significant progress there.
All projects have been released and made available in the Jenkins community (common or experimental update centers).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In total there were 9 blogposts about GSoC projects on jenkins.io,
and also 2 &lt;a href=&quot;https://www.meetup.com/Jenkins-online-meetup&quot;&gt;Jenkins Online Meetups&lt;/a&gt;.
GSoC results have been also presented at DevOps World - Jenkins World conference and the contributor summit.&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;
  &lt;iframe src=&quot;https://docs.google.com/presentation/d/1YiN4nbc_uIt6L7iZ6VckF8sCPBAp1dqBkFexM7uAuiQ/embed?start=false&amp;amp;loop=false&amp;amp;delayms=60000&quot; frameborder=&quot;0&quot; width=&quot;720&quot; height=&quot;434&quot; allowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;code-coverage-api-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#code-coverage-api-plugin&quot;&gt;&lt;/a&gt;Code Coverage API Plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Student: &lt;a href=&quot;https://github.com/cizezsy&quot;&gt;Shenyu Zheng&lt;/a&gt;, Henan University, China&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mentors:
&lt;a href=&quot;https://github.com/jeffpearce&quot;&gt;Jeff Pearce&lt;/a&gt;,
&lt;a href=&quot;https://github.com/christ66&quot;&gt;Steven Christou&lt;/a&gt;,
&lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Oleg Nenashev&lt;/a&gt;,
&lt;a href=&quot;https://github.com/Supun94&quot;&gt;Supun Wanniarachchi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/gsoc/2018/code-coverage-api-plugin/&quot;&gt;Project page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many code coverage plugins in Jenkins: Cobertura, JaCoCo, Emma, etc., etc.
The problem with these plugins is that each of them implements all code coverage features on their own.
So you get different feature sets, UIs, CLI commands and REST APIs.
The idea of this project was to unify the existing functionality and offer a new API plugin which other plugins could extend.
It would help to simplify existing plugin and to create new plugins for coverage tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The project has started really well, and we had the first demo after a week of coding.
Then Shenyu continued extending the plugin’s functionality over coding periods.
Here is the list of the key features offered by the plugin:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flexible data structure for defining and storing coverage metrics within Jenkins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Coverage charts and trends&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source code navigation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REST API for retrieving coverage stats and trends&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Report aggregation for parallel steps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extension points which allow integrating other plugins&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the Code Coverage API Plugin,
Shenyu added integration to the &lt;a href=&quot;https://plugins.jenkins.io/cobertura&quot;&gt;Cobertura Plugin&lt;/a&gt; and also created a new &lt;a href=&quot;https://github.com/jenkinsci/llvm-cov-plugin&quot;&gt;llvm-cov plugin&lt;/a&gt; which is expected to be released soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After GSoC Shenyu continued contributing to the Jenkins project.
He works on the Code Coverage API plugin and also participates in the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs/chinese-localization/&quot;&gt;Chinese Localization SIG&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;simple-pull-request-job-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#simple-pull-request-job-plugin&quot;&gt;&lt;/a&gt;Simple Pull-Request Job Plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Student: &lt;a href=&quot;https://github.com/gautamabhishek46/&quot;&gt;Abhishek Gautam&lt;/a&gt;, Visvesvaraya National Institute of technology, India&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mentors:
&lt;a href=&quot;https://github.com/martinda&quot;&gt;Martin d’Anjou&lt;/a&gt;,
&lt;a href=&quot;https://github.com/Jeff-Symphony&quot;&gt;Jeff Knurek&lt;/a&gt;,
&lt;a href=&quot;https://github.com/kwhetstone&quot;&gt;Kristin Whetstone&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/gsoc/2018/simple-pull-request-job-plugin/&quot;&gt;Project page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This project focused on introducing a way to
easily define pull-request build job definitions in YAML.
This project has been shaped a lot during the application period and community bonding,
so that the project fit the existing Jenkins Ecosystem better.
Finally it was decided to build the new plugin on the top of &lt;a href=&quot;https://plugins.jenkins.io/workflow-multibranch&quot;&gt;Pipeline: Multi-Branch Plugin&lt;/a&gt;.
There was also an idea to offer extra syntax sugar, templating and automatic resolution for common flows,
so that users need less time to define Pipelines for common use-cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin allows defining Pipeline jobs as YAML being stored in SCM.
Original design presumed a new job type,
but during community bonding and Phase 1 prototyping it was decided to build the plugin on the top of the existing Pipeline ecosystem and extension points.
Currently the plugin generates Declarative Pipeline code from YAML so that it gets a lot of Pipeline features out-of-the box.
In addition to that, Simple Pull Request Job Plugin uses a an engine provided by the &lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin&quot;&gt;Configuration as Code plugin&lt;/a&gt; to convert YAML snippets
to Pipeline step definitions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin has been well described by Abhishek in his &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/14/simple-pull-request-plugin-final-evaluation/&quot;&gt;Pipeline as YAML&lt;/a&gt; blogpost in August.
Currently it is available in the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/doc/developer/publishing/releasing-experimental-updates/&quot;&gt;Experimental Update Center&lt;/a&gt; as an alpha version.
Pham Vu Tuan, one of our GSoC students, have also joined the plugin team.
At the DevOps World - Jenkins World hackfest we had discussions with the Jenkins Pipeline team,
and we have a plan towards making this plugin available as an Incubated Pipeline project.
The final implementation may change,
but in any case the project gave us a working prototype and a lot of information about  obstacles we need to resolve.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;remoting-over-apache-kafka&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#remoting-over-apache-kafka&quot;&gt;&lt;/a&gt;Remoting over Apache Kafka&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Student: &lt;a href=&quot;https://github.com/pvtuan10&quot;&gt;Pham Vu Tuan&lt;/a&gt;, Nanyang Technological University, Singapore&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mentors:
&lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Oleg Nenashev&lt;/a&gt;,
&lt;a href=&quot;https://github.com/Supun94&quot;&gt;Supun Wanniarachchi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/gsoc/2018/remoting-over-message-bus/&quot;&gt;Project page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last but not least, Remoting over Kafka is another challenging project we had.
To implement communication between its masters and agents, Jenkins widely uses home-grown protocol implementations based on TCP
(&lt;a href=&quot;https://github.com/jenkinsci/remoting/blob/master/docs/protocols.md&quot;&gt;JNLP 1..4 protocols&lt;/a&gt;).
There are some performance and stability implementations,
and there have been discussions about using an industry-standard message bus or queue.
Pham Vu Tuan proposed to use Apache Kafka for it,
and after some experiments during community bonding and first coding phase we agreed to go forward with this implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During his project Vu Tuan extended Jenkins Core and Remoting to allow implementing an agent communication channel in a plugin.
Then he has created a new &lt;a href=&quot;https://plugins.jenkins.io/remoting-kafka&quot;&gt;Remoting over Kafka plugin&lt;/a&gt;
which is now available in the main Jenkins Update cente.
Once the plugin is installed, it is possible to connect to agents over Apache Kafka and execute all types of Jenkins jobs there.
There are also official &lt;a href=&quot;https://hub.docker.com/r/jenkins/remoting-kafka-agent/&quot;&gt;jenkins/remoting-kafka-agent&lt;/a&gt; images available on DockerHub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vu Tuan continued contributing to the Jenkins project after GSoC, currently he maintains the Remoting over Kafka plugin.
He visited the &lt;a href=&quot;https://www.cloudbees.com/devops-world/san-francisco&quot;&gt;DevOps World - Jenkins World US&lt;/a&gt; conference in September, presented his GSoC project at the
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/07/25/contributor-summit/&quot;&gt;Jenkins Contributor Summit&lt;/a&gt;.
You can find his slides &lt;a href=&quot;https://docs.google.com/presentation/d/1drRIDNvDKdBE-VuuLFXlWRB0NhSFr1aWrg2p8qrF3co/edit?usp=sharing&quot;&gt;here&lt;/a&gt;.
After the conference he also participated in the hackfest where he helped to migrate Jenkins' DNS services to Microsoft Azure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-could-we-do-better&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-could-we-do-better&quot;&gt;&lt;/a&gt;What could we do better?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the end of GSoC we had a &lt;a href=&quot;https://docs.google.com/document/d/1sJ9KIYHUoFWWE9HmoZC7HPDxm2i3uMFGQ2KKZ_1TTjk/edit?usp=sharing&quot;&gt;Retrospective&lt;/a&gt; with GSoC students and mentors.
We discussed the issues we encountered during the projects,
and ways to improve the student and mentor experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Main takeaways for us:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GSoC projects should be aligned with &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs&quot;&gt;Jenkins Special Interest Groups (SIGs)&lt;/a&gt; or &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects&quot;&gt;subprojects&lt;/a&gt; in order to get a wider list of stakeholders
Projects should be aligned with SIG priorities when possible&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In addition to GSoC SIG meetings and Jenkins Online Meetups during student evaluation,
we should also run regular status updates within SIGs so that there more contributors involved in projects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We should invest more time into forming mentor teams before the application period starts.
This year there were changes in mentor teams after the community bonding started, and it complicated the work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We should pay more attention to student eligibility.
This year we started from 4 projects, but unfortunately one project (EDA plugins for Jenkins) got cancelled due to the visa limitations the student had.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We should do regular office hours for mentors/students so that it is possible to exchange information between GSoC projects within the organization.
This year we cancelled them at the end of phase and relied only on regular project meetings and mailing lists, but this is not enough.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For me personally the main takeaway is also to reduce direct involvement into the project as a mentor and technical advisor.
Doing org administration, logistics and mentorship is not good from a bus factor PoV,
and I believe I was pushing my vision too hard in few cases.
Will do my best to prevent it next year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to share your feedback and ideas,
please reach out to us using the &lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkinsci-gsoc-all-public&quot;&gt;GSoC mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-next&quot;&gt;&lt;/a&gt;What’s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to improve GSoC organization in Jenkins,
we have have created a &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs/gsoc&quot;&gt;GSoC Special Interest Group&lt;/a&gt; which will be running non-stop as other SIGs in Jenkins.
The objective of the SIG is to organize GSoC, work with potential students/mentors,
and to help students stay involved in the community after GSoC ends.
In this SIG we will have monthly meetings to sync-up on GSoC.
If you are interested to contribute, please join the SIG.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;According to the &lt;a href=&quot;https://docs.google.com/document/d/1sJ9KIYHUoFWWE9HmoZC7HPDxm2i3uMFGQ2KKZ_1TTjk/edit?usp=sharing&quot;&gt;Retrospective&lt;/a&gt;, next year we plan to invest more
into communication with mentors.
We will also try to tie new project proposals to Jenkins
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs&quot;&gt;Special Interest Groups&lt;/a&gt; so that the students become a part
of ongoing coordinated efforts.
This weekend Martin d’Anjou, Jeff Pearce and me are participating in the GSoC Mentor summit to share experiences and to study from other GSoC organizations.
On October 17 we will have a GSoC SIG meeting to discuss our experience and to discuss next steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to that,
Jenkins Google Summer of Code will be presented at &lt;a href=&quot;https://www.cloudbees.com/devops-world/nice&quot;&gt;DevOps World - Jenkins World Nice&lt;/a&gt; and at the contributor summit.
If you plan to visit the conference and you are interested to participate in Google Summer of Code and other community activities,
please join us at the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/21/contributor-summit-nice/&quot;&gt;contributor summit&lt;/a&gt; or stop by at the community booth.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And, elephant in the room…​ GSoC 2019.
Of course we are going to apply, stay tuned for new announcements.
We have already started collecting project ideas for the next year.
If you are interested to participate as a student or mentor,
please reach out to us using the &lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkinsci-gsoc-all-public&quot;&gt;GSoC SIG mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/10/12/hackathons-in-october/</id>
<title>Jenkins Hackathons in October</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-10-12T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/10/12/hackathons-in-october/" />
<author>
<name>oleg_nenashev</name>
</author>
<category term="events"></category>
<category term="community"></category>
<category term="hacktoberfest"></category>
<summary>
Traditionally there are a lot of events happening in the Jenkins organization in Autumn.
I would like to share some information about the upcoming hackathons.


Online Event: Hacktoberfest


As you probably know, there is an ongoing Hacktoberfest event.
The Jenkins project is participating in it and everybody is welcome to contribute to Jenkins as a part of this event.
The event lasts from October 01 to October 31,
and you can can join it at any time.


See this blogpost for more information about Hacktoberfest in the Jenkins project.




Onsite Hackathons


Hacktoberfest is not the only event happening in the Jenkins community this month,
there are also a number of...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Traditionally there are a lot of events happening in the Jenkins organization in Autumn.
I would like to share some information about the upcoming hackathons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;online-event-hacktoberfest&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#online-event-hacktoberfest&quot;&gt;&lt;/a&gt;Online Event: Hacktoberfest&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you probably know, there is an ongoing &lt;a href=&quot;https://hacktoberfest.digitalocean.com/&quot;&gt;Hacktoberfest&lt;/a&gt; event.
The Jenkins project is participating in it and everybody is welcome to contribute to Jenkins as a part of this event.
The event lasts from October 01 to October 31,
and you can can join it at any time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/10/01/hacktoberfest/&quot;&gt;this blogpost&lt;/a&gt; for more information about Hacktoberfest in the Jenkins project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;onsite-hackathons&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#onsite-hackathons&quot;&gt;&lt;/a&gt;Onsite Hackathons&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hacktoberfest is not the only event happening in the Jenkins community this month,
there are also a number of upcoming on-site events:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Oct 19 - Copenhagen, Denmark&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jenkins Configuration as Code hackathon at
&lt;a href=&quot;https://www.code-conf.com/2018/day-of-jenkins-as-code/&quot;&gt;Day of Jenkins [as code&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Registration: all conference participants can attend&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oct 22 - Nice, France - Hackathon at
&lt;a href=&quot;https://www.cloudbees.com/devops-world/nice&quot;&gt;DevOps World - Jenkins World Nice&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RSVP &lt;a href=&quot;https://www.meetup.com/jenkinsmeetup/events/255555426/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure to also attend the &lt;a href=&quot;https://www.meetup.com/jenkinsmeetup/events/253810578/&quot;&gt;Jenkins Contributor Summit&lt;/a&gt; on Oct 23 ;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oct 27 - Beijing, China&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RSVP &lt;a href=&quot;https://www.meetup.com/Beijing-Jenkins-Area-Meetup/events/255607288/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oct 30 - Neuchatel, Switzerland - Hacktoberfest: Jenkins &amp;amp; Friends event (Swiss Jenkins Area meetup)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RSVP &lt;a href=&quot;https://www.meetup.com/Swiss-Jenkins-Area-Meetup/events/255345695/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All contributions during these in-person events qualify as
&lt;a href=&quot;https://hacktoberfest.digitalocean.com/&quot;&gt;Hacktoberfest&lt;/a&gt; contributions as well. :)
More events will also be announced later in the year,
e.g. we traditionally do a hackfest in Brussels after FOSDEM in February.
Follow our developer mailing lists and social media to receive announcements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/10/10/security-updates/</id>
<title>Important security updates for Jenkins</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-10-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/10/10/security-updates/" />
<author>
<name>daniel-beck</name>
</author>
<category term="core"></category>
<category term="security"></category>
<summary>
We just released security updates to Jenkins, versions 2.146 and 2.138.2, that fix multiple security vulnerabilities.


For an overview of what was fixed, see the security advisory.
For an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.


Further improvements

In addition to the security fixes listed in the security advisory, we also applied multiple improvements that make future security vulnerabilities more difficult, or even impossible to exploit.


One such improvement concerns cross-site scripting vulnerabilities, and comes with a risk of regressions.


Jenkins uses a fork of Jelly for the vast majority of the views it renders.
Since 2011,...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We just released security updates to Jenkins, versions 2.146 and 2.138.2, that fix multiple security vulnerabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For an overview of what was fixed, see the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/security/advisory/2018-10-10&quot;&gt;security advisory&lt;/a&gt;.
For an overview on the possible impact of these changes on upgrading Jenkins LTS, see our &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/doc/upgrade-guide/2.138/#upgrading-to-jenkins-lts-2-138-2&quot;&gt;LTS upgrade guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;further-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#further-improvements&quot;&gt;&lt;/a&gt;Further improvements&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the security fixes listed in the security advisory, we also applied multiple improvements that make future security vulnerabilities more difficult, or even impossible to exploit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One such improvement concerns cross-site scripting vulnerabilities, and comes with a risk of regressions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins uses a fork of &lt;a href=&quot;https://commons.apache.org/proper/commons-jelly/&quot;&gt;Jelly&lt;/a&gt; for the vast majority of the views it renders.
Since 2011, it includes a feature that lets view authors opt in or out of automatic escaping of variable values for rendering in HTML, and since 2016, the plugin build tooling requires that views explicitly specify whether to apply this automatic escaping.
Details are available in &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/doc/developer/security/xss-prevention/&quot;&gt;the developer documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Until now, if views do not declare whether to automatically escape, they were rendered without automatic escaping, and developers were expected to explicitly escape every variable reference that was not supposed to contain markup.
This has resulted in a number of cross-site scripting (XSS) vulnerabilities, most recently &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/security/advisory/2018-09-25/#SECURITY-1130&quot;&gt;SECURITY-1130 in Job Config History Plugin&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For that reason, we have decided to enable this automatic escaping by default if plugins do not specify a preference.
This can result in problems with some plugins if they need their output to remain unescaped.
We expect that those plugins will adapt pretty quickly to this change, as the fix is typically straightforward.
We track known affected plugins and their status on &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Plugins+affected+by+2018-10-10+Stapler+security+hardening&quot;&gt;the Jenkins wiki&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the mean time, users can set the &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Features+controlled+by+system+properties&quot;&gt;system property&lt;/a&gt; &lt;code&gt;org.kohsuke.stapler.jelly.CustomJellyContext.escapeByDefault&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; to disable this additional protection.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/10/09/telemetry/</id>
<title>Improving Jenkins Release Quality using Uplink Telemetry
</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-10-09T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/10/09/telemetry/" />
<author>
<name>daniel-beck</name>
</author>
<category term="core"></category>
<summary>
One of the major strengths of Jenkins is its customizability and extensibility.
With its plugin ecosystem and long list of (possibly hidden) options, Jenkins can be used for a wide range of use cases.


The downside of all this flexibility is that, not knowing how people use Jenkins, we mostly rely on issues filed in our bug tracker to know when things go wrong.
And over the years, quite a few things have gone wrong.
The worst of these have been security fixes that have had unintended side effects.
Unlike regular changes, it&#8217;s not really feasible to roll back security fixes, so users have sometimes...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the major strengths of Jenkins is its customizability and extensibility.
With its plugin ecosystem and long list of (possibly hidden) options, Jenkins can be used for a wide range of use cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The downside of all this flexibility is that, not knowing how people use Jenkins, we mostly rely on issues filed in our bug tracker to know when things go wrong.
And over the years, quite a few things have gone wrong.
The worst of these have been security fixes that have had unintended side effects.
Unlike regular changes, it’s not really feasible to roll back security fixes, so users have sometimes had to choose between security and functionality.
But even changes developed in the open, such as the introduction of &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/01/13/jep-200/&quot;&gt;JEP-200&lt;/a&gt;, haven’t gone as smoothly as we hoped.
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/31/shifting-gears/&quot;&gt;With big changes in the works&lt;/a&gt;, it’s more important than ever for us to have a better idea how Jenkins is used, so that we can deliver major changes safely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/evergreen/&quot;&gt;Jenkins Evergreen&lt;/a&gt; solves this to some degree by being always connected to the Jenkins project and reporting back telemetry (mostly errors) allowing us to quickly react and provide fixes.
But that project is still pretty new, and its goal of being a more standardized Jenkins does not represent the breadth of configurations of the general user base.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;uplink-telemetry&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#uplink-telemetry&quot;&gt;&lt;/a&gt;Uplink telemetry&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we recently extended the existing, very limited anonymous usage statistics by adding a simple, extensible telemetry reporting client.
We’re calling it &lt;em&gt;Uplink telemetry&lt;/em&gt;, based on the name of &lt;a href=&quot;https://github.com/jenkins-infra/uplink/&quot;&gt;the service it reports its data to&lt;/a&gt;.
It made its debut in Jenkins 2.143.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Uplink telemetry is designed to collect data in &lt;em&gt;trials&lt;/em&gt;, which are defined as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a well defined set of technical data with a specific purpose&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a start and end date of the collection&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Detailed information explaining the scope and purpose of currently active trials is available in the inline help for the usage statistics control in the global configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-10-09/telemetry.png&quot; alt=&quot;Screenshot of detailed Uplink telemetry trial description in the Jenkins inline help&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, opting out of anonymous usage statistics there also disables the submission of Uplink telemetry.
And while Uplink trials report a per-instance UUID to help with collation (e.g. removal of duplicate submissions), that UUID is exclusively used for this purpose, and independent of all other properties of an instance.
This prevents us from correlating reported data with specific instances.
These measures are in place to strike a balance between the need to understand how Jenkins is used and respecting users' privacy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;improving-jenkins-through-real-world-data&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#improving-jenkins-through-real-world-data&quot;&gt;&lt;/a&gt;Improving Jenkins through real-world data&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re already created our first trial.
Jenkins 2.143 includes a trial to gather information about how common it is for instances to use Java system properties to disable (parts of) security fixes.
When we publish a security fix and we’re not completely certain it is safe to apply for everyone, we add another of these options — just in case.
As you can imagine, quite a few of these hidden options exist.
Until now, user feedback in our issue tracker was the only way we could estimate the need for any of these options.
With Uplink, Jenkins will report that information to us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The trial is scheduled to run for the next six weeks, enough to hopefully gather this information from a large number of users of both LTS and weekly releases.
Our hope is that we will be able to remove some of these options entirely, as they might not be needed after all.
For others, we might need to consider elevating them to supported features, or finding better solutions obviating the need for them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the future, I will publish of some of what we have learned from the first trial running through Uplink telemetry.
I look forward to Jenkins continuing to improve with real-world data informing our future decisions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/10/01/hacktoberfest/</id>
<title>Hacktoberfest 2018. Contribute to Jenkins!</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-10-01T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/10/01/hacktoberfest/" />
<author>
<name>oleg_nenashev</name>
</author>
<category term="hacktoberfest"></category>
<category term="event"></category>
<category term="community"></category>
<category term="newcomer"></category>
<summary>
Once again October has arrived.
That means the regular Hacktoberfest event is back!
This year it will be the fifth installment.
During this one-month hackathon you can support open-source and earn a limited edition swag.


On behalf of the Jenkins project,
we invite you to participate in Hacktoberfest and to work on the project.
We welcome all contributors, regardless of their background and Jenkins experience.







Quick start




Sign-up to Hacktoberfest on the event website.


Everything is set, just start creating pull-requests!






Contributing to Jenkins


There are many ways to
contribute to Jenkins during Hacktoberfest.
Generally, any pull requests in GitHub may qualify.
You can&#8230;&#8203;




Code - Contribute to the code or automated tests



Jenkins project codebase...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once again October has arrived.
That means the regular &lt;a href=&quot;https://hacktoberfest.digitalocean.com&quot;&gt;Hacktoberfest&lt;/a&gt; event is back!
This year it will be the fifth installment.
During this one-month hackathon you can support open-source and earn a limited edition swag.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On behalf of the Jenkins project,
we invite you to participate in Hacktoberfest and to work on the project.
We welcome all contributors, regardless of their background and Jenkins experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-hacktoberfest/social-card.png&quot; alt=&quot;Hacktoberfest&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quick-start&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quick-start&quot;&gt;&lt;/a&gt;Quick start&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Sign-up to Hacktoberfest on &lt;a href=&quot;https://hacktoberfest.digitalocean.com&quot;&gt;the event website&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everything is set, just start creating pull-requests!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributing-to-jenkins&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributing-to-jenkins&quot;&gt;&lt;/a&gt;Contributing to Jenkins&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many ways to
&lt;a href=&quot;https://jenkins.io/participate/&quot;&gt;contribute&lt;/a&gt; to Jenkins during Hacktoberfest.
Generally, any pull requests in GitHub may qualify.
You can…​&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code&lt;/strong&gt; - Contribute to the code or automated tests&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jenkins project codebase includes dozens of programming languages,
mostly Java, Groovy, and JavaScript + Go in Jenkins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can also find components in Ruby/Kotlin, and even native components in C/C++&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Document&lt;/strong&gt; - Improve documentation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Blog&lt;/strong&gt; - write &lt;a href=&quot;https://github.com/jenkins-infra/jenkins.io/blob/master/CONTRIBUTING.adoc#adding-a-blog-post&quot;&gt;blogposts&lt;/a&gt; about Jenkins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Localize&lt;/strong&gt; -  &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Internationalization&quot;&gt;Localize&lt;/a&gt; Jenkins components&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Design&lt;/strong&gt; - &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/artwork&quot;&gt;artwork&lt;/a&gt; and UI improvements also count!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Organize&lt;/strong&gt; - Organize a local meetup for Jenkins &amp;amp; Hacktoberfest (see below)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/participate/&quot;&gt;Contribute and Participate&lt;/a&gt; page for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;projects&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#projects&quot;&gt;&lt;/a&gt;Projects&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins project is spread across  several organizations on GitHub (jenkinsci, jenkins-x, jenkins-infra).
You are welcome contribute to &lt;strong&gt;any&lt;/strong&gt; repository in &lt;strong&gt;any&lt;/strong&gt; of those organizations,
however various components in Jenkins have differing review and delivery velocity.
Here is a list of Jenkins subprojects with maintainers who have committed to delivering quick reviews to Hackathon participants.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot; /&gt;
&lt;col style=&quot;width: 50%;&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Project/component&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Ideas and links&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/jenkinsci/jenkins&quot;&gt;Jenkins Core&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;There is always something to improve in Jenkins core itself.
  You can address various issues, improve the codebase,
  and add new features there.&lt;/p&gt;
&lt;p class=&quot;tableblock&quot;&gt;  &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt;,
  &lt;a href=&quot;https://issues.jenkins-ci.org/issues/?jql=project%20%3D%20JENKINS%20AND%20status%20in%20(Open%2C%20%22In%20Progress%22%2C%20Reopened)%20AND%20labels%20in%20(newbie-friendly)%20AND%20component%20in%20(core)&quot;&gt;newbie-friendly issues&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://jenkins.io&quot;&gt;Jenkins Website&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Extend and improve Jenkins documentation, add your own blogpost.&lt;/p&gt;
&lt;p class=&quot;tableblock&quot;&gt;  &lt;a href=&quot;https://github.com/jenkins-infra/jenkins.io/blob/master/CONTRIBUTING.adoc&quot;&gt;Contributing guidelines&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://jenkins-x.io/&quot;&gt;Jenkins X&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Try out the project and create new demos,
  extend documentation, and create new builders for your toolchains.&lt;/p&gt;
&lt;p class=&quot;tableblock&quot;&gt;  &lt;a href=&quot;https://jenkins-x.io/contribute/&quot;&gt;Contributing guidelines&lt;/a&gt;,
  &lt;a href=&quot;https://github.com/jenkins-x/jx/blob/master/docs/contributing/hacking.md&quot;&gt;Quick start&lt;/a&gt;,
  &lt;a href=&quot;https://jenkins-x.io/getting-started/create-custom-builder/&quot;&gt;creating custom builders&lt;/a&gt;,
  &lt;a href=&quot;https://github.com/jenkins-x/jx/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&quot;&gt;newbie-friendly issues&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin&quot;&gt;Jenkins Configuration-as-Code Plugin&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Contribute to the fresh new plugin: improve the codebase,
  add demos and &lt;a href=&quot;https://issues.jenkins-ci.org/issues/?jql=project%20%3D%20JENKINS%20AND%20status%20in%20(Open%2C%20%22In%20Progress%22%2C%20Reopened)%20AND%20labels%20in%20(jcasc-compatibility)&quot;&gt;plugin integrations&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;tableblock&quot;&gt;  &lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/CONTRIBUTING.md&quot;&gt;Contributing to JCasC&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/evergreen/&quot;&gt;Jenkins Evergreen&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Try and improve the recently released Evergreen project -
  an automatically updating rolling distribution system for Jenkins.&lt;/p&gt;
&lt;p class=&quot;tableblock&quot;&gt;  &lt;a href=&quot;https://github.com/jenkins-infra/evergreen/blob/master/HACKING.adoc&quot;&gt;Quick start&lt;/a&gt;,
  &lt;a href=&quot;https://issues.jenkins-ci.org/issues/?jql=project%20%3D%20JENKINS%20AND%20status%20in%20(Open%2C%20%22In%20Progress%22%2C%20Reopened)%20AND%20labels%20in%20(newbie-friendly)%20AND%20component%20in%20(evergreen%2C%20evergreen-plugin)&quot;&gt;newbie-friendly issues&lt;/a&gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java 11 support (&lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/211/README.adoc&quot;&gt;JEP-211&lt;/a&gt;)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Contribute to Jenkins core and plugins to enable Java 11 in future releases.
  You can help to create new packaging, new features, testing flows, or cleanup issues
  &lt;a href=&quot;https://github.com/search?q=org%3Ajenkinsci+setAccessible%28true%29+path%3A%22src%2Fmain%22&amp;amp;type=Code&quot;&gt;Illegal Reflective Access&lt;/a&gt; in the code.&lt;/p&gt;
&lt;p class=&quot;tableblock&quot;&gt;  &lt;a href=&quot;https://gitter.im/jenkinsci/platform-sig&quot;&gt;Gitter chat&lt;/a&gt;,
  &lt;a href=&quot;https://issues.jenkins-ci.org/issues/?jql=project%20%3D%20JENKINS%20AND%20status%20in%20(Open%2C%20%22In%20Progress%22%2C%20Reopened)%20AND%20labels%20%3D%20newbie-friendly%20AND%20labels%20%3D%20java11&quot;&gt;newbie-friendly issues&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Docker Packaging&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Add new features and improvements to Jenkins Docker packaging:
  &lt;a href=&quot;https://github.com/jenkinsci/docker&quot;&gt;Jenkins Master&lt;/a&gt;,
  &lt;a href=&quot;https://github.com/jenkinsci/docker-jnlp-slave&quot;&gt;Agents&lt;/a&gt;,
  and other components.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs/chinese-localization/&quot;&gt;Chinese Localization SIG&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Contribute to the new &lt;a href=&quot;https://github.com/jenkins-infra/cn.jenkins.io&quot;&gt;Website&lt;/a&gt; and
  the &lt;a href=&quot;https://github.com/jenkinsci/localization-zh-cn-plugin&quot;&gt;Simplified Chinese Localization plugin&lt;/a&gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/artwork&quot;&gt;Jenkins Artwork&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Create new images and logos for &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/jam/&quot;&gt;Jenkins area meetups&lt;/a&gt;,
  &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/&quot;&gt;subprojects&lt;/a&gt;, and plugins.
  You can also contribute new graphics to plugins.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that this is not a full list,
and the list will be extended depending on the interest from maintainers.
You are welcome to contribute to existing Jenkins plugins…​
and even to create new ones.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;local-events&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#local-events&quot;&gt;&lt;/a&gt;Local events&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hacktoberfest is an online event,
but there are many events being organized by open-source communities.
You can join one of &lt;a href=&quot;https://hacktoberfest.digitalocean.com/#events&quot;&gt;these events&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also encourage &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/jam/&quot;&gt;Jenkins Area Meetup&lt;/a&gt; organizers to
run Jenkins-specific events in October (workshops, hackergartens).
If you are not a meetup organizer but want to host a meetup,
you can reach out to the organizers via meetup.com resources
(you can find a JAM &lt;a href=&quot;https://www.meetup.com/pro/jenkins&quot;&gt;here&lt;/a&gt;).
Check out the &lt;a href=&quot;https://hacktoberfest.digitalocean.com/eventkit&quot;&gt;Hacktoberfest Event Kit&lt;/a&gt;
for more info.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;faq&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#faq&quot;&gt;&lt;/a&gt;FAQ&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find Hacktoberfest FAQ &lt;a href=&quot;https://hacktoberfest.digitalocean.com/faq&quot;&gt;here&lt;/a&gt;.
Below you can find answer to some Jenkins-specific questions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;q-i-am-new-to-jenkins-how-do-i-start&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#q-i-am-new-to-jenkins-how-do-i-start&quot;&gt;&lt;/a&gt;Q: I am new to Jenkins, how do I start?&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are new to Jenkins,
you could start by fixing some small and well described issues.
There are lists of such newbie-friendly issues, see the links in the table above.
You can also submit your own issue and propose a fix.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;q-i-want-to-work-on-my-own-plugin-is-it-fine&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#q-i-want-to-work-on-my-own-plugin-is-it-fine&quot;&gt;&lt;/a&gt;Q: I want to work on my own plugin, is it fine?&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yes, it is fine!
Any contributions count, your role in a repository does not matter.
Just make sure you create pull requests instead of direct pushes
(hint: it’s a best practice if you have a CI configured for your repository).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;q-how-to-find-documentation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#q-how-to-find-documentation&quot;&gt;&lt;/a&gt;Q: How to find documentation?&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins project contains lots of materials about contributing to the project.
Here are some links which may help:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/participate/&quot;&gt;Participate&lt;/a&gt; - landing page for newcomer contributors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2017/08/07/intro-to-plugin-development/&quot;&gt;Plugin Development Tutorials&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/doc/developer/&quot;&gt;Developer Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/jenkinsci/jenkins&quot;&gt;Gitter channel&lt;/a&gt; for Q&amp;amp;A&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Projects in the table above also have their own documentation to help newcomers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;q-how-do-i-get-reviews&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#q-how-do-i-get-reviews&quot;&gt;&lt;/a&gt;Q: How do I get reviews?&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All projects in the list above are monitored by their maintainers,
and you will likely get a review within few days.
Reviews in other repositories and plugins may take longer.
In the case of delays, ping us in the &lt;a href=&quot;https://gitter.im/jenkinsci/hacktoberfest-help&quot;&gt;hacktoberfest-help&lt;/a&gt; channel in Gitter.
Unmerged pull-requests also count in Hacktoberfest,
so merge delays won’t block you from getting prizes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;q-i-am-stuck-how-do-i-get-help&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#q-i-am-stuck-how-do-i-get-help&quot;&gt;&lt;/a&gt;Q: I am stuck. How do I get help?&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For non-technical questions (process and general direction) use our &lt;a href=&quot;https://gitter.im/jenkinsci/hacktoberfest-help&quot;&gt;hacktoberfest-help&lt;/a&gt;
channel in Gitter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For technical questions please use the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/chat&quot;&gt;IRC chat&lt;/a&gt;,
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/mailing-lists/&quot;&gt;Developer mailing lists&lt;/a&gt;,
or the main &lt;a href=&quot;https://gitter.im/jenkinsci/jenkins&quot;&gt;jenkinsci/jenkins&lt;/a&gt; channel.
Many subprojects also have their own chats.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;q-does-jenkins-project-send-special-swag&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#q-does-jenkins-project-send-special-swag&quot;&gt;&lt;/a&gt;Q: Does Jenkins project send special swag?&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All participants will get swag from Hacktoberfest organizers if they create at least5 pull requests.
Jenkins project may also distribute some swag to top contributors,
depending on the budget and contributions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/18/automatically-upgrading-with-evergreen/</id>
<title>Continuously delivering an easy-to-use Jenkins with Evergreen</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-09-18T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/18/automatically-upgrading-with-evergreen/" />
<author>
<name>rtyler</name>
</author>
<category term="jenkinsworld"></category>
<category term="jenkinsworld2018"></category>
<category term="evergreen"></category>
<summary>
When I first wrote about Jenkins
Evergreen, which was then referred to as "Jenkins Essentials", I mentioned a
number of future developments which in the subsequent months have become
reality. At this year&#8217;s DevOps World - Jenkins World in San Francisco, I will
be sharing more details on the philosophy behind Jenkins Evergreen, show off
how far we have come, and discuss where we&#8217;re going with this radical
distribution of Jenkins.





As discussed in my first blog post, and
JEP-300,
the first two pillars of Jenkins Evergreen have been the primary focus of our
efforts.


Automatically Updated Distribution

Perhaps unsurprisingly, implementing the mechanisms necessary for safely and
automatically updating a Jenkins distribution, which...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I first &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/04/06/jenkins-essentials/&quot;&gt;wrote about Jenkins
Evergreen&lt;/a&gt;, which was then referred to as &quot;Jenkins Essentials&quot;, I mentioned a
number of future developments which in the subsequent months have become
&lt;em&gt;reality&lt;/em&gt;. At this year’s DevOps World - Jenkins World in San Francisco, I will
be sharing more details on the philosophy behind Jenkins Evergreen, show off
how far we have come, and discuss where we’re going with this radical
distribution of Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/evergreen/magician_256.png&quot; alt=&quot;Jenkins Evergreen&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As discussed in my first blog post, and
&lt;a href=&quot;https://github.com/jenkinsci/jep/tree/master/jep/300&quot;&gt;JEP-300&lt;/a&gt;,
the first two pillars of Jenkins Evergreen have been the primary focus of our
efforts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;automatically-updated-distribution&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#automatically-updated-distribution&quot;&gt;&lt;/a&gt;Automatically Updated Distribution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Perhaps unsurprisingly, implementing the mechanisms necessary for safely and
automatically updating a Jenkins distribution, which includes core and plugins,
was and continues to be a sizable amount of work. In
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/13/speaker-blog-evergreen-safely-upgrading/&quot;&gt;Baptiste’s talk&lt;/a&gt;
he will be speaking about the details which make Evergreen &quot;go&quot; whereas
I will be speaking about &lt;em&gt;why&lt;/em&gt; an automatically updating distribution is
important.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As continuous integration and continuous delivery have become more commonplace,
and fundamental to modern software engineering, Jenkins tends to live two
different lifestyles depending on the organization. In some organizations,
Jenkins is managed and deployed methodically with automation tools like Chef,
Puppet, etc. In many other organizations however, Jenkins is treated much more
like an &lt;em&gt;appliance&lt;/em&gt;, not unlike the office wireless router. Installed and so
long as it continues to do its job, people won’t think about it too much.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins Evergreen’s distribution makes the &quot;Jenkins as an Appliance&quot; model much
better for everybody by ensuring the latest feature updates, bug and security
fixes are always installed in Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, I believe Evergreen will serve another group we don’t adequately
serve at the moment: those who want Jenkins to behave much more like a
&lt;em&gt;service&lt;/em&gt;. We typically don’t consider &quot;versions&quot; of GitHub.com, we receive
incremental updates to the site and realize the benefits of GitHub’s on-going
development without ever thinking about an &quot;upgrade.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I believe Jenkins Evergreen can, and will provide that same experience.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;automatic-sane-defaults&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#automatic-sane-defaults&quot;&gt;&lt;/a&gt;Automatic Sane Defaults&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The really powerful thing about Jenkins as a platform is the broad variety of
patterns and practices different organizations may adopt. For newer users, or
users with common use-cases, that significant amount of flexibility can result
in a paradox of choice. With Jenkins Evergreen, much of the most common
configuration is automatically configured out of the box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Included is Jenkins Pipeline and Blue Ocean, by default. We also removed some
legacy functionalities from Jenkins while we were at it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are also utilizing some of the fantastic
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/jcasc/&quot;&gt;Configuration as Code&lt;/a&gt;
work, which recently had its 1.0 release, to automatically set sane defaults in
Jenkins Evergreen.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;status-quo&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#status-quo&quot;&gt;&lt;/a&gt;Status Quo&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The effort has made significant strides thus far this year, and we’re really
excited for people to start trying out Jenkins Evergreen. As of today,
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/evergreen&quot;&gt;Jenkins Evergreen&lt;/a&gt;
is ready for &lt;em&gt;early adopters&lt;/em&gt;. We &lt;strong&gt;do not&lt;/strong&gt; yet recommend using Jenkins
Evergreen for a production environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re at DevOps World - Jenkins World in San Francisco please come see
&lt;a href=&quot;https://devopsworldjenkinsworld2018.sched.com/event/F9Nn/safely-upgrading-jenkins-every-single-day&quot;&gt;Baptiste’s talk&lt;/a&gt; Wednesday at 3:45pm in Golden Gate Ballroom A. Or
&lt;a href=&quot;https://devopsworldjenkinsworld2018.sched.com/event/F9Nf/continuously-delivering-an-easy-to-use-jenkins-with-jenkins-evergreen&quot;&gt;my talk&lt;/a&gt; at 11:15am in Golden Gate Ballroom B.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you can’t join us here in San Francisco, we hope to hear your feedback and thoughts in our
&lt;a href=&quot;https://gitter.im/jenkins-infra/evergreen&quot;&gt;Gitter channel&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/17/jenkins-artwork/</id>
<title>Jenkins Artwork at the DevOps World | Jenkins World 2018 Community Booth</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-09-17T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/17/jenkins-artwork/" />
<author>
<name>ksenia-nenasheva</name>
</author>
<category term="jenkinsworld"></category>
<category term="jenkinsworld2018"></category>
<category term="artwork"></category>
<category term="community"></category>
<summary>
Hi all, this is my first blogpost on jenkins.io.
My name is Kseniia Nenasheva, I work as a Graphics Designer at CloudBees.
I have been using Jenkins since 2012 as a QA engineer, and I am happy to contribute to the project.
I have also submitted some patches to the core and plugins,
and probably you have seen some Jenkins logos created by me,
and some of you may even have them on your laptops.
By the way, Ron Burgundy is my favorite Jenkins logo.


This year I am going to DevOps World | Jenkins World in San Francisco.
During the conference I will be working at the...
</summary>
<content type="html">
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/artwork&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/logos/san-diego/256.png&quot; alt=&quot;256&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hi all, this is my first blogpost on jenkins.io.
My name is Kseniia Nenasheva, I work as a Graphics Designer at CloudBees.
I have been using Jenkins since 2012 as a QA engineer, and I am happy to contribute to the project.
I have also submitted some patches to the core and plugins,
and probably you have seen some Jenkins logos &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/artwork&quot;&gt;created by me&lt;/a&gt;,
and some of you may even have them on your laptops.
By the way, Ron Burgundy is my favorite Jenkins logo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year I am going to DevOps World | Jenkins World in San Francisco.
During the conference I will be working at the Jenkins community booth
and creating exclusive pictures with conference visitors and one of the Jenkins heroes.
So, if you come to our booth and share your Jenkins story, you can get a special picture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are interested to get a logo for your &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/jam/&quot;&gt;Jenkins Area Meetup&lt;/a&gt;
or an open-source project (including Jenkins plugins, of course),
please also stop by at the booth and share your ideas.
After the conference I will try to implement the most interesting proposals.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also meet me at the contributor summit on September 17.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/conferences/example-art.png&quot; alt=&quot;example art&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come meet Kseniia and other Jenkins contributors at
&lt;a href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;Jenkins World&lt;/a&gt; on September 16-19th in San Francisco and on October 22-25 in Nice.
register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/14/speaker-blog-jenkins-builds-jenkins/</id>
<title>Want to know how Jenkins builds Jenkins? Catch this session at DevOps World | Jenkins World next week in San Francisco!</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-09-14T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/14/speaker-blog-jenkins-builds-jenkins/" />
<author>
<name>olblak</name>
</author>
<category term="jenkinsworld"></category>
<category term="jenkinsworld2018"></category>
<category term="azure"></category>
<category term="infrastructure"></category>
<summary>
Next week Olivier Vernin from CloudBees and Brian Benz from Microsoft will be presenting a session at DevOps World | Jenkins World about how Microsoft has been working with Jenkins to build Jenkins plugins and produce Jenkins on Microsoft Azure.
These plugins run Jenkins on Azure Linux and Windows VMs, Kubernetes, azure App service, as well as deploy artifacts to those Azure platforms and more.
All are open source and available on GitHub.


Here&#8217;s our session, where we&#8217;ll be sharing successes and challenges of getting the infrastructure up and running:


Tuesday, September 18


Session: Developing and Delivering Jenkins in the cloud
11:15am - 12:00pm Brian Benz...
</summary>
<content type="html">
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/conferences/devops-world-2018.jpg&quot; alt=&quot;DevOps World | Jenkins World 2018&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next week &lt;a href=&quot;https://devopsworldjenkinsworld2018.sched.com/speaker/olivier_vernin.71uu3o1&quot;&gt;Olivier Vernin&lt;/a&gt; from CloudBees and &lt;a href=&quot;https://devopsworldjenkinsworld2018.sched.com/speaker/brian_benz.1yikcdif&quot;&gt;Brian Benz&lt;/a&gt; from Microsoft will be presenting a session at &lt;a href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;DevOps World | Jenkins World&lt;/a&gt; about how Microsoft has been working with Jenkins to build Jenkins plugins and produce Jenkins on Microsoft Azure.
These plugins run Jenkins on Azure Linux and Windows VMs, Kubernetes, azure App service, as well as deploy artifacts to those Azure platforms and more.
All are open source and available on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s our session, where we’ll be sharing successes and challenges of getting the infrastructure up and running:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tuesday, September 18&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://sched.co/G4qe&quot;&gt;Session: Developing and Delivering Jenkins in the cloud&lt;/a&gt;&lt;/strong&gt;
11:15am - 12:00pm &lt;a href=&quot;https://devopsworldjenkinsworld2018.sched.com/speaker/brian_benz.1yikcdif&quot;&gt;Brian Benz&lt;/a&gt; with &lt;a href=&quot;https://devopsworldjenkinsworld2018.sched.com/speaker/olivier_vernin.71uu3o1&quot;&gt;Olivier Vernin&lt;/a&gt;, CloudBees&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this session, we’ll discuss the real-life implementation of Jenkins' development and delivery infrastructure in the cloud as it has evolved from a mix of platforms to Microsoft Azure.
Expect a frank discussion of how issues that were encountered along the way were overcome, how the architecture has evolved, and what’s on the roadmap.
We’ll share important tips and tricks for implementing your own Jenkins infrastructure on any cloud, based on Jenkins' own experience with their implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See you in San Francisco!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come meet us at
&lt;a href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;DevOps World | Jenkins World 2018&lt;/a&gt; on September 16-19th in San Francisco.
We will be hanging out around the OSS space, eager to answer more questions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/14/kubernetes-and-secret-agents/</id>
<title>Jenkins and Kubernetes - Secret Agents in the Clouds</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-09-14T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/14/kubernetes-and-secret-agents/" />
<author>
<name>devmandy</name>
</author>
<category term="jenkinsworld"></category>
<category term="jenkinsworld2018"></category>
<category term="cloud-native"></category>
<category term="kubernetes"></category>
<summary>
This is a guest post by DevOps World | Jenkins World speaker
Mandy Hubbard.










At long last, the way we build and deploy software is finally changing and significantly so.
The days of the persnickety, prima donna build machine where monolithic applications were built, tested, and deployed are numbered.
And that is a "Good Thing (tm)" - a consequence of how we will meet the transformation goals of our businesses.
Modern applications consist of distributed services, often with multiple microservices that are developed and deployed independent of other services.
However, the only way to build these services with their own dependencies and schedules is to bake...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;em&gt;DevOps World | Jenkins World&lt;/em&gt; speaker
&lt;a href=&quot;https://devopsworldjenkinsworld2018.sched.com/speaker/mandy_hubbard.1y8j4r23&quot;&gt;Mandy Hubbard&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/conferences/devops-world-2018.jpg&quot; alt=&quot;DevOps World | Jenkins World 2018&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At long last, the way we build and deploy software is finally changing and significantly so.
The days of the persnickety, prima donna build machine where monolithic applications were built, tested, and deployed are numbered.
And that is a &quot;Good Thing (tm)&quot; - a consequence of how we will meet the transformation goals of our businesses.
Modern applications consist of distributed services, often with multiple microservices that are developed and deployed independent of other services.
However, the only way to build these services with their own dependencies and schedules is to bake in continuous integration and delivery from the beginning.
And as usual, your Jenkins platform is your friend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But let’s take a moment and think about that in the context of microservices, especially if you’ve only used Jenkins for monolithic applications.
You’ll be creating a greater number of individual Jenkins jobs that each run multiple times a day.
This is a significant process change, and it’s important to acknowledge this and change our approach to managing Jenkins to accommodate these changes.
It’s well within Jenkins’ capabilities, but you will need to think a little differently, and invest to close those last-mile deployment gaps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;evolution-of-my-jenkins-environment&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#evolution-of-my-jenkins-environment&quot;&gt;&lt;/a&gt;Evolution of my Jenkins Environment&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the biggest challenges I’ve faced as a DevOps practitioner is a long and evolving set of options to manage my Jenkins agent infrastructure.
With only a few large jobs you don’t really need to worry too much about your agents.
But when you’re orchestrating the CI/CD pipelines for dozens or even hundreds of services, optimizing efficiency and minimizing cost becomes important.
And that journey has allowed me to consider and test many different Jenkins build agent architectures over the years.
This journey may be familiar to you as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are the types of Jenkins environments I’ve run over the years.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Execute all the builds on the master.
Concentrate all the moving parts on one instance.
(I call this Hello Jenkins)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a Jenkins EC2 agent with all the required tools for building every service, and then clone it if I need to “scale” Jenkins.
(I call this the Monster Agent.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create an individual Jenkins EC2 agent for each service I need to build.
(I call this the Snowflake Agent.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run build steps in containers.
For example, launching agents in containers using the
&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Docker+Plugin&quot;&gt;Docker Plugin&lt;/a&gt; or using multi-stage Dockerfiles to encapsulate all the logic for building, testing and packaging an application.
They are both good first steps in container abstraction and allow you to easily copy artifacts from one container to another.
Of course, access to a Docker engine is required for either approach, and I’ve managed my Docker host(s) for running Jenkins agents several different ways:&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Run the Docker engine inside my Jenkins master container - Docker in Docker (DinD)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mount the Docker socket of the host on which my Jenkins master container runs, allowing agents to run as sibling or sidecar containers - Docker outside of Docker (DooD)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure a single external EC2 Docker host for the Jenkins master to use for launching builds in containers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamically launch agents using the EC2 plugin with an AMI that contains the Docker Engine and then run all the steps in a multi-stage Dockerfile&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All these approaches were attempts to get out of the business of curating and managing Jenkins agents and infrastructure, each with their own benefits and drawbacks.
But recently I begin working in a new Jenkins environment - Jenkins on Kubernetes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you’ve come to view Jenkins, build agents and jobs as containerized services, migrating platforms becomes much more straightforward.
And total disclaimer here - I had never used Kubernetes in my life, not even for side projects - when I set out to do this.
That said, it was surprisingly simple to create a Kubernetes cluster in Google Cloud Platform’s (GCP) GKE, launch a Jenkins master using a
&lt;a href=&quot;https://helm.sh/&quot;&gt;Helm&lt;/a&gt; chart and begin running build steps in Jenkins agents running in containers on my new Kubernetes cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;launch-agents-in-kubernetes-from-your-pipeline-scripts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#launch-agents-in-kubernetes-from-your-pipeline-scripts&quot;&gt;&lt;/a&gt;Launch agents in Kubernetes from your pipeline scripts&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The focus of this post and my Jenkins World talk for 2018, is to show you how to configure Jenkins to launch agents in Kubernetes from your pipeline scripts.
My examples assume you are launching your agents in the same Kubernetes cluster where your Jenkins master is running, but there are other options.
You’ll begin by installing the
&lt;a href=&quot;https://plugins.jenkins.io/kubernetes&quot;&gt;Kubernetes plugin&lt;/a&gt;.
As a bonus, when I installed Jenkins using the latest stable chart in the default Helm repository, the Kubernetes plugin was automatically installed for me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you get the Jenkins master running on your Kubernetes cluster, there are only a few configuration steps required and then you can begin launching ephemeral build agents on Kubernetes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configure-the-jenkins-master&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configure-the-jenkins-master&quot;&gt;&lt;/a&gt;Configure the Jenkins Master&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You’ll first need to create a credentials set for the Jenkins master to access the Kubernetes cluster.
To do this, perform the following steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;In the Jenkins UI, click the &lt;em&gt;Credentials&lt;/em&gt; link in the left-hand navigation pane&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the arrow next to &lt;em&gt;(global)&lt;/em&gt; in the &lt;em&gt;Stores scoped to Jenkins&lt;/em&gt; table (you have to hover next to the link to see the arrow)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;em&gt;Add Credentials&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under Kind, specify &lt;em&gt;Kubernetes Service Account&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leave the scope set to &lt;em&gt;Global&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click OK.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That’s it! This configuration allows the Jenkins master to use a Kubernetes service account to access the Kubernetes API.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;create-a-cloud-configuration-on-the-jenkins-master&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-a-cloud-configuration-on-the-jenkins-master&quot;&gt;&lt;/a&gt;Create a Cloud Configuration on the Jenkins Master&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next step is to create a cloud configuration for your K8s cluster.
(When I use K8s instead of Kubernetes it’s because it is quicker to type, not just for coolness.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;In the Jenkins UI, go to &lt;em&gt;Manage Jenkins&lt;/em&gt; → &lt;em&gt;Configure System&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scroll down until you see &lt;em&gt;Cloud settings&lt;/em&gt; and click the &lt;em&gt;Add a new cloud box&lt;/em&gt; and select &lt;em&gt;kubernetes&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following parameters must be set:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Name&lt;/strong&gt;: &amp;lt;your choice&amp;gt; - This defaults to &lt;code&gt;kubernetes&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes URL&lt;/strong&gt;: &lt;code&gt;https://kubernetes.default&lt;/code&gt; - This was automatically configured from the service account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes Namespace&lt;/strong&gt;: &lt;code&gt;default&lt;/code&gt; - Unless you are running your master in another namespace&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Credentials&lt;/strong&gt;:  Select the Kubernetes Service Account credentials you created in the previous step&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jenkins URL&lt;/strong&gt;: &lt;code&gt;http://&amp;lt;your_jenkins_hostname&amp;gt;:8080&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jenkins tunnel&lt;/strong&gt;: &lt;code&gt;&amp;lt;your_jenkins_hostname&amp;gt;:5555&lt;/code&gt; - This is the port that is used to communicate with an agent&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-09-14-secret-agents/image1.png&quot; alt=&quot;Kubernetes Configuration&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These were the only parameters I had to set to launch an agent in my K8s cluster.
You can certainly modify other parameters to tweak your environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that you’ve configured your Jenkins master so that it can access your K8s cluster, it’s time to define some pods.
A pod is the basic building block of Kubernetes and consists of one or more containers with shared network and storage.
Each Jenkins agent is launched as a Kubernetes pod.
It will always contain the default JNLP container that runs the Jenkins agent jar and any other containers you specify in the pod definition.
There are at least two ways to configure pod templates – in the Jenkins UI and in your pipeline script.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configure-a-pod-template-in-the-jenkins-ui&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configure-a-pod-template-in-the-jenkins-ui&quot;&gt;&lt;/a&gt;Configure a Pod Template in the Jenkins UI&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;In the Jenkins UI, go to &lt;em&gt;Manage Jenkins&lt;/em&gt; → &lt;em&gt;Configure Systems&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scroll down to the cloud settings you configured in the previous step&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the &lt;em&gt;Add Pod Template&lt;/em&gt; button and select &lt;em&gt;Kubernetes Pod Template&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter values for the following parameters:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Name&lt;/strong&gt;: &lt;code&gt;&amp;lt;your choice&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Namespace&lt;/strong&gt;: &lt;code&gt;default&lt;/code&gt; - unless you configured a different namespace in the previous step&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Labels&lt;/strong&gt;: &lt;code&gt;&amp;lt;your choice&amp;gt;&lt;/code&gt; - this will be used to identify the agent pod from your Jenkinsfiles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: Select &quot;&lt;em&gt;Use this node as much as possible&lt;/em&gt;&quot; if you would like for this pod to be your default node when no node is specified.
Select &quot;&lt;em&gt;Only build jobs with label matching expressions matching this node&lt;/em&gt;&quot; to use this pod only when its label is specified in the pipeline script&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The name of the pod template to inherit from&lt;/strong&gt; - you can leave this blank.
It will be useful once you gain experience with this configuration, but don’t worry about it for now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt;: The containers you want to launch inside this pod.
This is described in detail below.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;EnvVars&lt;/strong&gt;: The environment variables you would like to inject into your pod at runtime.
This is described in detail below.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Volumes&lt;/strong&gt;:  Any volumes you want to mount inside your pod.
This is described further below.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-09-14-secret-agents/image2.png&quot; alt=&quot;Kubernetes Pod Template&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Remember that a pod consists of one or more containers that live and die together.
The pod must always include a JNLP container, which is configured by default if you installed the master using the Helm Chart.
However, you will want to add containers with the tool chains required to build your application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;add-your-own-container-template&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#add-your-own-container-template&quot;&gt;&lt;/a&gt;Add Your Own Container Template&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;In the Jenkins UI, return to the pod template you created in the last step&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the &lt;em&gt;Add Container&lt;/em&gt; button and select &lt;em&gt;Container Template&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter values in the following fields:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Name&lt;/strong&gt;:  &lt;code&gt;&amp;lt;your choice&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Docker image&lt;/strong&gt;: any Docker image you’d like
For example, if you are building an application written in Go, you can enter &lt;code&gt;'golang:1.11-alpine3.8'&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Label&lt;/strong&gt;: Enter any label strings you’d like to use to refer to this container template in your pipeline scripts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Always pull image&lt;/strong&gt;: - Select this option if you want the plugin to pull the image each time a pod is created.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-09-14-secret-agents/image3.png&quot; alt=&quot;Container Template&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can leave the default values for the other parameters, but you can see that the plugin gives you fine-grained control over your pod and the individual containers that run within it.
Any values you might set in your Kubernetes pod configuration can be set via this plugin as well.
You can also inject your configuration data by entering raw YAML.
I encourage you not to get distracted by the sheer number of options you can configure in this plugin.
You only have to configure a small subset of them to get a working environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can click the &lt;em&gt;Add Environment Variable&lt;/em&gt; button in the container template to inject environment variables into a specific container.
You can click the &lt;em&gt;Add Environment Variable&lt;/em&gt; button in the pod template to inject environment variables into all containers in the pod.
The following environment variables are automatically injected into the default JNLP container to allow it to connect automatically to the Jenkins master:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;JENKINS_URL&lt;/code&gt;: Jenkins web interface url&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;JENKINS_JNLP_URL&lt;/code&gt;: url for the jnlp definition of the specific slave&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;JENKINS_SECRET&lt;/code&gt;: the secret key for authentication&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;JENKINS_NAME&lt;/code&gt;: the name of the Jenkins agent&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you click the &lt;em&gt;Add Volume&lt;/em&gt; button in the pod template, you’ll see several options for adding volumes to your pod.
I use the &lt;em&gt;Host Path Volume&lt;/em&gt; option to mount the docker socket inside the pod.
I can then run a container with the Docker client installed and use the host Docker socket to build and push Docker images.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, we’ve created a cloud configuration for our Kubernetes cluster and defined a pod consisting of one or more containers.
Now, how do we use this to run Jenkins jobs? We simply refer to the pod and containers by label in our Jenkins pipeline script.
We use the label we gave to the pod in the node block and the label for the container we wish to use in the container block.
The examples in this post use scripted pipeline, but you can achieve the same outcome using the declarative pipeline syntax:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test-pod&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Checkout&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
        checkout scm
    }
    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;){
        container(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;go-agent&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
            &lt;span style=&quot;color:#777&quot;&gt;// This is where we build our code.&lt;/span&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;defining-the-pod-in-the-jenkinsfile&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#defining-the-pod-in-the-jenkinsfile&quot;&gt;&lt;/a&gt;Defining the Pod in the Jenkinsfile&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Configuring a plugin through the UI is perfectly fine in a proof of concept.
However, it does not result in a software-defined infrastructure that can be versioned and stored right alongside your source code.
Luckily, you can create the entire pod definition directly in your Jenkinsfile.
Is there anything you can’t do in a Jenkinsfile???&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Any of the configuration parameters available in the UI or in the YAML definition can be added to the &lt;code&gt;podTemplate&lt;/code&gt; and &lt;code&gt;containerTemplate&lt;/code&gt; sections.
In the example below, I’ve defined a pod with two container templates.
The pod label is used in the node block to signify that we want to spin up an instance of this pod.
Any steps defined directly inside the node block but not in a container block with be run in the default JNLP container.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;container&lt;/code&gt; block is used to signify that the steps inside the block should be run inside the container with the given label.
I’ve defined a container template with the label &lt;code&gt;'golang'&lt;/code&gt;, which I will use to build the Go executable that I will eventually package into a Docker image.
In the &lt;code&gt;volumes&lt;/code&gt; definition, I have indicated that I want to mount the Docker socket of the host, but I still need the Docker client to interact with it using the Docker API.
Therefore, I’ve defined a container template with the label &lt;code&gt;'docker'&lt;/code&gt; which uses an image with the Docker client installed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;podTemplate(
    &lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test-pod&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;color:#606&quot;&gt;label&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test-pod&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;color:#606&quot;&gt;containers&lt;/span&gt;: [
        containerTemplate(&lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;golang&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;image&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;golang:1.9.4-alpine3.7&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;),
        containerTemplate(&lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;docker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;image&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;trion/jenkins-docker-client&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;),
    ],
    &lt;span style=&quot;color:#606&quot;&gt;volumes&lt;/span&gt;: [
        hostPathVolume(&lt;span style=&quot;color:#606&quot;&gt;mountPath&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/var/run/docker.sock&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;hostPath&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/var/run/docker.sock&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    ],
    {
        &lt;span style=&quot;color:#777&quot;&gt;//node = the pod label&lt;/span&gt;
        node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test-pod&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;){
            &lt;span style=&quot;color:#777&quot;&gt;//container = the container label&lt;/span&gt;
            stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;){
                container(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;golang&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;){
                    &lt;span style=&quot;color:#777&quot;&gt;// This is where we build our code.&lt;/span&gt;
                }
            }
            stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build Docker Image&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;){
                container(&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;‘&lt;/span&gt;docker&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;’&lt;/span&gt;){
                    &lt;span style=&quot;color:#777&quot;&gt;// This is where we build the Docker image&lt;/span&gt;
                }
            }
        }
    })&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my Docker-based pipeline scripts, I was building Docker images and pushing them to a Docker registry, and it was important to me to replicate that exactly with my new Kubernetes setup.
Once I accomplished that, I was ready to build my image using &lt;code&gt;gcloud&lt;/code&gt;, the Google Cloud SDK, and push that image to the Google Container Registry in anticipation of deploying to my K8s cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To do this, I specified a container template using a gcloud image and changed my docker command to a gcloud command.
It’s that simple!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;podTemplate(
    &lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test-pod&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;color:#606&quot;&gt;label&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test-pod&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;color:#606&quot;&gt;containers&lt;/span&gt;: [
        containerTemplate(&lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;golang&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;image&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;golang:1.9.4-alpine3.7&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;),
        containerTemplate(&lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;gcloud&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;image&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;gcr.io/cloud-builders/gcloud&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;),
    ],
    {
        &lt;span style=&quot;color:#777&quot;&gt;//node = the pod label&lt;/span&gt;
        node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test-pod&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;){
            &lt;span style=&quot;color:#777&quot;&gt;//container = the container label&lt;/span&gt;
            stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;){
                container(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;golang&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;){
                    &lt;span style=&quot;color:#777&quot;&gt;// This is where we build our code.&lt;/span&gt;
                }
            }
            stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build Docker Image&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;){
                container(&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;‘&lt;/span&gt;gcloud&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;’&lt;/span&gt;){
                    &lt;span style=&quot;color:#777&quot;&gt;//This is where we build and push our Docker image.&lt;/span&gt;
                }
            }
        }
    })&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Standing up a Jenkins master on Kubernetes, running ephemeral agents, and building and deploying a sample application only took me a couple of hours.
I spent another weekend really digging in to better understand the platform.
You can be up and running in a matter of days if you are a quick study.
There are a wealth of resources available on running Jenkins on Kubernetes, and I hope this blog post helps to further that knowledge.
Even better, come to
&lt;a href=&quot;https://devopsworldjenkinsworld2018.sched.com/event/F9Ne/jenkins-and-kubernetes-secret-agents-in-the-cloud&quot;&gt;my session at Jenkins World&lt;/a&gt; and let’s talk in person.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, what else do you want to know?
Hit me up on Twitter.
I might even add your questions to my Jenkins World session.
I suppose next up is Mesos?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come meet Mandy and other Jenkins and Kubernetes experts at
&lt;a href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;Jenkins World&lt;/a&gt; on September 16-19th,
register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/13/speaker-blog-evergreen-safely-upgrading/</id>
<title>Speaker blogpost: Jenkins Evergreen At DevOps World | Jenkins World 2018</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-09-13T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/13/speaker-blog-evergreen-safely-upgrading/" />
<author>
<name>batmat</name>
</author>
<category term="jenkinsworld"></category>
<category term="jenkinsworld2018"></category>
<category term="evergreen"></category>
<summary>
Evergreen is a distribution of Jenkins we are working on that provides an easy to use and automatically upgrading experience.
This year at the conference, there will be not just one, but two talks to present Evergreen to the Jenkins community:




Continuously Delivering an Easy-to-Use Jenkins with Jenkins Evergreen, by R. Tyler Croy.


Safely Upgrading Jenkins Every Single Day, by Baptiste Mathus.




Tyler will present the overall Jenkins Evergreen architecture, its inception and how this aims at making it much simpler for people to just use Jenkins to build their projects, without having to become Jenkins admins.


On the last conference day, during my own...
</summary>
<content type="html">
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/conferences/devops-world-2018.jpg&quot; alt=&quot;DevOps World | Jenkins World 2018&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/04/06/jenkins-essentials/&quot;&gt;Evergreen is a distribution of Jenkins we are working on that provides an easy to use and automatically upgrading experience&lt;/a&gt;.
This year at the conference, there will be not just one, but two talks to present Evergreen to the Jenkins community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://devopsworldjenkinsworld2018.sched.com/event/F9Nf/continuously-delivering-an-easy-to-use-jenkins-with-jenkins-essentials?iframe=no&amp;amp;w=100%&amp;amp;sidebar=yes&amp;amp;bg=no&quot;&gt;Continuously Delivering an Easy-to-Use Jenkins with Jenkins Evergreen&lt;/a&gt;, by R. Tyler Croy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://devopsworldjenkinsworld2018.sched.com/event/F9Nn/safely-upgrading-jenkins-every-single-day?iframe=no&amp;amp;w=100%&amp;amp;sidebar=yes&amp;amp;bg=no&quot;&gt;Safely Upgrading Jenkins Every Single Day&lt;/a&gt;, by Baptiste Mathus.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tyler will present the overall Jenkins Evergreen architecture, its inception and how this aims at making it much simpler for people to just use Jenkins to build their projects, without having to become Jenkins admins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the last conference day, during my own talk I will focus on the improved developer experience, and zoom into how we implemented some important features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will dig together into the Error Telemetry system put in place, allowing us to actually fix errors and warnings people see in production environments.
How instances are automatically reporting errors to the Evergreen backend, and how we then centralize and analyze them using Sentry.
We will explain how the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/05/15/incremental-deployment/&quot;&gt;&lt;em&gt;Incrementals&lt;/em&gt; system&lt;/a&gt; allows developers a very short roundtrip, between a merged pull-request and a release we can push out to all instances.
We will see concrete examples of issues we already fixed and released to Evergreen instances in just a few days after we opened an alpha version to the world.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will show you how an instance starts up and gets upgraded by discussing with the backend it’s constantly connected to.
How the backend knows what it should instruct an instance to download and install, or how we trigger an automated data snapshot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will obviously see a demo of all this showing in particular how Evergreen can already run on a Docker host, or on AWS (more environments to come!), using some of the so-called &lt;em&gt;flavors&lt;/em&gt; for Jenkins Evergreen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come meet us at
&lt;a href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;DevOps World | Jenkins World 2018&lt;/a&gt; on September 16-19th in San Francisco.
We will be hanging out around the OSS space, eager to answer more questions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/12/speaker-blog-a-cloud-native-jenkins/</id>
<title>Speaker blogpost: A Cloud Native Jenkins</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-09-12T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/12/speaker-blog-a-cloud-native-jenkins/" />
<author>
<name>oleg_nenashev</name>
</author>
<category term="jenkinsworld"></category>
<category term="jenkinsworld2018"></category>
<category term="cloud-native"></category>
<category term="pluggable-storage"></category>
<category term="jenkinsfile-runner"></category>
<summary>
A few months ago I published a
blog post about
Cloud Native Special Interest Group (SIG)
and ongoing projects related to Cloud Native Jenkins.
Next week we will be presenting at DevOps World | Jenkins World together with Carlos Sanchez and Jesse Glick,
so I would like to provide a heads up for
our talk: “A Cloud Native Jenkins”.


In our talk, we will focus on the following topics: Pluggable Storage,
our ephemeral Jenkins masters experiments,
and tools which may be used to implement single-shot masters.


Pluggable Storage


Pluggable storage is one of the major areas we have been working on over the last few months.
There are a number of parallel...
</summary>
<content type="html">
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/conferences/devops-world-2018.jpg&quot; alt=&quot;DevOps World | Jenkins World 2018&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few months ago I published a
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/07/30/introducing-cloud-native-sig/&quot;&gt;blog post&lt;/a&gt; about
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs/cloud-native/&quot;&gt;Cloud Native Special Interest Group (SIG)&lt;/a&gt;
and ongoing projects related to Cloud Native Jenkins.
Next week we will be presenting at DevOps World | Jenkins World together with Carlos Sanchez and Jesse Glick,
so I would like to provide a heads up for
&lt;a href=&quot;https://devopsworldjenkinsworld2018.sched.com/event/F9NT/a-cloud-native-jenkins&quot;&gt;our talk: “A Cloud Native Jenkins”&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our talk, we will focus on the following topics: Pluggable Storage,
our ephemeral Jenkins masters experiments,
and tools which may be used to implement single-shot masters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;pluggable-storage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pluggable-storage&quot;&gt;&lt;/a&gt;Pluggable Storage&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pluggable storage is one of the major areas we have been working on over the last few months.
There are a number of parallel stories which are summarized on
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs/cloud-native/pluggable-storage/&quot;&gt;this page&lt;/a&gt;.
There has been significant progress in the areas of artifact storage, build logging and configuration storage.
A number of Jenkins Enhancement Proposals were submitted and accepted,
and there are plugin releases and prototypes for these stories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During our talk we will discuss the current status of these stories and future plans.
In particular, we will cover the following areas and reference implementations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Storing all your artifacts transparently, e.g. in a cloud service blob store like AWS S3.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/artifact-manager-s3&quot;&gt;Artifact Manager for S3 Plugin&lt;/a&gt; is an implementation we have recently released&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Providing credentials from an external location.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/kubernetes-credentials-provider&quot;&gt;Kubernetes Credentials Provider&lt;/a&gt; is one of the existing implementations for Kubernetes secrets&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sending and retrieving the build logs from a cloud service.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We are working on reference implementations for &lt;a href=&quot;https://github.com/jenkinsci/pipeline-log-fluentd-cloudwatch-plugin&quot;&gt;AWS CloudWatch Logs&lt;/a&gt; and
&lt;a href=&quot;https://github.com/jenkinsci/external-logging-elasticsearch-plugin&quot;&gt;Elasticsearch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Storing configuration data in external storage like Kubernetes Resources and SQL database&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Storing test results externally, e.g. in an SQL database or a specialized Test Management System&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are existing plugins for the areas above, but there is a difference in approach we have taken.
Instead of creating new custom steps we extend Jenkins architecture in a way that the storage becomes &lt;strong&gt;transparent&lt;/strong&gt; to users.
For example, with &lt;a href=&quot;https://plugins.jenkins.io/artifact-manager-s3&quot;&gt;Artifact Manager for S3 Plugin&lt;/a&gt; common &lt;em&gt;Archive Artifacts&lt;/em&gt; steps
work transparently with Remote storage, as well as Jenkins Pipeline’s &lt;code&gt;stash()&lt;/code&gt;/&lt;code&gt;unstash()&lt;/code&gt; steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reference implementations intentionally use different technologies so that we cover more scenarios.
We regularly discuss the implementations in the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs/cloud-native/&quot;&gt;Cloud Native SIG&lt;/a&gt;,
and we would appreciate your feedback.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ephemeral-jenkins-masters-research&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ephemeral-jenkins-masters-research&quot;&gt;&lt;/a&gt;Ephemeral Jenkins masters research&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want something new?
Several days ago Kohsuke Kawaguchi, the creator of Jenkins, posted the
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/31/shifting-gears/&quot;&gt;Jenkins: Shifting Gears&lt;/a&gt; article to summarize the plan for Jenkins evolution.
Cloud Native Jenkins is a critical part of this plan, and it is not “just Jenkins X”.
There are various architectural changes in Jenkins required to make this vision happen,
and we plan to work on these changes in the Cloud Native SIG.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our presentation, we will talk about our experiment with ephemeral Jenkins and single-shot masters.
In this story we are creating a headless single-shot master which starts in a container,
executes a Pipeline build and pushes all the results to remote storage so that the container can just be deleted after completion.
Such a master bundles plugins and self-configuration logic using “Configuration as Code”,
so that it can start executing Pipelines in just a few seconds.
Once packaged, it can be invoked from CLI as simply as…​&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;docker run --rm -v $PWD/demo/Jenkinsfile:/workspace/Jenkinsfile onenashev/cwp-jenkinsfile-runner-demo&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or, in Kubernetes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;kubectl create configmap jenkinsfile --from-file=demo/Jenkinsfile
kubectl create -f demo/kubernetes.yaml&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Such a single-shot master could also be made a part of a Cloud Native Jenkins system.
Standard event handlers like Prow can invoke the builds on webhooks and report results back,
so that the single-shot master can be used to build pull requests or to run Continuous Delivery flows.
Extra agents could also be connected to the master on-demand, using the Kubernetes plugin or sidecar containers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-09-12-cloud-native-jenkins/single-shot-master-schema.png&quot; alt=&quot;Single-shot master concept&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tools&quot;&gt;&lt;/a&gt;Tools&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to make this experiment possible, we used a toolchain based on
Docker,
&lt;a href=&quot;https://github.com/kohsuke/jenkinsfile-runner&quot;&gt;Jenkinsfile Runner&lt;/a&gt;,
&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin&quot;&gt;Configuration as Code Plugin&lt;/a&gt; (JCasC), and a
&lt;a href=&quot;https://github.com/jenkinsci/custom-war-packager&quot;&gt;Custom WAR Packager tool&lt;/a&gt; which glues all the things together.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Custom WAR Packager&lt;/strong&gt; is a new tool which takes various configurations (YAML specification defining core version, list of plugins, system properties, Groovy Hooks, JCasC YAMLs)…​
and then bundles everything as a ready-to-fly WAR file or Docker image.
Starting from version &lt;strong&gt;1.2&lt;/strong&gt;, Custom WAR Packager also supports packaging Jenkinsfile Runner images as an experimental feature.
I will do a separate blogpost about this new tool later,
but there is already some documentation a number of &lt;a href=&quot;https://github.com/jenkinsci/custom-war-packager#demo&quot;&gt;demos&lt;/a&gt; in the project’s repo.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;our-demo&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#our-demo&quot;&gt;&lt;/a&gt;Our demo&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yes, we will have a demo! We will show a single-shot master running with Pluggable storage implementations for AWS environments (Amazon S3, AWS CloudWatch, EKS, etc.),
which executes Jenkins Pipelines for Maven projects and provisions agents in Kubernetes on-demand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The demo has to be published yes, but you can already find a more simple Jenkinsfile Runner demo
&lt;a href=&quot;https://github.com/jenkinsci/custom-war-packager/tree/master/demo/jenkinsfile-runner&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;want-to-know-more&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#want-to-know-more&quot;&gt;&lt;/a&gt;Want to know more?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The upcoming &lt;a href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;DevOps World | Jenkins World conferences&lt;/a&gt;
are heavily packed with talks related to Cloud Native Jenkins,
including war stories and presentations on projects like Jenkins X and Jenkins Evergreen.
It is a great chance to get more information about using Jenkins in cloud environments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Jenkins contributor or just want to become a contributor,
also join the &lt;a href=&quot;https://jenkins.io/blog/2018/07/25/contributor-summit/&quot;&gt;Contributor Summit&lt;/a&gt; (Sep 17 in US and Oct 23 in Nice) or visit the Jenkins community booth in the Exhibition hall.
At the Contributor Summit on Sep 17 we will also have a face-to-face Cloud Native SIG meeting.
Feel free to contribute to the agenda &lt;a href=&quot;https://docs.google.com/document/d/1Hw1mpXSpH8BAe2YK5SrCfFuHQLRf__KnjDBK_SbhGls/edit&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come meet Carlos, Jesse, Oleg, and other Cloud Native SIG members at
&lt;a href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;Jenkins World&lt;/a&gt; on September 16-19th in San Francisco and on October 22-25 in Nice.
register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/12/2018-community-survey/</id>
<title>2018 DevOps|Jenkins Community Survey Now Open</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-09-12T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/12/2018-community-survey/" />
<author>
<name>bvdawson</name>
</author>
<category term="jenkins"></category>
<category term="devops"></category>
<category term="jenkinsworld2018"></category>
<summary>
This is a guest post by Brian
Dawson on behalf of CloudBees, where he works as a DevOps Evangelist
responsible for developing and sharing continuous delivery and DevOps best
practices. He also serves as the CloudBees Product Marketing Manager for
Jenkins.





Take the 5th Annual DevOps and Jenkins Community Survey


With DevOps World | Jenkins World San Francisco right around the corner, CloudBees is excited to sponsor the 2018 DevOps and Jenkins Community Survey. We want to capture the details of your DevOps experience in order to provide valuable insights to the Jenkins Community and beyond. Our community is stronger together - and this look at...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://twitter.com/brianvdawson&quot;&gt;Brian
Dawson&lt;/a&gt; on behalf of CloudBees, where he works as a DevOps Evangelist
responsible for developing and sharing continuous delivery and DevOps best
practices. He also serves as the CloudBees Product Marketing Manager for
Jenkins.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;take-the-5th-annual-devops-and-jenkins-community-survey&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#take-the-5th-annual-devops-and-jenkins-community-survey&quot;&gt;&lt;/a&gt;Take the 5th Annual DevOps and Jenkins Community Survey&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With DevOps World | Jenkins World San Francisco right around the corner, CloudBees is excited to sponsor the &lt;a href=&quot;https://www.surveymonkey.com/r/DOCSurvey18&quot;&gt;2018 DevOps and Jenkins Community Survey&lt;/a&gt;. We want to capture the details of your DevOps experience in order to provide valuable insights to the Jenkins Community and beyond. Our community is stronger together - and this look at our collective experience will reveal the big picture and shine a light on key trends. This year, as the Jenkins project continues to evolve with Jenkins X , Configuration as Code and more, your input is more critical than ever.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Let’s look at what we learned in 2016 and 2017:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;In 2016 we found that:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jenkins continued to hold the position as a company standard orchestration solution.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;29% of respondents companies use Jenkins on more than 50 projects&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In regards to SCM tools, Git continued the march to dominance:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Git usage increased to 85%&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Subversion usage decreased to 35%&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When it comes to practices, Agile and CI seemed to be the standard, and CD adoption still had a ways to go:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;85% practiced Agile&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;82% practiced CI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;61% practiced DevOps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;46% practiced CD&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-9-12-2018-community-survey/image_0.png&quot; alt=&quot;Agile, CD and DevOps practices&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;In 2017 respondents reported that:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jenkins Pipeline gained widespread adoption with 89% of survey takers used pipeline or planned to use in 6 months or less.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Container technology was cemented as a key part of the CD/DevOps ecosystem, yet Kubernetes usage was just starting gain momentum at 20.15%:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-9-12-2018-community-survey/image_1.png&quot; alt=&quot;Container technology usage&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jenkins, CD, and DevOps are getting more attention from Architects with 39% of respondents identified as Architects, nearly double the previous year&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git was the clear SCM of choice at 90%, increasing nearly 5% over last the previous year&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-9-12-2018-community-survey/image_2.png&quot; alt=&quot;What SCM do you use?&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What will you and the community tell us this year?  Are more people practicing DevOps?  Is Kubernetes the leader in container orchestration?  Is pipeline the standard for creating workflows?  Take the survey and let’s find out!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, your personal information (name, email address and company) will NOT be used by CloudBees for sales or marketing and the survey results will be made publicly available to the Jenkins Community. We will also be publishing a blog series analyzing trends over the last 5 years and offering  predictions on the evolution of DevOps. If you’re curious about what insights your input will provide, &lt;a href=&quot;https://www.surveymonkey.com/results/SM-LCQQZWZK8/data-trends/&quot;&gt;see the results of last year’s 2017 survey&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an added incentive to participate, CloudBees will enter &lt;strong&gt;&lt;em&gt;participants into a drawing for a free pass to DevOps World | Jenkins World 2019 (1st prize, $1,199.00 value) or a $100 Amazon gift card (2nd prize)!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The survey will close at the end of October so grab a cup of coffee &lt;a href=&quot;https://www.surveymonkey.com/r/DOCSurvey18&quot;&gt;get started&lt;/a&gt;. We promise the survey will be done before your latte is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.surveymonkey.com/r/DOCSurvey18&quot;&gt;Take me to the survey.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are laws that govern prize giveaways and eligibility; CloudBees has compiled all those fancy &lt;a href=&quot;https://www.cloudbees.com/blog/2018-devops-jenkins-community-survey-fine-print&quot;&gt;terms and conditions here.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/11/speaker-blog-warnings-plugin/</id>
<title>Warnings Plugin 5.0 (White Mountain) Public Beta</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-09-11T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/11/speaker-blog-warnings-plugin/" />
<author>
<name>uhafner</name>
</author>
<category term="warnings"></category>
<category term="jenkinsworld"></category>
<category term="jenkinsworld2018"></category>
<summary>
This is a guest post by Ullrich Hafner, professor for Software Engineering at the University of Applied Sciences Munich and Jenkins contributor.
He will be presenting Static Analysis Plugins - White Mountain Release for Pipelines at DevOps World | Jenkins World 2018.










Jenkins' Warnings plugin collects compiler warnings or issues reported by static analysis tools and visualizes the
results. The plugin (and the associated static analysis plugin suite) has been part of the Jenkins plugin eco-system
for more than ten years now. In order to optimize user experience and support Pipeline, a major rewrite of
the whole set of plugins was necessary. This new version...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by Ullrich Hafner, professor for Software Engineering at the University of Applied Sciences Munich and Jenkins contributor.
He will be presenting &lt;strong&gt;&lt;a href=&quot;http://sched.co/F9NZ&quot;&gt;Static Analysis Plugins - White Mountain Release for Pipelines&lt;/a&gt;&lt;/strong&gt; at DevOps World | Jenkins World 2018.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/conferences/devops-world-2018.jpg&quot; alt=&quot;DevOps World | Jenkins World 2018&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins' &lt;a href=&quot;https://plugins.jenkins.io/warnings&quot;&gt;Warnings plugin&lt;/a&gt; collects compiler warnings or issues reported by static analysis tools and visualizes the
results. The plugin (and the associated static analysis plugin suite) has been part of the Jenkins plugin eco-system
for more than ten years now. In order to optimize user experience and support Pipeline, a major rewrite of
the whole set of plugins was necessary. This new version (code name &lt;strong&gt;White Mountain&lt;/strong&gt;) is now available as a public
beta. Please download and install this new version and help us to identify problems before the API is sealed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new release is available in the
&lt;a href=&quot;https://jenkins.io/doc/developer/publishing/releasing-experimental-updates/&quot;&gt;experimental update center&lt;/a&gt;.
It has built-in support for almost hundred static analysis tools (including several compilers), see the list of
&lt;a href=&quot;https://github.com/jenkinsci/warnings-plugin/blob/master/SUPPORTED-FORMATS.md&quot;&gt;supported report formats&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;features-overview&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#features-overview&quot;&gt;&lt;/a&gt;Features overview&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Warnings plugin provides the following features when added as a post build action (or step) to a job:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The plugin scans the console log of a Jenkins build or files in the workspace of your job for any kind of issues.
There are almost one hundred
&lt;a href=&quot;https://github.com/jenkinsci/warnings-plugin/blob/master/SUPPORTED-FORMATS.md&quot;&gt;report formats&lt;/a&gt; supported.
Among the problems it can detect:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;errors from your compiler (C, C#, Java, etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;warnings from a static analysis tool (CheckStyle, StyleCop, SpotBugs, etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;duplications from a copy-and-paste detector (CPD, Simian, etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vulnerabilities&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;open tasks in comments of your source files&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The plugin publishes a report of the issues found in your build, so you can navigate to a summary report from the
main build page. From there you can also dive into the details:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;distribution of new, fixed and outstanding issues&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;distribution of the issues by severity, category, type, module, or package&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;list of all issues including helpful comments from the reporting tool&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;annotated source code of the affected files&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;trend charts of the issues&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the next sections, I’ll show the new and enhanced features in more detail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;one-plugin-for-all-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#one-plugin-for-all-tools&quot;&gt;&lt;/a&gt;One plugin for all tools&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously the warnings plugin was part of the static analysis suite that provided the same set of features through
several plugins (CheckStyle, PMD, Static Analysis Utilities, Analysis Collector etc.).
In order to simplify the user experience and the development process, these
plugins and the core functionality have been merged into the warnings plugin. All other plugins are not required
anymore and will not be supported in the future. If you currently use one of these plugins you should migrate
to the new recorders and steps as soon as possible. I will still maintain the old code for a while,
but the main development effort will be spent into the new code base.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following plugins have been integrated into the beta version of the warnings plugin:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Android-Lint Plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CheckStyle Plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CCM Plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dry Plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PMD Plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FindBugs Plugin&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All other plugins still need to be integrated or need to be refactored to use the new API.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;new-pipeline-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-pipeline-support&quot;&gt;&lt;/a&gt;New pipeline support&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Requirements for using the Warnings plugin in Jenkins Pipeline can be complex and sometimes controversial.
In order to be as flexible as possible I decided to split the main step into two individual parts,
which could then be used independently from each other.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;simple-pipeline-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#simple-pipeline-configuration&quot;&gt;&lt;/a&gt;Simple pipeline configuration&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The simple pipeline configuration is provided by the step &lt;code&gt;recordIssues&lt;/code&gt;. This step is automatically derived from the
FreeStyle job recorder: it scans for issues in a given set of files (or in the console log) and reports these issues
in your build. You can use the snippet generator to create a working snippet that calls this step. A typical example
of this step is shown in the following example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;recordIssues
    &lt;span style=&quot;color:#606&quot;&gt;enabledForFailure&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;,
    &lt;span style=&quot;color:#606&quot;&gt;tools&lt;/span&gt;: [[&lt;span style=&quot;color:#606&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*.log&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;tool&lt;/span&gt;: [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Java&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]],
    &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;filters&lt;/span&gt;: [includeFile(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;MyFile.*.java&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;), excludeCategory(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;WHITESPACE&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this example, the files '*.log' are scanned for &lt;strong&gt;Java&lt;/strong&gt; issues. Only issues with a file name matching the
pattern 'MyFile.*.java' are included. Issues with category 'WHITESPACE' will be excluded. The
step will be executed even if the build failed. The recorded report of warnings will be published under the fixed
URL 'https://[&lt;em&gt;your-jenkins&lt;/em&gt;]/job/[&lt;em&gt;your-job&lt;/em&gt;]/java'. URL or name of the report can be changed if required.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;advanced-pipeline-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#advanced-pipeline-configuration&quot;&gt;&lt;/a&gt;Advanced Pipeline Configuration&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes publishing and reporting issues using a single step is not sufficient. For instance, if you build your
product using several parallel steps and you want to combine the issues from all of these steps into
a single result. Then you need to split scanning and aggregation. Therefore, the plugin  provides the following
two steps that are combined by using an intermediate result object:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;scanForIssues&lt;/code&gt;: this step scans a report file or the console log with a particular parser and creates an
intermediate report object that contains the report.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;publishIssues&lt;/code&gt;: this step publishes a new report in your build that contains the aggregated results
of one or several &lt;code&gt;scanForIssues&lt;/code&gt; steps.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see the usage of these two steps in the following example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; java = scanForIssues &lt;span style=&quot;color:#606&quot;&gt;tool&lt;/span&gt;: [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Java&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;def&lt;/span&gt; javadoc = scanForIssues &lt;span style=&quot;color:#606&quot;&gt;tool&lt;/span&gt;: [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JavaDoc&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]

&lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;publishIssues&lt;/span&gt; &lt;span style=&quot;color:#606&quot;&gt;issues&lt;/span&gt;:[java, javadoc], &lt;span style=&quot;color:#606&quot;&gt;filters&lt;/span&gt;:[includePackage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;io.jenkins.plugins.analysis.*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)]

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; checkstyle = scanForIssues &lt;span style=&quot;color:#606&quot;&gt;tool&lt;/span&gt;: [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;CheckStyle&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;], &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;**/target/checkstyle-result.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
publishIssues &lt;span style=&quot;color:#606&quot;&gt;issues&lt;/span&gt;:[checkstyle]

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; pmd = scanForIssues &lt;span style=&quot;color:#606&quot;&gt;tool&lt;/span&gt;: [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Pmd&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;], &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;**/target/pmd.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
publishIssues &lt;span style=&quot;color:#606&quot;&gt;issues&lt;/span&gt;:[pmd]

publishIssues &lt;span style=&quot;color:#606&quot;&gt;id&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;analysis&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;White Mountains Issues&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;issues&lt;/span&gt;:[checkstyle, pmd],
    &lt;span style=&quot;color:#606&quot;&gt;filters&lt;/span&gt;:[includePackage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;io.jenkins.plugins.analysis.*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;filtering-issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#filtering-issues&quot;&gt;&lt;/a&gt;Filtering issues&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The created report of issues can be filtered afterwards. You can specify an arbitrary number of include or exclude
filters. Currently, there is support for filtering issues by module name, package or namespace name, file name,
category or type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-09-11/filter.png&quot; alt=&quot;Filtering&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An example pipeline that uses such a filter is shown in the following snippet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;recordIssues
    &lt;span style=&quot;color:#606&quot;&gt;tools&lt;/span&gt;: [[&lt;span style=&quot;color:#606&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*.log&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;tool&lt;/span&gt;: [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Java&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]],
    &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;filters&lt;/span&gt;: [includeFile(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;MyFile.*.java&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;), excludeCategory(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;WHITESPACE&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;quality-gate-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quality-gate-configuration&quot;&gt;&lt;/a&gt;Quality gate configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can define several quality gates that will be checked after the issues have been reported. These quality gates
let you to modify Jenkins' build status so that you immediately see if the desired quality of your product is met.
A build can be set to &lt;strong&gt;unstable&lt;/strong&gt; or &lt;strong&gt;failed&lt;/strong&gt; for each of these quality gates. All quality gates use a simple metric:
the maximum number of issues that can be found and still pass a given quality gate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-09-11/quality-gate.png&quot; alt=&quot;Quality Gate&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An example pipeline that enables a quality gate for 10 warnings in total or 1 new warning is shown in the
following snippet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;recordIssues
    &lt;span style=&quot;color:#606&quot;&gt;tools&lt;/span&gt;: [[&lt;span style=&quot;color:#606&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*.log&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;tool&lt;/span&gt;: [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Java&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]], &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;unstableTotalHigh&lt;/span&gt;: &lt;span style=&quot;color:#00D&quot;&gt;10&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;unstableNewAll&lt;/span&gt;: &lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;issues-history-new-fixed-and-outstanding-issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#issues-history-new-fixed-and-outstanding-issues&quot;&gt;&lt;/a&gt;Issues history: new, fixed, and outstanding issues&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One highlight of the plugin is the ability to categorize issues of subsequent builds as new, fixed and outstanding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-09-11/trend.png&quot; alt=&quot;History&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using this feature makes it a lot easier to keep the quality of your project under control: you can focus
only on those warnings that have been introduced recently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note: the detection of new warnings is based on a complex algorithm that tries to track the same warning in
two two different versions of the source code. Depending on the extend of the modification of the source code
it might produce some false positives, i.e., you might still get some new and fixed warnings even if there should
be none. The accuracy of this algorithm is still ongoing research and will be refined in the next couple of months.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;severities&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#severities&quot;&gt;&lt;/a&gt;Severities&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin shows the distribution of the severities of the issues in a chart. It defines the
following default severities, but additional ones might be added by plugins that extend the warnings plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Error&lt;/strong&gt;: Indicates an error that typically fails the build&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; (High, Normal, Low): Indicates a warning of the given priority. Mapping to the priorities
is up to the individual parsers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that not every parser is capable of producing warnings with a different severity. Some of the parses simply
use the same severity for all issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-09-11/severities.png&quot; alt=&quot;Severities&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;build-trend&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#build-trend&quot;&gt;&lt;/a&gt;Build Trend&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to see the trend of the analysis results, a chart showing the number of issues per build is also
shown. This chart is used in the details page as well as in the job overview. Currently, type and configuration
of the chart is fixed. This will be enhanced in future versions of the plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-09-11/history.png&quot; alt=&quot;Trend Chart&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;issues-overview&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#issues-overview&quot;&gt;&lt;/a&gt;Issues Overview&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get a fast and efficient overview of the reported set of issues in several aggregation views.
Depending on the number or type of issues you will see the distribution of issues by&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Static Analysis Tool&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Module&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Package or Namespace&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Severity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Category&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each of these detail views are interactive, i.e. you can navigate into a subset of the categorized issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-09-11/packages.png&quot; alt=&quot;Packages Overview&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;issues-details&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#issues-details&quot;&gt;&lt;/a&gt;Issues Details&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The set of reported issues is shown in a modern and responsive table. The table is loaded on demand using an Ajax
call. It provides the following features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pagination&lt;/strong&gt;: the number of issues is subdivided into several pages which can be selected by using the provided page
links. Note that currently the pagination is done on the client side, i.e. it may take some time to obtain the whole table of
issues from the server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sorting&lt;/strong&gt;: the table content can be sorted by clicking on ony of the table columns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Filtering, Searching&lt;/strong&gt;: you can filter the shown issues by entering some text in the search box.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content Aware&lt;/strong&gt;: columns are only shown if there is something useful to display. I.e., if a tool does not report an
issues category, then the category will be automatically hidden.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Responsive&lt;/strong&gt;: the layout should adapt to the actual screen size.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;: the details message for an issue (if provided by the corresponding static analysis tool) is shown as
child row within the table.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-09-11/details.png&quot; alt=&quot;Details&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;remote-api&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#remote-api&quot;&gt;&lt;/a&gt;Remote API&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin provides two REST API endpoints.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;summary-of-the-analysis-result&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summary-of-the-analysis-result&quot;&gt;&lt;/a&gt;Summary of the analysis result&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can obtain a summary of a particular analysis report by using the URL &lt;code&gt;[tool-id]/api/xml&lt;/code&gt;
(or &lt;code&gt;[tool-id]/api/json&lt;/code&gt;). The summary contains the number of issues, the quality gate status, and all
info and error messages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;details-of-the-analysis-result&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#details-of-the-analysis-result&quot;&gt;&lt;/a&gt;Details of the analysis result&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reported issues are also available as REST API. You can either query all issues or only the
new, fixed, or outstanding issues. The corresponding URLs are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[tool-id]/all/api/xml&lt;/code&gt;: lists all issues&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[tool-id]/fixed/api/xml&lt;/code&gt;: lists all fixed issues&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[tool-id]/new/api/xml&lt;/code&gt;: lists all new issues&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[tool-id]/outstanding/api/xml&lt;/code&gt;: lists all outstanding issues&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-you-can-help&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-you-can-help&quot;&gt;&lt;/a&gt;How You Can Help&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope these new features are useful for everyone! Please download or install this new release and test it in your jobs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Convert some of your jobs to the new API and test the new (and old) features (based on your requirements).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read all labels carefully, I’m not a native speaker so some descriptions might be misleading or incorrect.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check the new URLs and names of the parsers, see list of
&lt;a href=&quot;https://github.com/jenkinsci/warnings-plugin/blob/master/SUPPORTED-FORMATS.md&quot;&gt;supported report formats&lt;/a&gt;. These
can’t be changed after the beta testing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you find a problem, incorrect phrase, typo, etc. please report a bug in Jira (or even better: file a PR in GitHub).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This has been a brief overview of the new features of the Warnings plugin in Jenkins. For more, be sure to check out my
&lt;a href=&quot;http://sched.co/F9NZ&quot;&gt;talk&lt;/a&gt; at &quot;DevOps World | Jenkins World&quot; where I show more details of the Warnings plugin!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come see Ullrich Hafner and many other Jenkins experts and contributors at
&lt;a href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;DevOps World | Jenkins World&lt;/a&gt; on September 16-19th,
register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/10/scaling-network-connections/</id>
<title>Scaling Network Connections from the Jenkins Master</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-09-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/09/10/scaling-network-connections/" />
<author>
<name>jglick</name>
</author>
<category term="jenkinsworld"></category>
<category term="jenkinsworld2018"></category>
<category term="cloud-native"></category>
<category term="performance"></category>
<category term="scalability"></category>
<category term="remoting"></category>
<summary>
Oleg Nenashev and I will be speaking at DevOps World | Jenkins World in San Francisco this year about
Scaling Network Connections from the Jenkins Master.
Over the years there have been many efforts to analyze, optimize, and fortify the “Remoting channel”
that allows a master to orchestrate agent activity and receive build results.
Techniques such as tuning the agent launcher can improve service,
but qualitative change can only come from fundamentally reworking what gets transmitted and how.


In March, JENKINS-27035 introduced a framework for inspecting the traffic on a Remoting channel at a high level.
Previously, developers could only use generic low-level tools such as Wireshark,
which...
</summary>
<content type="html">
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/conferences/devops-world-2018.jpg&quot; alt=&quot;DevOps World | Jenkins World 2018&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Oleg Nenashev and I will be speaking at DevOps World | Jenkins World in San Francisco this year about
&lt;a href=&quot;https://devopsworldjenkinsworld2018.sched.com/event/F9NP&quot;&gt;Scaling Network Connections from the Jenkins Master&lt;/a&gt;.
Over the years there have been many efforts to analyze, optimize, and fortify the “Remoting channel”
that allows a master to orchestrate agent activity and receive build results.
Techniques such as tuning the agent launcher can improve service,
but qualitative change can only come from fundamentally reworking what gets transmitted and how.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In March, &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-27035&quot;&gt;JENKINS-27035&lt;/a&gt; introduced a framework for inspecting the traffic on a Remoting channel at a high level.
Previously, developers could only use generic low-level tools such as Wireshark,
which cannot identify the precise piece of Jenkins code responsible for traffic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the past few months, the
&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs/cloud-native/&quot;&gt;Cloud Native SIG&lt;/a&gt;
has been making progress in addressing root causes.
The
&lt;a href=&quot;https://plugins.jenkins.io/artifact-manager-s3&quot;&gt;Artifact Manager on S3 plugin&lt;/a&gt;
has been released and integrated with Jenkins Evergreen,
allowing upload and download of large artifacts to happen entirely between the agent and Amazon servers.
Prototype plugins allow all build log content generated by an agent (such as in &lt;code&gt;sh&lt;/code&gt; steps)
to be streamed directly to external storage services such as AWS CloudWatch Logs.
Work has also begun on uploading JUnit-format test results, which can sometimes get big,
directly from an agent to database storage.
All these efforts can reduce the load on the Jenkins master and local network
without requiring developers to touch their Pipeline scripts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Other approaches are on the horizon.
While “one-shot” agents run in fresh VMs or containers greatly improve reproducibility,
they suffer from the need to transmit megabytes of Java code for every build,
so Jenkins features will need to be built to precache most or all of it.
Work is underway to use Apache Kafka to make channels more robust against network failures.
Most dramatically, the proposed
&lt;a href=&quot;https://jenkins.io/blog/2018/08/31/shifting-gears/#cloud-native-jenkins-mvp&quot;&gt;Cloud Native Jenkins MVP&lt;/a&gt;
would eliminate the bottleneck of a single Jenkins master service handling hundreds of builds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come meet Jesse, Oleg, and other Cloud Native SIG members at
&lt;a href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;Jenkins World&lt;/a&gt; on September 16-19th,
register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/31/shifting-gears/</id>
<title>Jenkins: Shifting Gears</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-08-31T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/31/shifting-gears/" />
<author>
<name>kohsuke</name>
</author>
<category term="development"></category>
<category term="core"></category>
<summary>
Kohsuke here. This is a message for my fellow Jenkins developers.


Jenkins has been on an amazing run, but I believe we are trapped in a local optimum, and losing appeal to people who fall outside of our traditional sweet spot.
We need to take on new efforts to solve this. One is “cloud native Jenkins” that creates a flavor of Jenkins that runs well on Kubernetes.
The other is “gear shift”, where we take an evolutionary line from the current Jenkins 2, but with breaking changes in order to gain higher development speed.


I say it&#8217;s time we tackle these problems head on....
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Kohsuke here. This is a message for my fellow Jenkins developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins has been on an amazing run, but I believe we are trapped in a local optimum, and losing appeal to people who fall outside of our traditional sweet spot.
We need to take on new efforts to solve this. One is “cloud native Jenkins” that creates a flavor of Jenkins that runs well on Kubernetes.
The other is “gear shift”, where we take an evolutionary line from the current Jenkins 2, but with breaking changes in order to gain higher development speed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I say it’s time we tackle these problems head on. I’ve been talking to various folks, and I think we need to take on two initiatives.
One is what I call &quot;Cloud Native Jenkins,&quot; and the other is to insert a jolt in Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some of you have already seen the presentation I posted on the Jenkins YouTube channel.  In this post, I’ll expand on that with some additional details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkins: Shifting Gears Presentation (&lt;a href=&quot;https://drive.google.com/open?id=160LjRKw42XXuXT2n4j8BLCzsSL5z2m2_&quot;&gt;Slides&lt;/a&gt;)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/CgasN3icZp0?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come hear more in Kohsuke’s keynote at
&lt;a href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;Jenkins World&lt;/a&gt; on September 16-19th,
register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;our-amazing-success&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#our-amazing-success&quot;&gt;&lt;/a&gt;Our Amazing Success&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our project has been an amazing success over the past 10+ years, thanks to you all. What started as my hobby project became a huge community that boasts thousands of contributors and millions of users.
When I think about what enabled this amazing journey, I can think of several magic sauces:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Extensible:&lt;/strong&gt;
the ability to take the system, or a portion of the system, then build on top of it to achieve what you need, without anyone else’s permission.
Here, I’m not talking about the specific technical mechanism of Guice, extension point, etc, but rather I’m talking more broadly about the governance, culture, distribution mechanism, and so on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;General purpose:&lt;/strong&gt;
At the base level, Jenkins can be used for any kind of automation around the area of software development.
This matched the reality of the software engineering world well.
Combined with extensibility, this general purpose system that is Jenkins can specialize into any domain, much like Linux and JetBrains IDEs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Community:&lt;/strong&gt;
Together we created a community where different people push envelopes in different directions and share the fruits with others.
This meant everyone can benefit from somebody else’s work, and great ideas and best practices spread more quickly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/conferences/devops-world-2018.jpg&quot; alt=&quot;DevOps World | Jenkins World 2018&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;our-challenges&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#our-challenges&quot;&gt;&lt;/a&gt;Our Challenges&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The way we set up our community meant that collectively we were able to work toward solving certain kinds of problems locally and organically, such as Android application development, new UX, more expressive pipeline description language, …​&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But at the same time, the incremental, autonomous nature of our community made us demonstrably unable to solve certain kinds of problems.
And after 10+ years, these unsolved problems are getting more pronounced, and they are taking a toll — segments of users correctly feel that the community doesn’t get them, because we have shown an inability to address some of their greatest difficulties in using Jenkins.
And I know some of those problems, such as service instability, matter to all of us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a way, we are stuck in a local optimum, and that is a dangerous place to be when there is growing competition from all sides.
So we must solve these problems to ensure our continued relevance and popularity in the space.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Solving those problems starts with correctly understanding them, so let’s look at those.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;service-instability&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#service-instability&quot;&gt;&lt;/a&gt;Service Instability&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CI/CD service was once a novelty and a nice-to-have.
Today, it is very much a mission critical service, in no small part because of us!
Increasingly, people are running bigger and bigger workloads, loading up more and more plugins, and expect higher and higher availability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Admins today are unable to meet that heightened expectation using Jenkins easily enough.
A Jenkins instance, especially a large one, requires too much overhead just to keep it running.
It’s not unheard of that somebody restarts Jenkins every day.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Admins expect errors to be contained and not impact the entire service.
They expect Jenkins to defend itself better from issues such as pipeline execution problems, run-away processes, over resource consumption so that they don’t have to constantly babysit the service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every restart implies degraded service for the software delivery teams where they have to wait longer for their builds to start or complete.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;brittle-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#brittle-configuration&quot;&gt;&lt;/a&gt;Brittle Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every Jenkins admin must have been burnt at least once in the past by making changes that have caused unintended side effects.
By “changes,” I’m talking about installing/upgrading plugins, tweaking job settings, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a result, too many admins today aren’t confident that they can make changes safely.
They fear that their changes might cause issues for their software delivery teams, that those teams will notice regressions before they do, and that they may not be able to back out somes changes easily.
It feels like touching a Jenga tower for them, even when a change is small.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upgrading Jenkins and plugins is an important sub case of this, where admins often do not have understanding of the impact.
This decreases the willingness to upgrade, which in turn makes it difficult for the project to move forward more rapidly, and instead we get trapped with the long tail of compatibility burden.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;assembly-required&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#assembly-required&quot;&gt;&lt;/a&gt;Assembly Required&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ve often described Jenkins as a bucket full of LEGO blocks — you can build any car you want, but everyone first has to assemble their own car in order to drive one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As CI/CD has gone mainstream, this is no longer OK.
People want something that works out of the box, something that gets people to productivity within 5 clicks in 5 minutes.
Too many choices are confusing users, and we are not helping them toward “the lit path.”
Everyone feels uncertain if they are doing the right thing, contributors are spread thin, and the whole thing feels a bit like a Frankenstein.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is yet another problem we can’t solve by “writing more plugins.”&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reduced-development-velocity&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#reduced-development-velocity&quot;&gt;&lt;/a&gt;Reduced Development Velocity&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This one is a little different from others that our users face, but nonetheless a very important one, because it impacts our ability to expand and sustain the developer community, and influences how fast we can solve challenges that our users face.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some of these problems are not structural and rather just a matter of doing it (for example, Java 11 upgrade), but there are some problems here that are structural.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think the following ones are the key ones:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As a contributor, a change that spans across multiple plugins is difficult.
Tooling gets in the way, users might not always upgrade a group of changes together, reviewing changes is hard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a contributor, the tests that we have do not give me enough confidence to ship code.
Not enough of them run automatically, coverage is shallow, and there just isn’t anything like production workload of real users/customers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These core problems create other downstream problems, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As a non-regular contributor, what I think of as a small and reasonable change takes forever and a 100 comments going back &amp;amp; forth to get in. I get discouraged from ever doing it again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a regular contributor, I feel people are throwing crap over the wall, and if they cause problems after a release, I’m on the hook to clean up that mess.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a user, I get a half-baked change that wreaks havoc, which results in loss of their confidence to Jenkins, an even slower pace of change, etc. This is a vicious cycle as it makes us even more conservative, and slow down the development velocity.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;path-forward&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#path-forward&quot;&gt;&lt;/a&gt;Path Forward&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the past, my frustration and regret is that we couldn’t take on an effort of this magnitude.
But that is NO MORE!
As CTO of CloudBees, I’m excited that these challenges are important enough for CloudBees now that we want to solve these efforts within the Jenkins project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ve been talking to many of you, and there are a number of existing efforts going on that touch this space already.
From there, the vision emerged is that we organize around two key efforts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cloud Native Jenkins: a general purpose CI/CD engine that runs on Kubernetes, and embraces a fundamentally different architecture and extensibility mechanism.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jolt in Jenkins: continue the incremental trajectory of Jenkins 2 today, but with renegotiated “contract” with users to gain what we really need, such as faster pace of development and better stability.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cloud-native-jenkins&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cloud-native-jenkins&quot;&gt;&lt;/a&gt;Cloud Native Jenkins&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to solve these problems that we can’t solve incrementally,
I’m proposing the “Cloud Native Jenkins” sub-project in the context of the
&lt;a href=&quot;https://jenkins.io/sigs/cloud-native/&quot;&gt;Cloud Native SIG&lt;/a&gt;
with Carlos, who is the leader of this SIG.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We don’t have all the answers, that’s something we’ll discuss and figure out collectively, but based on numerous conversations with various folks, I think there are many clear pieces of puzzles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;kubernetes-as-the-runtime&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kubernetes-as-the-runtime&quot;&gt;&lt;/a&gt;Kubernetes as the Runtime&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just like Java was the winning server application platform in the early 2000s, today, Kubernetes is the dominant, winning platform.
Cloud Native Jenkins should embrace the paradigm this new platform encourages. For example,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Serverless / function-as-a-service build execution (ala
&lt;a href=&quot;https://groups.google.com/forum/#!topic/jenkinsci-dev/gjz3CDhi-kk&quot;&gt;Jenkinsfile runner&lt;/a&gt;)
that are isolated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Various pieces of functionalities deployed as separate microservices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Services interacting through
&lt;a href=&quot;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&quot;&gt;Kubernetes CRDs&lt;/a&gt;
in order to promote better reuse and composability.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are the design principles that enable highly desirable properties like infinite scalability, pay-as-you-go cost model, immutability, zero down time operability, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;new-extensibility-mechanism&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-extensibility-mechanism&quot;&gt;&lt;/a&gt;New Extensibility Mechanism&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We need to introduce a new mechanism of extensibility in order to retain the magic sauces, and continue our incredible ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, microservice or container-based extensibility avoids the service instability problem (ala
&lt;a href=&quot;https://github.com/knative/docs/blob/master/build/builder-contract.md&quot;&gt;Knative builder&lt;/a&gt;
and the
&lt;a href=&quot;https://github.com/jglick/jk--&quot;&gt;userspace-scm&lt;/a&gt; work.)
Pipeline shared libraries is another example that concretely shows how extensibility mechanism can go beyond plugin, though it hasn’t fully flourished as one just yet.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;data-on-cloud-managed-data-services&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#data-on-cloud-managed-data-services&quot;&gt;&lt;/a&gt;Data on Cloud Managed Data Services&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The long-term data storage must be moved from the file system to data services backed by cloud managed services, in order to achieve high availability and horizontal scalability, without burdening admins with additional operational responsibilities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;configuration-as-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configuration-as-code&quot;&gt;&lt;/a&gt;Configuration as Code&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/projects/jcasc/&quot;&gt;Jenkins Configuration as Code&lt;/a&gt;
has been incredibly well received, in part because it helps to solve some of the brittle configuration problems.
In Cloud Native Jenkins, JCasC must play a more central role, which in turn also helps us reduce the surface area for Blue Ocean to cover by eliminating many configuration screens.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;evergreen&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#evergreen&quot;&gt;&lt;/a&gt;Evergreen&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/300/README.adoc&quot;&gt;Jenkins Evergreen&lt;/a&gt;
is another well received effort that’s already underway, which aims to solve the brittleness problem and developer velocity problem. This is a key piece of the puzzle that allows us to move faster without throwing users under the bus.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;secure-by-default-design&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#secure-by-default-design&quot;&gt;&lt;/a&gt;Secure by Default Design&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the past years, we’ve learned that several different areas of Jenkins codebase, such as Remoting, are inherently prone to security vulnerabilities because of their design. Cloud Native Jenkins must address those problems by flipping those to “secure by design.”&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;following-footsteps-of-jenkins-x&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#following-footsteps-of-jenkins-x&quot;&gt;&lt;/a&gt;Following Footsteps of Jenkins X&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins-x.io&quot;&gt;Jenkins X&lt;/a&gt;
has been pioneering the use of Jenkins on Kubernetes for a while now, and it has been very well received, too.
So naturally, part of the aim of Cloud Native Jenkins is to grow and morph Jenkins into a shape that really works well for Jenkins X.
Cloud Native Jenkins will be the general purpose CI/CD engine that runs on Kubernetes, which Jenkins X uses to create an opinionated CD experience for developing cloud native apps.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;all-the-same-good-things-with-new-foundation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#all-the-same-good-things-with-new-foundation&quot;&gt;&lt;/a&gt;All The Same Good Things, with New Foundation&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And then on top of these foundations, we need to rebuild or transplant all the good things that people love about Jenkins today, and all the good things people expect, such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Great “batteries included” onboarding experience&lt;/strong&gt;  for new users, where we are present in all the marketplaces, 5 clicks to get going and easy integration with key services.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Modern lovable UX&lt;/strong&gt; in the direction of front-end web apps that Blue Ocean pioneered.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;General purpose software&lt;/strong&gt; that is useful for all sorts of software development.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;cloud-native-jenkins-mvp&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cloud-native-jenkins-mvp&quot;&gt;&lt;/a&gt;Cloud Native Jenkins MVP&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I wrote, a number of good efforts are already ongoing today. Thus in order to get this effort off the ground, I believe the first MVP that we aim toward is pretty clear, which is to build a function-as-a-service style Jenkins build engine  that can be used underneath Jenkins X.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cloud Native Jenkins MVP combines the spirits of Jenkins Pipeline, Jenkins Evergreen, Jenkinsfile Runner, and Jenkins Configuration as Code.
It consists of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Webhook receiver:&lt;/strong&gt;
a service that receives webhooks from GitHub and triggers a build engine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Build Engine:&lt;/strong&gt;
take Jenkinsfile Runner and evolve it so that it can run as a “function” that carries out a pipeline execution, with some CasC sprinkled together in order to control Jenkins configuration and plugins  used.
This way, Jenkinsfile works as-is for the most part.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Continuously delivered through Evergreen:&lt;/strong&gt;
It allows us to solve the combinatorial version explosion problem, allow us to develop changes that span multiple plugins faster, and develop changes more confidently.
Of all the projects out there, ours should be the community that believes in the value of Continuous Delivery and Evergreen is how we bring continuous delivery to the development of Cloud Native Jenkins itself.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This solves some of the key challenges listed above that are really hard to achieve today, so it’s already incredibly useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The catch is that this MVP has no GUI. There’s no Blue Ocean UI to look at. No parsing of test reports, no build history. It uses no persistent volumes, it keeps no record of builds. The only thing permanent at the end of a build is whatever data is pushed out from Jenkins Pipeline, such as images pushed to a Docker registry, email notifications, and GitHub commit status updates.  Load of other features in Jenkins will not be available here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is not that far from how some sophisticated users are deploying Jenkins today. All in all, I think this is the right trade off for the first MVP. As you can see, we have most of the pieces already.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From here, the build engine will get continuously more polished and more cloud native, other services will get added to regain features that were  lost, new extensibility will get introduced to reduce the role of current in-VM plugins, and so on.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jolt-in-jenkins&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jolt-in-jenkins&quot;&gt;&lt;/a&gt;Jolt in Jenkins&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cloud Native Jenkins is a major effort and in particular initially it’s not usable for everyone; it only targets a subset of Jenkins functionalities, and it requires a platform whose adoption is still limited today.
So in parallel, we need to continue the incremental evolution of Jenkins 2, but in an accelerated speed. Said differently, we need to continue to serve the majority of production workload on Jenkins 2 today, but we are willing to break some stuff to gain what we really need, such as faster pace of development and better stability, in ways that were previously not possible. This requires us injecting a jolt in Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;release-model-change&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#release-model-change&quot;&gt;&lt;/a&gt;Release Model Change&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The kind of jolts that we need will almost certainly means we need to renegotiate the expectation around new releases with our users.
My inspiration source is what happened to the development of Java SE. It changed the release model and started moving faster, by shedding off more pieces faster, in ways that they haven’t done before.
Again, Jenkins Evergreen is the key piece that achieves this without throwing users under a bus, for the reasons I described in the Cloud Native MVP above.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;compatibility&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#compatibility&quot;&gt;&lt;/a&gt;Compatibility&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This jolt is aimed to put us on a different footing, one where our current “forever compatibility” expectation does not hold. If that requires us to use a new major version number, such as Jenkins 3, or new major version number every N months, I’m open to that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, whatever move we do has to make sense to users. The accelerated pace of value delivery needs to justify any inconvenience we put on users, such as migration, breaking changes, and so on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In practice, what that means is that we need to be largely compatible. We have to protect users’ investment into their existing job definitions as much as possible. We continue to run freestyle jobs, etc…​&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;ingredients&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ingredients&quot;&gt;&lt;/a&gt;Ingredients&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Other proposals CloudBees is putting forward with the intent to staff the effort are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Configuration as Code:&lt;/strong&gt; accelerate that and make it a more central  part of Jenkins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Developer experience improvements&lt;/strong&gt; through buildpack style auto-detection of project types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Continued evolution of Jenkins Pipeline&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There’s an effort going on to remove CPS execution of Pipeline and isolate any failures during pipeline execution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continue to evolve Jenkins Pipeline toward the sweet spot that works well with the Cloud Native Jenkins effort.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continued tactical bug-by-bug improvements of Pipeline.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Evergreen:&lt;/strong&gt; I already talked about this above.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Plugin spring cleaning:&lt;/strong&gt; let’s actively guide users more toward the sweet spot of Jenkins and reduce our feature surface area, so that we can focus our contributors’ effort to important parts of Jenkins. I expect this to be a combination of governance and technical efforts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Table stakes service integration:&lt;/strong&gt; let’s look at what kind of tablestake tool/service integrations today’s user need, and
&lt;a href=&quot;https://www.dropbox.com/s/uvrx79d4wqbbv9i/JW%20contributor%20summit%20vision%20pitch.pptx?dl=0&quot;&gt;see if we are meeting/exceeding the competition&lt;/a&gt;.
Where we fall short, let’s add/reimplement what are needed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;ui-effort&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ui-effort&quot;&gt;&lt;/a&gt;UI Effort&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Web UI will be likely done differently in Cloud Native Jenkins, as its own app and not a plugin in Jenkins. JCasC will also play a bigger role in Cloud Native Jenkins, reducing UI surface area from Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given that, CloudBees will reconsider where to spend its effort in Blue Ocean. The current work where parts of Blue Ocean are made reusable as NPM modules is one example that aligns well with this new vision.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This document lays out the key directions and approaches in a broad stroke, which I discussed with a number of you in the past. Hopefully, this gives you the big picture of how I envision where to move Jenkins forward, not just as the creator of Jenkins but as the CTO of CloudBees, who employs a number of key contributors to the Jenkins project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come meet Kohsuke and chat with him about the direction of Jenkins at
&lt;a href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;Jenkins World&lt;/a&gt; on September 16-19th,
register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/30/speaker-blog-kubernetes-plugin/</id>
<title>Effectively using Kubernetes plugin with Jenkins</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-08-30T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/30/speaker-blog-kubernetes-plugin/" />
<author>
<name>tanskann</name>
</author>
<category term="kubernetes"></category>
<category term="jenkinsworld"></category>
<category term="jenkinsworld2018"></category>
<summary>
This is a guest blog by Niklas Tanskanen, consultant at
Eficode.










Kubernetes, the container orchestration platform is rapidly becoming popular. There are more and more workloads that you can run on top of Kubernetes. It&#8217;s becoming an enabling layer of your Hyper-convergenced infrastructure.


If you set up Kubernetes as a Cloud provider in Jenkins, you&#8217;ll get a very powerful couple for running your workloads.
To do that, you can simply install
Kubernetes plugin.
Kubernetes is able to run your Jenkins workloads as long as they are run in container.
And containers are an awesome way if your workload is a build, because you can pack all your...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest blog by Niklas Tanskanen, consultant at
&lt;a href=&quot;http://eficode.com&quot;&gt;Eficode&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/jenkins-x/logo.svg&quot; alt=&quot;Jenkins X&quot; width=&quot;200&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://kubernetes.io&quot;&gt;Kubernetes&lt;/a&gt;, the container orchestration platform is rapidly becoming popular. There are more and more workloads that you can run on top of Kubernetes. It’s becoming an enabling layer of your Hyper-convergenced infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you set up Kubernetes as a Cloud provider in Jenkins, you’ll get a very powerful couple for running your workloads.
To do that, you can simply install
&lt;a href=&quot;https://plugins.jenkins.io/kubernetes&quot;&gt;Kubernetes plugin&lt;/a&gt;.
Kubernetes is able to run your Jenkins workloads as long as they are run in container.
And containers are an awesome way if your workload is a build, because you can pack all your application and OS dependencies in a container and then run it anywhere!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s imagine that you have been running a Kubernetes cluster setup in your organisation for a while now.
First it was all about proof of concept but now its becoming more popular within your developers and you have to think about scaling and orchestration.
Resource quotas are a part of that and every responsible operator should set those up both in both development and production clusters.
Otherwise people will be lazy and just reserve all the resources of your cluster without actually using those resources for anything.
By introducing quotas into your cluster, you can control how many resources should each namespace have.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quotas are a mature feature of Kubernetes already.
You have the possibility to create very fine grained quotas for different hardware resources, whenever it’s fast disk, GPUs or CPU time.
You can also specify multiple scopes of quota per one namespace.
For example, you can have a quota for workloads that are to be run to the infinity like web servers or databases.
Or have quota for workloads that are short lived like builds or test automation runs.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Scopes&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot; /&gt;
&lt;col style=&quot;width: 50%;&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Scope&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;Terminating&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Match pods where &lt;code&gt;.spec.activeDeadlineSeconds &amp;gt;= 0&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;NotTerminating&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Match pods where &lt;code&gt;.spec.activeDeadlineSeconds is nil&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;BestEffort&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Match pods that have best effort quality of service.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;NotBestEffort&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Match pods that do not have best effort quality of service.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;different-scopes-of-kubernetes-quota&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#different-scopes-of-kubernetes-quota&quot;&gt;&lt;/a&gt;Different scopes of Kubernetes quota&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since Jenkins is all about running short workloads, you should aim for the &lt;code&gt;Terminating&lt;/code&gt; scope of quota.
But how do you specify workloads in Jenkins so that correct scope is used?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you were to do this in Kubernetes, you have to specify &lt;code&gt;.spec.activeDeadlineSeconds&lt;/code&gt;.
The same field can also be specified by the Kubernetes plugin when you are specifying a Pod Template.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-08-30/time-deadline.png&quot; alt=&quot;time deadline&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Specifying &lt;code&gt;.spec.activeDeadlineSeconds&lt;/code&gt; in the Kubernetes plugin&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Same configuration is available in the &lt;code&gt;Jenkinsfile&lt;/code&gt; as well if you don’t like static configurations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;podTemplate(&lt;span style=&quot;color:#606&quot;&gt;label&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;maven&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;activeDeadlineSeconds&lt;/span&gt;: &lt;span style=&quot;color:#00D&quot;&gt;180&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;containers&lt;/span&gt;: [
    containerTemplate(&lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;maven&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;image&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;maven:3.5.4-jdk-10-slim&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
  ]) {
  &lt;span style=&quot;color:#777&quot;&gt;// maven magic&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/conferences/devops-world-2018.jpg&quot; alt=&quot;DevOps World | Jenkins World 2018&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was just a small sample of features of the Kubernetes plugin in Jenkins. For more, be sure to check out our
&lt;a href=&quot;http://sched.co/FD6E&quot;&gt;talk&lt;/a&gt; where we share more of how you can utilise Kubernetes with Jenkins!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come see Niklas Tanskanen and many other Jenkins experts and contributors at
&lt;a href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;Jenkins World&lt;/a&gt; on September 16-19th,
register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/29/day-of-jenkins-and-other-chances-to-meet-jcasc/</id>
<title>Day of Jenkins, and other chances to meet JCasC</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-08-29T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/29/day-of-jenkins-and-other-chances-to-meet-jcasc/" />
<author>
<name>ewelinawilkosz</name>
</author>
<category term="jenkins"></category>
<category term="jcasc"></category>
<category term="configuration as code"></category>
<summary>
The Jenkins Configuration as Code plugin is reaching a stage when it is almost ready to be used in a production environment.
As a matter of fact, I know some living-on-the-edge users are already doing that.
The first release candidates are out and the official 1.0 is just around the corner.


I’d like to use this chance to invite you to meet us and contribute to the plugin.
There will be plenty of opportunities this autumn.


Jenkins Configuration as Code (also called "JCasC") is a Jenkins plugin that allows you to store and maintain all your Jenkins configuration in yaml file.
It’s like Pipeline or Job...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins Configuration as Code plugin is reaching a stage when it is almost ready to be used in a production environment.
As a matter of fact, I know some living-on-the-edge users are already doing that.
The first release candidates are out and the official 1.0 is just around the corner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’d like to use this chance to invite you to meet us and contribute to the plugin.
There will be plenty of opportunities this autumn.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins Configuration as Code (also called &quot;JCasC&quot;) is a Jenkins plugin that allows you to store and maintain all your Jenkins configuration in yaml file.
It’s like Pipeline or Job DSL but for managing Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In one of my blogposts,
&lt;a href=&quot;https://www.praqma.com/stories/jenkins-configuration-as-code/&quot;&gt;Jenkins Configuration as Code - Automating an automation server&lt;/a&gt;,
I provide a longer explanation of the plugin, and answer questions like
“why did we decided to develop it?” and “why you may want to use it?”.
I recommend you to read that one if you’re not familiar with the project yet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin has been presented at a number of meetups - by me but also other contributors.
This is the first open source project that I’ve actively participated in and I’m quite shocked - positively - to see how many people decided to join the effort and actively develop the plugin with us.
Now it’s time to take it to the bigger stage and broader audience.
So together with Nicolas de Loof I’m gonna present the plugin at &lt;strong&gt;DevOps World | Jenkins World&lt;/strong&gt; in &lt;em&gt;San Francisco&lt;/em&gt; (19th of September)  and in &lt;em&gt;Nice&lt;/em&gt; (24th of October) - yes, Jenkins World is coming to Europe.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But that’s not all!
&lt;a href=&quot;https://www.praqma.com/&quot;&gt;Praqma&lt;/a&gt; - the company I work for -
has organised a number of “Day of Jenkins” events around Scandinavia in past years.
This October they have decided to bring the events back with a theme: Day of Jenkins 2018 is
&lt;a href=&quot;https://www.code-conf.com/2018/day-of-jenkins-as-code/&quot;&gt;&lt;strong&gt;Day of Jenkins [as code]&lt;/strong&gt;&lt;/a&gt;.
It’s a two track one day event with presentations and hands-on sessions for users and a hackathon for contributors - in that specific case Configuration as Code Plugin’s contributors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Detailed agenda is available on the
&lt;a href=&quot;https://www.code-conf.com/2018/day-of-jenkins-as-code/&quot;&gt;event page&lt;/a&gt; -
Jenkins X, Jenkins Evergreen, Jenkins Configuration as Code and more waiting for you!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I really can’t wait to hear what Kohsuke has to say and to introduce you to the plugin during the hands-on session I’ll run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hope to see you at least at one of those events!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come meet the Configuration as Code contributors, Nicolas de Loof and Ewelina Wilkosz at
&lt;a href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;Jenkins World&lt;/a&gt; on September 16-19th,
register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/23/speaker-blog-casc-part-1/</id>
<title>Jenkins Configuration-as-Code: Look ma, no hands</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-08-23T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/23/speaker-blog-casc-part-1/" />
<author>
<name>ndeloof</name>
</author>
<category term="configuration-as-code"></category>
<category term="jenkinsworld"></category>
<category term="jenkinsworld2018"></category>
<summary>
This blog post is part 1 of a Configuration-as-Code series





Jenkins is highly flexible and is today the de facto standard for implementing CI/CD, with an active community to maintain plugins for almost any combination of tools and use-cases.
But flexibility has a cost: in addition to Jenkins core, many plugins require some system-level configuration to be set so they can do their job.


In some circumstances, "Jenkins Administrator" is a full time position.
One person is responsible for both maintaining the infrastructure, and also pampering a huge Jenkins master with hundred installed plugins and thousands hosted jobs.
Maintaining up-to-date plugin versions is a challenge...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This blog post is part 1 of a Configuration-as-Code series
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins is highly flexible and is today the de facto standard for implementing CI/CD, with an active community to maintain plugins for almost any combination of tools and use-cases.
But flexibility has a cost: in addition to Jenkins core, many plugins require some system-level configuration to be set so they can do their job.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In some circumstances, &quot;Jenkins Administrator&quot; is a full time position.
One person is responsible for both maintaining the infrastructure, and also pampering a huge Jenkins master with hundred installed plugins and thousands hosted jobs.
Maintaining up-to-date plugin versions is a challenge and failover is a nightmare.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is like years ago when system administrators had to manage dedicated machines per service.
In 2018, everything is managed as code using infrastructure automation tools and virtualization.
Need a fresh new application server as staging environment for your application? Just deploy a Docker container.
Infrastructure is missing resources? Apply a Terraform recipe to allocate more on your favourite Cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What about the Jenkins administrator role in this context? Should they still spend hours in the web UI, clicking checkboxes on web forms? Maybe they already adopted some automation, relying on Groovy script voodoo, or some home-made XML templating?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Early this year we announced the first alpha release of “Jenkins Configuration-as-Code” (JCasC), a fresh new approach to Jenkins configuration management, based on YAML configuration files and automatic model discovery.
“JCasC” has been promoted as a
&lt;a href=&quot;https://jenkins.io/projects/&quot;&gt;top-level&lt;/a&gt; Jenkins project, and the corresponding
&lt;a href=&quot;https://github.com/jenkinsci/jep/tree/master/jep/201/&quot;&gt;Jenkins Enhancement Proposal&lt;/a&gt; has been accepted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-can-jcasc-do-for-our-jenkins-administrator&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-can-jcasc-do-for-our-jenkins-administrator&quot;&gt;&lt;/a&gt;What can JCasC do for our Jenkins Administrator?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JCasC allows us to apply a set of YAML files on our Jenkins master at startup or on-demand via the web UI.
Those configuration files are very concise and human readable compared to verbose XML files the Jenkins uses to actually store configuration.
The files also have user-friendly naming conventions making it easy for administrators to configure all Jenkins components.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s an example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#606&quot;&gt;jenkins&lt;/span&gt;:
 &lt;span style=&quot;color:#606&quot;&gt;systemMessage&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Jenkins managed by Configuration as Code&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

 &lt;span style=&quot;color:#606&quot;&gt;securityRealm&lt;/span&gt;:
   &lt;span style=&quot;color:#606&quot;&gt;ldap&lt;/span&gt;:
     &lt;span style=&quot;color:#606&quot;&gt;configurations&lt;/span&gt;:
       - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;server: ldap.acme.com&lt;/span&gt;&lt;/span&gt;
         &lt;span style=&quot;color:#606&quot;&gt;rootDN&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;dc=acme,dc=fr&lt;/span&gt;&lt;/span&gt;
         &lt;span style=&quot;color:#606&quot;&gt;managerPasswordSecret&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;${LDAP_PASSWORD}&lt;/span&gt;&lt;/span&gt;
     &lt;span style=&quot;color:#606&quot;&gt;cache&lt;/span&gt;:
       &lt;span style=&quot;color:#606&quot;&gt;size&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;100&lt;/span&gt;&lt;/span&gt;
       &lt;span style=&quot;color:#606&quot;&gt;ttl&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;10&lt;/span&gt;&lt;/span&gt;
     &lt;span style=&quot;color:#606&quot;&gt;userIdStrategy&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;CaseInsensitive&lt;/span&gt;&lt;/span&gt;
     &lt;span style=&quot;color:#606&quot;&gt;groupIdStrategy&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;CaseSensitive&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, you don’t need long explanation to understand how this YAML file will setup your Jenkins master.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;benefits&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#benefits&quot;&gt;&lt;/a&gt;Benefits&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most immediate benefit of JCasC is reproducibility.
An administrator can now bootstrap a new Jenkins master with the exact same configuration with a trivial setup.
This allows them to create a test instance and check the impact of plugin upgrades in a sandboxed environment.
This also lets them be more confident with failover and disaster recovery scenarios.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further benefits come when administrators start managing their Jenkins’ YAML configuration files in source control, like they do with Terraform configuration.
Doing so gives them auditing and reversibility of their Jenkins master configuration.
Theycan establish a sane configuration change workflow that runs a test Jenkins instance and ensures configuration is healthy before actually applying any change to their production Jenkins master.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last but not least, with ability to quickly setup Jenkins masters and control them from a set of shared YAML configuration files, administrators can now offer per-team Jenkins instances, with more flexibility on installed plugins.
A Master becomes more or less a transient piece of infrastructure for your team, as long as they also manage build definition with Jenkinsfiles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Configuration-as-Code we can stop having to treat our Jenkins master like a pet we need to pamper, and start managing Jenkins masters as cattle you can replace without effort nor impacts.
Welcome in the “as-code” world.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-casc/image4.jpg&quot; alt=&quot;Cattle not pets&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. They are still cute though, right?&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ok-so-whats-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ok-so-whats-next&quot;&gt;&lt;/a&gt;Ok, so what’s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can read more about the Jenkins Configuration-as-Code plugin on the project’s
&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin&quot;&gt;github repository&lt;/a&gt;.
To chat with the community and contributors join our
&lt;a href=&quot;https://gitter.im/jenkinsci/configuration-as-code-plugin&quot;&gt;gitter channel&lt;/a&gt;,
or come see us in person at
link:&lt;a href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;Jenkins World&lt;/a&gt; to discuss the JCasC project and its future!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also don’t miss next post from the Configuration-as-Code series, where we’ll look at how JCasC works with sensitive data like passwords and other credentials.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come meet the Configuration as Code contributors, Nicolas de Loof and Ewelina Wilkosz at
&lt;a href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;Jenkins World&lt;/a&gt; on September 16-19th,
register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/21/contributor-summit-nice/</id>
<title>Join us at the Jenkins Contributor Summit Nice, Tuesday 23 October 2018</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-08-21T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/21/contributor-summit-nice/" />
<author>
<name>tracymiranda</name>
</author>
<category term="community"></category>
<category term="events"></category>
<category term="jenkins-world"></category>
<summary>
The Jenkins Contributor summit is where the current and future contributors of the Jenkins project get together.
This summit will be on Tuesday, October 23rd 2018 in Nice, France just before Jenkins World.
The summit brings together community members to learn, meet and help shape the future of Jenkins.
In the Jenkins commmunity we value all types and sizes of contributions and love to welcome new participants.
It is free to join, just register here.


Topics


There are plenty of exciting developments happening in the Jenkins community.
The summit will feature a 'State of the Project' update including updates from the Jenkins officers.
We will also have updates...
</summary>
<content type="html">
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/conferences/devops-world-cs-Nice.jpg&quot; alt=&quot;devops world cs Nice&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins Contributor summit is where the current and future contributors of the Jenkins project get together.
This summit will be on Tuesday, October 23rd 2018 in Nice, France just before &lt;a href=&quot;https://www.cloudbees.com/devops-world/nice&quot;&gt;Jenkins World&lt;/a&gt;.
The summit brings together community members to learn, meet and help shape the future of Jenkins.
In the Jenkins commmunity we value all types and sizes of contributions and love to welcome new participants.
It is free to join, just register &lt;a href=&quot;https://www.eventbrite.com/e/contributor-summit-nice-tickets-48353733318&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;topics&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#topics&quot;&gt;&lt;/a&gt;Topics&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are plenty of exciting developments happening in the Jenkins community.
The summit will feature a 'State of the Project' update including updates from the Jenkins officers.
We will also have updates on the 'Big 5' projects in active development:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/04/06/jenkins-essentials&quot;&gt;Jenkins Evergreen&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins-x.io&quot;&gt;Jenkins X&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.praqma.com/stories/jenkins-configuration-as-code&quot;&gt;Configuration as Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/doc/book/pipeline&quot;&gt;Jenkins Pipeline&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs/cloud-native&quot;&gt;Cloud Native Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Plus we will feature a &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/projects/gsoc&quot;&gt;Google Summer of Code&lt;/a&gt; update, &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/sigs&quot;&gt;Special Interest Group&lt;/a&gt; updates and more!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;agenda&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#agenda&quot;&gt;&lt;/a&gt;Agenda&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The agenda is shaping up well and here is the outline so far.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;9:00am Kickoff &amp;amp; Welcome with coffee/pastries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;10:00am Project Updates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;12:00pm Lunch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1.00pm BoF/Unconference&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3.00pm Break&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3.30pm Ignite Talks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5.00pm Wrap-up&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;6.00pm Contributor Dinner&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The BoF (birds-of-a-feather) session will be an opportunity for in depth discussions, hacking or learning more about any of the big 5.
Bring your laptop, come prepared with questions and ideas, and be ready for some hacking too if you want.
Join in, hear the latest and get involved in any project during the BoF sessions.
If you want to share anything there will be an opportunity to do a 5-min ignite talk at the end.
Attending is free, and no DevOps World | Jenkins World ticket is needed, but &lt;a href=&quot;https://www.eventbrite.com/e/contributor-summit-nice-tickets-48353733318&quot;&gt;RSVP&lt;/a&gt; if you are going to attend to help us plan.
See you there!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/17/speaker-blog-brent-laster/</id>
<title>Using the Docker Global Variable in Your Jenkins Pipeline</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-08-17T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/17/speaker-blog-brent-laster/" />
<author>
<name>brentlaster</name>
</author>
<category term="event"></category>
<category term="jenkinsworld"></category>
<category term="jenkinsworld2018"></category>
<category term="pipeline"></category>
<category term="docker"></category>
<summary>
This a guest post by Brent Laster, DevOps World | Jenkins World 2018 Speaker and author of "Jenkins 2 – Up and Running:  Evolve Your Pipeline for Next-Generation Automation".








More and more today, continuous delivery (CD) pipelines are making use of containers.
In many implementations, the primary workflow/orchestration tool for CD pipelines is Jenkins.
And the primary container orchestration tool is Docker.
Together these two applications provide a powerful, yet simple to understand and use, model for leveraging containers in your CD pipeline.


When creating a pipeline script in Jenkins, there are multiple ways to incorporate Docker into your CD pipeline.
They include:




Manually running a...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This a guest post by Brent Laster, DevOps World | Jenkins World 2018 Speaker and author of &quot;&lt;a href=&quot;https://www.amazon.com/Jenkins-Deployment-Pipeline-Generation-Automation/dp/1491979593&quot;&gt;Jenkins 2 – Up and Running:  Evolve Your Pipeline for Next-Generation Automation&lt;/a&gt;&quot;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/conferences/devops-world-2018.jpg&quot; alt=&quot;DevOps World | Jenkins World 2018&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More and more today, continuous delivery (CD) pipelines are making use of containers.
In many implementations, the primary workflow/orchestration tool for CD pipelines is Jenkins.
And the primary container orchestration tool is Docker.
Together these two applications provide a powerful, yet simple to understand and use, model for leveraging containers in your CD pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When creating a pipeline script in Jenkins, there are multiple ways to incorporate Docker into your CD pipeline.
They include:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Manually running a predefined Docker image as a separate Jenkins agent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automatically provisioning a Docker image, when needed, as a part of a “cloud” configuration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Referencing a “docker” global variable that can be invoked via the Jenkins DSL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calling the Docker executable directly via a shell call in the Jenkins DSL&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this article, we’ll focus on the third item in this list given that it provides the most flexibility and convenience for Docker use in the pipeline.
More details on the other three can be found in the upcoming “Continuous Delivery and Containerization” workshop at Jenkins World/DevOps World 2018.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, we’ll provide some background on a couple of terms for those who may not be familiar with Jenkins 2.
If you already are familiar with it, feel free to skip ahead to the Global Variables section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;background&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we talk about Jenkins here, we’re referring to “Jenkins 2” - a name we use to generally refer to the 2.0 and beyond versions of Jenkins.
Jenkins 2 offers a powerful evolution of Jenkins over prior versions.
In particular, it provides full integration for “pipeline-as-code” (PAC).
PAC refers to being able to write your pipeline in a scripting language, much like source code for any program.
The code you write becomes the program that defines your pipeline.
It is also the code that gets executed when your pipeline is initiated.
Listing 1 shows a simple example pipeline.
Notice that this is very different from the classic way of creating pipelines in Jenkins.
Here you are writing code - rather than the more traditional approaches, such as filling in web forms to configure a Freestyle job.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: true&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;worker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Source&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) { &lt;span style=&quot;color:#777&quot;&gt;// Get code&lt;/span&gt;
        &lt;span style=&quot;color:#777&quot;&gt;// Get code from our git repository&lt;/span&gt;
        git &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;git@diyvb2:/home/git/repositories/workshop.git&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Compile&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) { &lt;span style=&quot;color:#777&quot;&gt;// Compile and do unit testing&lt;/span&gt;
        &lt;span style=&quot;color:#777&quot;&gt;// Run gradle to execute compile and unit testing&lt;/span&gt;
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;gradle clean compileJava test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Listing 1: Example Jenkins 2 pipeline&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The language that we write the Jenkins pipeline code in is a Domain-Specific Language (DSL).
You can think of it as the “programming language” for Jenkins pipelines.
There are two variants of it.
The style we saw in figure 1 is called “scripted syntax”.
It is a mixture of elements from the Groovy programming language and special Jenkins “steps”.
The Jenkins steps are provided by the plugins that are installed in the current system.
A built-in tool called the Snippet Generator provides a wizard interface to allow users to pick the step and options they want.
Then, the user can click on a button to have Jenkins automatically generate the correct DSL code in the large text box (figure 1).
The DSL code can be copied from there and pasted into the pipeline script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-08-17/figure1.png&quot; alt=&quot;The Snippet Generator&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. The Snippet Generator&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A second type of syntax is called “declarative syntax.”  We won’t go into detail on it here.
But it is a much more structured syntax that focuses on having users declare what they want in a pipeline, rather than writing the logic to make it happen.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;global-variables&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#global-variables&quot;&gt;&lt;/a&gt;Global Variables&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the steps that are provided by plugins, additional functionality for pipelines can be provided by global variables.
The simplest way to think of a global variable is as an object with methods that can be invoked on it.
Several of these are built in to Jenkins, such as the Docker global variable.
Others can be created by users as part of the structure of a shared source code repository called a “shared pipeline library.”&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get a list of the global variables that are currently available to your Jenkins instance, you can go to the Snippet Generator screen.
Immediately below the box for the generated pipeline script is a section titled Global Variables.
There, within the small print, is a link to get to the actual section (figure 2).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-08-17/figure2.png&quot; alt=&quot;Link to Global Variables Reference section&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Link to Global Variables Reference section.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clicking on that link takes us to a list of currently available Global Variables.
If you have the Docker Pipeline Plugin installed, you will see one at the top for Docker. (Figure 3).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-08-17/figure3.png&quot; alt=&quot;Docker global variable specifics&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Docker global variable specifics.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Broadly, the docker global variable includes methods that can be applied to the Docker application, Docker images, and Docker containers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ll focus first on a couple of the Docker image methods as shown in figure 4.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-08-17/figure4.png&quot; alt=&quot;Key methods for getting a Docker image&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Key methods for getting a Docker image.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are multiple ways you can use these methods to create a new image.
Listing 2 shows a basic example of assigning and pulling an image using the image method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;myImage = docker.image(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bclaster/jenkins-node:1.0&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
myImage.pull()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Listing 2: Assigning a image to a variable and pulling it down.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This can also be done in a single statement as shown in listing 3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;docker.image(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bclaster/jenkins-node:1.0&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).pull()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Listing 3: Shorthand version of previous call.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also download a Dockerfile and build an image based on it.(See listing 4.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node() {
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; myImg
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build image&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
        &lt;span style=&quot;color:#777&quot;&gt;// download the dockerfile to build from&lt;/span&gt;
        git &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;git@diyvb:repos/dockerResources.git&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

        &lt;span style=&quot;color:#777&quot;&gt;// build our docker image&lt;/span&gt;
        myImg = docker.build &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;my-image:snapshot&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Listing 4: Pipeline code to download a Dockerfile and build an image from it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Figure 5 shows the actual output from running that “Build image” stage.
Note that the docker.build step was translated into an actual Docker build command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-08-17/figure5.png&quot; alt=&quot;Actual Docker output from running the download and build&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. Actual Docker output from running the download and build&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-inside-command&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-inside-command&quot;&gt;&lt;/a&gt;The Inside Command&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another powerful method available for the Docker global variable is the inside method.
When executed, this method will do the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Get an agent and a workspace to execute on&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the Docker image is not already present, pull it down&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the container with that image&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mount the workspace from Jenkins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute the build steps&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mounting the workspace means that the Jenkins workspace will appear as a volume inside the container.
And it will have the same file path.
So, things running in the container will have direct access to the same location.
However, this can only be done if the container is running on the same underlying system - such that it can directly access the path.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In terms of executing the build steps, the inside method acts as a scoping method.
This means that the environment it sets up is in effect for any statement that happens within its scope (within the block under it bounded by {}).
The practical application here is that any pipeline “sh” steps (a call to the shell to execute something) are automatically run in the container.
Behind the scenes, this is done by wrapping the calls with “docker exec”.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When executed, the calls with the global variable are translated (by Jenkins) into actual Docker call invocations.
Listing 5 shows an example of using this in a script, along with the output from the first invocation of the “inside” method.
You can see in the output the docker commands that are generated from the inside method call.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Get Source&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
        &lt;span style=&quot;color:#777&quot;&gt;// run a command to get the source code download&lt;/span&gt;
        myImg.inside(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;-v /home/git/repos:/home/git/repos&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
            sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;rm -rf gradle-greetings&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
            sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;git clone --branch test /home/git/repos/gradle-greetings.git&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        }
    }
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Run Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
        myImg.inside() {
            sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;cd gradle-greetings &amp;amp;&amp;amp; gradle -g /tmp clean build -x test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        }
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Listing 5: Example inside method usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-08-17/figure6.png&quot; alt=&quot;Example inside method Docker command output&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. Example inside method Docker command output.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once completed, the inside step will stop the container,
get rid of the storage, and create a record that this image was used for the build.
That record facilitates image traceability, updates, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the combination of using the Docker “global variable” and its “inside” method provide a simple and powerful way to spin up and work with containers in your pipeline.
In addition, since you are not having to make the direct Docker calls, you can invoke steps like sh within the scope of the inside method, and have them executed by Docker transparently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we mentioned, this is only one of several ways you can interact with Docker in your pipeline code.
To learn about the other methods and get hands-on practice, join me at DevOps World/Jenkins World in San Francisco or Nice for the workshop
&quot;&lt;a href=&quot;https://devopsworldjenkinsworld2018.sched.com/event/FYjP/creating-a-deployment-pipeline-with-jenkins-2&quot;&gt;Creating a Deployment Pipeline with Jenkins 2&lt;/a&gt;&quot;.
Hope to see you there!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Join the Jenkins project at
&lt;a href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;Jenkins World&lt;/a&gt; on September 16-19th,
register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/17/code-coverage-api-plugin-1/</id>
<title>Code Coverage API plugin: 1.0 Release</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-08-17T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/17/code-coverage-api-plugin-1/" />
<author>
<name>shenyu_zheng</name>
</author>
<category term="plugins"></category>
<category term="gsoc"></category>
<category term="gsoc2018"></category>
<summary>
I am happy to announce availability of Code Coverage API. These plugins have been recently released as 1.0, and they are now available in the Jenkins Update Center. In this blogpost I will introduce the features and project structure of Code Coverage API plugin.


My name is Shenyu Zheng, and I am an undergraduate student in Computer Science and Technology at Henan University from China.


Overview

Code Coverage API plugin is one of GSoC 2018 Jenkins projects.


There are a lot of plugins which currently implement code coverage; however, they all use similar config, charts, and content. So it would be much better if...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am happy to announce availability of Code Coverage API. These plugins have been recently released as 1.0, and they are now available in the Jenkins Update Center. In this blogpost I will introduce the features and project structure of Code Coverage API plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My name is Shenyu Zheng, and I am an undergraduate student in Computer Science and Technology at Henan University from China.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;overview&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Code Coverage API plugin is one of &lt;a href=&quot;https://jenkins.io/projects/gsoc/&quot;&gt;GSoC 2018 Jenkins projects&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are a lot of plugins which currently implement code coverage; however, they all use similar config, charts, and content. So it would be much better if we could have an API plugin which does the most repeated work for those plugins and offers a unified API which can be consumed by other plugins and external tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My mentors are &lt;a href=&quot;https://github.com/christ66&quot;&gt;Steven Christou&lt;/a&gt;, &lt;a href=&quot;https://github.com/Supun94&quot;&gt;Supun Wanniarachchi&lt;/a&gt;, &lt;a href=&quot;https://github.com/jeffpearce&quot;&gt;Jeff Pearce&lt;/a&gt; and &lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Oleg Nenashev&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;supported-coverage-formats&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#supported-coverage-formats&quot;&gt;&lt;/a&gt;Supported Coverage Formats&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Embedded&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JaCoCo&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other plugins as an Extension of Code Coverage API plugin&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cobertura (&lt;a href=&quot;https://github.com/jenkinsci/cobertura-plugin&quot;&gt;Cobertura Plugin&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;llvm-cov (&lt;a href=&quot;https://github.com/jenkinsci/llvm-cov-plugin&quot;&gt;llvm-cov Plugin&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#features&quot;&gt;&lt;/a&gt;Features&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Modernized coverage chart&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Coverage trend&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source code navigation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parallel pipeline support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reports combining&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REST API&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Failed conditions and flexible threshold setting&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other small features&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;modernized-coverage-chart&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#modernized-coverage-chart&quot;&gt;&lt;/a&gt;Modernized Coverage Chart&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the summary chart we can see the coverage summary of current coverage metric.
&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-06-13-code-coverage-api-plugin/summary-chart.gif&quot; alt=&quot;summary chart&quot; title=&quot;Summary Chart&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the child summary chart, we can see the coverage summary of each child, also, we can use the range handler to filter item we want to see to reduce the chart size. If we want to see coverage details of the child, we can click the child name to see more information.
&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-06-13-code-coverage-api-plugin/child-summary-chart.gif&quot; alt=&quot;child summary chart&quot; title=&quot;Child Summary Chart&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;coverage-trend&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#coverage-trend&quot;&gt;&lt;/a&gt;Coverage Trend&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also support coverage trend to show coverage metrics changing between builds.
&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/2018-06-13-code-coverage-api-plugin/trend-chart.gif&quot; alt=&quot;trend chart&quot; title=&quot;Trend Chart&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;source-code-navigation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#source-code-navigation&quot;&gt;&lt;/a&gt;Source Code Navigation&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can enable source code navigation by specifying Source File Storing Level to save last build source files (enable source files navigation in current and last build) or save all build source files (enable source files navigation in all builds).
&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/code-coverage-api/source-files-config.png&quot; alt=&quot;source files config&quot; title=&quot;Source File Navigation Configuration&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see source file with coverage information on File level coverage page.
&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/code-coverage-api/source-files-result.png&quot; alt=&quot;source files result&quot; title=&quot;Source File Navigation Result&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;parallel-pipeline-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#parallel-pipeline-support&quot;&gt;&lt;/a&gt;Parallel Pipeline Support&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We support parallel pipeline. You can call the Code Coverage API plugin in different branches like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node {
    parallel &lt;span style=&quot;color:#606&quot;&gt;firstBranch&lt;/span&gt;: {
        publishCoverage &lt;span style=&quot;color:#606&quot;&gt;adapters&lt;/span&gt;: [jacocoAdapter(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;target/site/jacoco/jacoco.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)]
}, &lt;span style=&quot;color:#606&quot;&gt;secondBranch&lt;/span&gt;: {
        publishCoverage &lt;span style=&quot;color:#606&quot;&gt;adapters&lt;/span&gt;: [jacocoAdapter(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jacoco.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)]
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;reports-combining&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#reports-combining&quot;&gt;&lt;/a&gt;Reports Combining&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can add tag on &lt;code&gt;publishCoverage&lt;/code&gt; and Code Coverage API plugin will combine reports have same tag&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;node {
    parallel firstBranch: {
        publishCoverage adapters: [jacocoAdapter('target/site/jacoco/jacoco.xml')], tag: ‘t’
}, secondBranch: {
        publishCoverage adapters: [jacocoAdapter('jacoco.xml')], tag: ‘t’
    }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;rest-api&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rest-api&quot;&gt;&lt;/a&gt;REST API&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We provide a REST API to retrieve coverage data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Coverage result: &lt;code&gt;…​/{buildNumber}/coverage/…​/result/api/\{json|xml\}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trend result: &lt;code&gt;…​/{buildNumber}/coverage/…​/trend/api/\{json|xml\}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Coverage result of last build: &lt;code&gt;…​/{buildNumber}/coverage/…​/last/result/api/\{json|xml\}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trend result of last build: &lt;code&gt;…​/{buildNumber}/coverage/…​/last/trend/api/\{json|xml\}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;failed-conditions-and-flexible-threshold-setting&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#failed-conditions-and-flexible-threshold-setting&quot;&gt;&lt;/a&gt;Failed Conditions and Flexible Threshold Setting&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can set different failed conditions and threholds to control build result.
&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/code-coverage-api/thresholds-config.png&quot; alt=&quot;thresholds config&quot; title=&quot;Thresholds Configuration&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the thresholds satisfy the failed conditions, it will fail the build.
&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/code-coverage-api/thresholds-result.png&quot; alt=&quot;thresholds result&quot; title=&quot;Thresholds Result&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;other-small-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#other-small-features&quot;&gt;&lt;/a&gt;Other Small Features&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also have other small features like auto detecting reports, coverage filters, etc. You can find more information about these features in the plugin documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;architecture&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#architecture&quot;&gt;&lt;/a&gt;Architecture&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This API plugin will mainly do these things:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Find coverage reports according to the user’s config.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use adapters to convert reports into the our standard format.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parse standard format reports, and aggregate them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Show parsed result in a chart.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, we can implement code coverage publishing by simply writing an adapter, and such adapter only needs to do one thing - convert a coverage report into the standard format. The implementation is based on extension points, so new adapters can be created in separate plugins. In order to simplify conversion for XML reports, there is also an abstraction layer which allows creating XSLT-based converters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;The below diagram show the architecture of Code Coverage API plugin&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/post-images/code-coverage-api/architecture.png&quot; alt=&quot;architecture&quot; title=&quot;Code Coverage API Plugin Architecture&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;implementing-a-new-coverage-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#implementing-a-new-coverage-plugin&quot;&gt;&lt;/a&gt;Implementing a New Coverage Plugin&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can implement a coverage plugin by implementing CoverageReportAdapter extension point. For example, by using the provided abstract layer, we can implement JaCoCo simple like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;JacocoReportAdapter&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;extends&lt;/span&gt; JavaXMLCoverageReportAdapter {

    &lt;span style=&quot;color:#007&quot;&gt;@DataBoundConstructor&lt;/span&gt;
    &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; JacocoReportAdapter(&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; path) {
        &lt;span style=&quot;color:#950&quot;&gt;super&lt;/span&gt;(path);
    }

    &lt;span style=&quot;color:#777&quot;&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span style=&quot;color:#007&quot;&gt;@Override&lt;/span&gt;
    &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; getXSL() {
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jacoco-to-standard.xsl&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
    }

    &lt;span style=&quot;color:#777&quot;&gt;/**
     * {@inheritDoc}
     */&lt;/span&gt;
    &lt;span style=&quot;color:#007&quot;&gt;@Override&lt;/span&gt;
    &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; getXSD() {
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#069&quot;&gt;null&lt;/span&gt;;
    }

    &lt;span style=&quot;color:#007&quot;&gt;@Symbol&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jacoco&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
    &lt;span style=&quot;color:#007&quot;&gt;@Extension&lt;/span&gt;
    &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;JacocoReportAdapterDescriptor&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;extends&lt;/span&gt; JavaCoverageReportAdapterDescriptor {

        &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; JacocoReportAdapterDescriptor() {
            &lt;span style=&quot;color:#950&quot;&gt;super&lt;/span&gt;(JacocoReportAdapter.class);
        }

        &lt;span style=&quot;color:#007&quot;&gt;@Nonnull&lt;/span&gt;
        &lt;span style=&quot;color:#007&quot;&gt;@Override&lt;/span&gt;
        &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; getDisplayName() {
            &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; Messages.JacocoReportAdapter_displayName();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All we need is to extend an abstract layer for XML-based Java report and provide an XSL file to convert the report to our standard format. There are also other extension points which are under development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want implement a new coverage format that we did not provide abstract layer, you need to register `CoverageElement`s and implement an simple parser. See &lt;a href=&quot;https://github.com/jenkinsci/llvm-cov-plugin&quot;&gt;llvm-cov Plugin&lt;/a&gt; to get more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;future-tasks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#future-tasks&quot;&gt;&lt;/a&gt;Future Tasks&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Support more coverage tools (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-52467&quot;&gt;JENKINS-52467&lt;/a&gt;, &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-52469&quot;&gt;JENKINS-52469&lt;/a&gt; and etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make the UI extensible (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-51738&quot;&gt;JENKINS-51738&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improve performance (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-52982&quot;&gt;JENKINS-52982&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;phase-3-presentation-slides&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#phase-3-presentation-slides&quot;&gt;&lt;/a&gt;Phase 3 Presentation Slides&lt;/h3&gt;
&lt;center&gt;
&lt;iframe src=&quot;https://docs.google.com/presentation/d/e/2PACX-1vThjuFZCChtXhHOKINDxuC4Sfbv0JtHDN9GqWZFe7DfmbEOPZOk-t8DYZJSDEMeMWFpLeTqOAZgj0pB/embed?start=false&amp;amp;loop=false&amp;amp;delayms=3000&quot; frameborder=&quot;0&quot; width=&quot;720&quot; height=&quot;434&quot; allowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;phase-3-presentation-video&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#phase-3-presentation-video&quot;&gt;&lt;/a&gt;Phase 3 Presentation Video&lt;/h3&gt;
&lt;center&gt;
  &lt;iframe width=&quot;720&quot; height=&quot;434&quot; src=&quot;https://www.youtube.com/embed/GGEtN4nbtng&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/jenkinsci/code-coverage-api-plugin&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/jenkinsci/code-coverage-api-plugin.svg&quot; alt=&quot;title: &amp;quot;Gitter&amp;quot;&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/issues/?jql=project+%3D+JENKINS+AND+component+%3D+code-coverage-api-plugin&quot;&gt;JIRA Component&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/projects/gsoc/2018/code-coverage-api-plugin/&quot;&gt;Project Page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/code-coverage-api-plugin&quot;&gt;Project Repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/16/dwjw-2018-is-almost-here/</id>
<title>DevOps World | Jenkins World 2018 is Almost Here</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-08-16T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/16/dwjw-2018-is-almost-here/" />
<author>
<name>lnewman</name>
</author>
<category term="event"></category>
<category term="jenkinsworld"></category>
<category term="jenkinsworld2018"></category>
<summary>
DevOps World | Jenkins World 2018 in San Francisco is only a month away.
It is shaping up to be a great event including the Contributor Summit,
the "Ask the Experts" desk at the Jenkin booth, several days of training and certifications,
and tons of informative presentation and demos.


To give you a taste of what you&#8217;ll see this year at DevOps World | Jenkins World 2018,
we&#8217;ve lined up a series of guest blog posts by a number of this years speakers,
starting in the next week with posts from Tracy Miranda, Brent Laster, and Nicholas De Loof.
For now, let&#8217;s take a look at last...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/conferences/devops-world-2018.jpg&quot; alt=&quot;DevOps World | Jenkins World 2018&quot; /&gt;&lt;/a&gt;&lt;/span&gt;
DevOps World | Jenkins World 2018 in San Francisco is only a month away.
It is shaping up to be a great event including the Contributor Summit,
the &quot;Ask the Experts&quot; desk at the Jenkin booth, several days of training and certifications,
and tons of informative presentation and demos.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To give you a taste of what you’ll see this year at DevOps World | Jenkins World 2018,
we’ve lined up a series of guest blog posts by a number of this years speakers,
starting in the next week with posts from Tracy Miranda, Brent Laster, and Nicholas De Loof.
For now, let’s take a look at last year’s keynote from Kohsuke Kawaguchi.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/gPxSwb1gQ7U?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stay tuned!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Join the Jenkins project at
&lt;a href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;Jenkins World&lt;/a&gt; on September 16-19th,
register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/15/security-updates/</id>
<title>Jenkins 2.121.3 and 2.138 security updates</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-08-15T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/15/security-updates/" />
<author>
<name>daniel-beck</name>
</author>
<category term="core"></category>
<category term="security"></category>
<summary>
We just released security updates to Jenkins, versions 2.138 and 2.121.3, that fix multiple security vulnerabilities.


For an overview of what was fixed, see the security advisory.
For an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.


Subscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security....
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We just released security updates to Jenkins, versions 2.138 and 2.121.3, that fix multiple security vulnerabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For an overview of what was fixed, see the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/security/advisory/2018-08-15&quot;&gt;security advisory&lt;/a&gt;.
For an overview on the possible impact of these changes on upgrading Jenkins LTS, see our &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/doc/upgrade-guide/2.121/#upgrading-to-jenkins-lts-2-121-3&quot;&gt;LTS upgrade guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Subscribe to the &lt;a href=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/mailing-lists&quot;&gt;jenkinsci-advisories mailing list&lt;/a&gt; to receive important notifications related to Jenkins security.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/14/simple-pull-request-plugin-final-evaluation/</id>
<title>alpha-3 release Pipeline as YAML (Simple pull request plugin)</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-08-14T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/14/simple-pull-request-plugin-final-evaluation/" />
<author>
<name>abhishek_gautam</name>
</author>
<category term="gsoc2018"></category>
<category term="plugin"></category>
<category term="pipeline"></category>
<category term="yaml"></category>
<summary>
About me

I am Abhishek Gautam, 3rd year student from Visvesvaraya National Institute of
technology, India, Nagpur. I was a member of ACM Chapter and Google student developer club of my
college. I am passionate about automation.



Project Summary

This is a GSoC 2018 project.


This project aims to develop a pull request Job Plugin. Users should be able to
configure job type using YAML file placed in root directory of the
Git repository being the subject of the pull request. The plugin should interact with various
platforms like Bitbucket, Github, Gitlab, etc whenever a pull request is created or updated.


Plugin detects the presence of certain types of reports...
</summary>
<content type="html">
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;about-me&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#about-me&quot;&gt;&lt;/a&gt;About me&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am Abhishek Gautam, 3rd year student from Visvesvaraya National Institute of
technology, India, Nagpur. I was a member of ACM Chapter and Google student developer club of my
college. I am passionate about automation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;project-summary&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#project-summary&quot;&gt;&lt;/a&gt;Project Summary&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a GSoC 2018 project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This project aims to develop a pull request Job Plugin. Users should be able to
configure job type using YAML file placed in root directory of the
Git repository being the subject of the pull request. The plugin should interact with various
platforms like Bitbucket, Github, Gitlab, etc whenever a pull request is created or updated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Plugin detects the presence of certain types of reports at conventional locations,
and publish them automatically. If the reports are not present at their respective conventional
location, the location of the report can be configured in the YAML file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My mentors are
&lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Oleg Nenashev&lt;/a&gt; (Org Admin),
&lt;a href=&quot;https://github.com/martinda&quot;&gt;Martin d’Anjou&lt;/a&gt;,
&lt;a href=&quot;https://github.com/kwhetstone&quot;&gt;Kristin Whetstone&lt;/a&gt;,
&lt;a href=&quot;https://github.com/grandvizier&quot;&gt;Jeff Knurek&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;project-repository&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#project-repository&quot;&gt;&lt;/a&gt;Project Repository&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/simple-pull-request-job-plugin&quot;&gt;Project repository&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;code-changes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#code-changes&quot;&gt;&lt;/a&gt;Code changes&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the pull requests made can be found &lt;a href=&quot;https://github.com/jenkinsci/simple-pull-request-job-plugin/pulls?q=is%3Apr+is%3Aclosed&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;list-of-major-pull-requests&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#list-of-major-pull-requests&quot;&gt;&lt;/a&gt;List of major pull requests.&lt;/h4&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;phase-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#phase-1&quot;&gt;&lt;/a&gt;Phase 1&lt;/h5&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/simple-pull-request-job-plugin/pull/5&quot;&gt;PR-5&lt;/a&gt;: Git wrappers like clone, pull, checkout,
pullChangesOfPullrequest, merge, deleteBranch and merge added.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/simple-pull-request-job-plugin/pull/6&quot;&gt;PR-6&lt;/a&gt;: Yaml to Declarative Pipeline code generation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please see &lt;a href=&quot;https://jenkins.io/blog/2018/06/15/simple-pull-request-plugin/&quot;&gt;Phase 1 blog post&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;phase-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#phase-2&quot;&gt;&lt;/a&gt;Phase 2&lt;/h5&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/simple-pull-request-job-plugin/pull/11&quot;&gt;PR-11&lt;/a&gt;: Implemented StepConfigurator
using Jenkins configuration as code plugin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/simple-pull-request-job-plugin/pull/19&quot;&gt;PR-19&lt;/a&gt;: Unit tests created for agent and yaml to pipeline generation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please see &lt;a href=&quot;https://jenkins.io/blog/2018/07/17/simple-pull-request-plugin/&quot;&gt;Phase 2 blog post&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;phase-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#phase-3&quot;&gt;&lt;/a&gt;Phase 3&lt;/h5&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/simple-pull-request-job-plugin/pull/25&quot;&gt;PR-25&lt;/a&gt;: Declarative pipeline code generator code
exported to extensions for extensibility and support of custom sections&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jenkinsfile-yaml-example&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkinsfile-yaml-example&quot;&gt;&lt;/a&gt;Jenkinsfile.yaml example&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Documentation of Jenkinsfile.yaml and yaml format can be found &lt;a href=&quot;https://github.com/jenkinsci/simple-pull-request-job-plugin/tree/master/yamlExamples&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tasks-completed-in-coding-phase-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tasks-completed-in-coding-phase-3&quot;&gt;&lt;/a&gt;Tasks completed in Coding Phase 3&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Add unit tests, JenkinsRule tests &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-52495&quot;&gt;JENKINS-52495&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refactor snippet generator to extensions (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-52491&quot;&gt;JENKINS-52491&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plugin overview (Present in &lt;a href=&quot;https://github.com/jenkinsci/simple-pull-request-job-plugin/blob/master/README.md&quot;&gt;README.md&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;future-tasks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#future-tasks&quot;&gt;&lt;/a&gt;Future tasks&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-52452&quot;&gt;Phase 3 Jira Epic&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Release 1.0 (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-52519&quot;&gt;JENKINS-52519&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support the “when” Declarative Pipeline directive (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-52520&quot;&gt;JENKINS-52520&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nice2have: Support hierarchical report types (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-52521&quot;&gt;JENKINS-52521&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Acceptance Test Harness tests &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-52496&quot;&gt;JENKINS-52496&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automatic Workspace Cleanup when PR is closed (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-51897&quot;&gt;JENKINS-51897&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test Multi-Branch Pipeline features support:&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Support for webhooks (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-51941&quot;&gt;JENKINS-51941&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check if trusted people have approved a pull request and start build accordingly (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-52517&quot;&gt;JENKINS-52517&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finalize documentation (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-52518&quot;&gt;JENKINS-52518&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test the integration with various platforms Bitbucket, Gitlab, Github.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;phase-3-evaluation-presentation-video&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#phase-3-evaluation-presentation-video&quot;&gt;&lt;/a&gt;Phase 3 evaluation presentation video&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Video: &lt;a href=&quot;https://www.youtube.com/watch?v=GGEtN4nbtng&quot;&gt;Link to video evaluation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;
  &lt;iframe width=&quot;720&quot; height=&quot;400&quot; src=&quot;https://www.youtube.com/embed/GGEtN4nbtng?start=250&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;phase-3-evaluation-presentation-slides&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#phase-3-evaluation-presentation-slides&quot;&gt;&lt;/a&gt;Phase 3 evaluation presentation slides&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/player/46e467bc5e364cb08c39b9e4b69bdef2&quot;&gt;Link to presentation slides&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;
    &lt;iframe width=&quot;720&quot; height=&quot;400&quot; frameborder=&quot;0&quot; src=&quot;https://speakerdeck.com/player/46e467bc5e364cb08c39b9e4b69bdef2&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;my-gsoc-experience&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#my-gsoc-experience&quot;&gt;&lt;/a&gt;My GSoC experience&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Student applications started on March 12 16:00 UTC and ended on March 27 16:00 UTC. Application period allowed me to explore
many new technology and platforms that are making peoples life easy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before starting of the application
period I did not know anything about Jenkins. I found Jenkins organisation on the &lt;a href=&quot;https://summerofcode.withgoogle.com/organizations/&quot;&gt;GSoC organisations page&lt;/a&gt;
and came to know that I is a CI/CD platform that is used automate various things related to software development. I studied
about Jenkins online and went through the &lt;a href=&quot;https://jenkins.io/projects/gsoc/gsoc2018-project-ideas/&quot;&gt;problem statements provided by some mentors&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I decided that to work on &lt;a href=&quot;https://jenkins.io/projects/gsoc/gsoc2018-project-ideas/#simple-pull-request-job-plugin&quot;&gt;Simple Pull-Request Job Plugin&lt;/a&gt; project.
Then I wrote a draft proposal for this project and received many comments to refactor the proposal and enhance its quality from the mentors,
then finally I submitted my &lt;a href=&quot;https://summerofcode.withgoogle.com/serve/5141186688319488/&quot;&gt;final proposal&lt;/a&gt; to Google.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I was able to complete most of the tasks decided in Phase 1 and 2. After Phase 2 I was not able to give time to the project because
of the placement season in the my college. I modified the code so that other plugin developers can contribute to it by Jenkins extensions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the mentors made themselves available for most of the weekly calls and provided many valuable suggestions during the
entire period of GSoC. Sometimes I was not able to communicate effectively. As communication is the key while working remotely, mentors
suggested to communicate more thorough gitter chat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My overall experience of GSoC was good and all the mentors helped me as they can all times. This project allowed me to explore
Jenkins and the services offered by it. I am allowed to work on the project after GSoC ends (This is a good thing).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;how-to-reach-me&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-reach-me&quot;&gt;&lt;/a&gt;How to reach me&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Email: &lt;a href=&quot;mailto:gautamabhishek46@gmail.com&quot;&gt;gautamabhishek46@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gitter room: &lt;a href=&quot;https://gitter.im/Jenkinsci/simple-pull-request-job-plugin&quot; class=&quot;bare&quot;&gt;https://gitter.im/Jenkinsci/simple-pull-request-job-plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot;&gt;&lt;/a&gt;References&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/simple-pull-request-job-plugin&quot;&gt;Project repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/projects/gsoc/2018/simple-pull-request-job-plugin/&quot;&gt;Project page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/jenkinsci/simple-pull-request-job-plugin?utm_source=share-link&amp;amp;utm_medium=link&amp;amp;utm_campaign=share-link&quot;&gt;Gitter chat&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/issues/?jql=project%20%3D%20Jenkins%20AND%20component%20%3D%20simple-pull-request-job-plugin&quot;&gt;Bug Tracker&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/gautamabhishek46/dummy&quot;&gt;Demo Repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/06/serverless-cicd-jenkins/</id>
<title>Building a Serverless CI/CD Pipeline with Jenkins</title>
<updated>2018-11-08T20:48:43+00:00</updated>
<published>2018-08-06T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/blog/2018/08/06/serverless-cicd-jenkins/" />
<author>
<name>tracymiranda</name>
</author>
<category term="serverless"></category>
<category term="pipeline"></category>
<summary>
Everyone is talking about serverless.


As with any new hyped-technology the term 'serverless' is often overloaded with different meanings.
Sometimes serverless is oversimplified to mean function-as-a-service(faas).
But there is more to it than that.
Also, not many people are talking about doing CI/CD with serverless,
even though where there is code there still in need of continuous integration and continuous delivery.
So I was excited to hear about this talk by
Anubhav Mishra on
Building a CI/CD Pipeline for Serverless Applications.


In the talk Anubhav proposes a new definition for serverless:




Serverless is a technology pattern that provides services and concepts to minimize operational overhead that comes with managing servers.
It...
</summary>
<content type="html">
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://speakerdeck.com/anubhavmishra/building-a-serverless-continuous-integration-and-delivery-pipeline&quot;&gt;&lt;img src=&quot;https://bitwiseman.github.io/jenkins.io/cdf-jumbotron/images/pipeline/serverless_pipeline.png&quot; alt=&quot;serverless pipeline&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/kelseyhightower/status/902525728725405697&quot;&gt;Everyone is&lt;/a&gt; &lt;a href=&quot;https://twitter.com/tracymiranda/status/1019883767937339392&quot;&gt;talking&lt;/a&gt; &lt;a href=&quot;https://twitter.com/IamStan/status/1018755075827814400&quot;&gt;about serverless.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As with any new hyped-technology the term 'serverless' is often overloaded with different meanings.
Sometimes serverless is oversimplified to mean function-as-a-service(faas).
But there is more to it than that.
Also, not many people are talking about doing CI/CD with serverless,
even though where there is code there still in need of continuous integration and continuous delivery.
So I was excited to hear about this talk by
&lt;a href=&quot;https://twitter.com/anubhavm&quot;&gt;Anubhav Mishra&lt;/a&gt; on
&lt;a href=&quot;https://speakerdeck.com/anubhavmishra/building-a-serverless-continuous-integration-and-delivery-pipeline&quot;&gt;Building a CI/CD Pipeline for Serverless Applications&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the talk &lt;a href=&quot;https://twitter.com/anubhavm&quot;&gt;Anubhav&lt;/a&gt; proposes a new definition for serverless:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Serverless is a technology pattern that provides services and concepts to minimize operational overhead that comes with managing servers.
It is a powerful abstraction when used can result in an increased focus on business value.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Anubhav Mishra, OSCON 2018 Portland
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The talk then goes on to demo Jenkins on AWS Fargate (a platform for running containers without managing servers or clusters).
The main focus is on increased elasticity/scaling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The advantages of this approach are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No nodes/servers to manage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Launch 10,000+ builds/containers in seconds&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No cost for idle time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The real headline is the cost saving, which is 2 orders of magnitude better with serverless.
A cost comparison is done based on 1 vCPU &amp;amp; 2GB memory:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;With Jenkins on Fargate: 100 builds * 5 mins = $0.633/month&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With Jenkins on EC2 Instances: ~50/month&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This huge potential cost saving is one of the things that makes serverless incredibly compelling.
Not to mention you don’t have to think much upfront about scaling the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But there are drawbacks with this approach, noted as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cold starts - slower boot times for clients&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Large container images (~1G)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No root access&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ephemeral storage (default)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is an area where Jenkins can continue to evolve to make the most of serverless architectures.
I highly recommend you check out the
&lt;a href=&quot;https://speakerdeck.com/anubhavmishra/building-a-serverless-continuous-integration-and-delivery-pipeline&quot;&gt;slides&lt;/a&gt; for yourself.
The best part is that, in the true spirit of open source, Anubvha shared the code
&lt;a href=&quot;https://github.com/anubhavmishra/hello-oscon&quot;&gt;here&lt;/a&gt;.
So you can give it a try yourself and build your own serverless CI/CD pipeline with Jenkins.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
</feed>
